// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dj-yacine-flutter/gojo/ping (interfaces: KeyGenrator)

// Package mockpg is a generated GoMock package.
package mockpg

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyGenrator is a mock of KeyGenrator interface.
type MockKeyGenrator struct {
	ctrl     *gomock.Controller
	recorder *MockKeyGenratorMockRecorder
}

// MockKeyGenratorMockRecorder is the mock recorder for MockKeyGenrator.
type MockKeyGenratorMockRecorder struct {
	mock *MockKeyGenrator
}

// NewMockKeyGenrator creates a new mock instance.
func NewMockKeyGenrator(ctrl *gomock.Controller) *MockKeyGenrator {
	mock := &MockKeyGenrator{ctrl: ctrl}
	mock.recorder = &MockKeyGenratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyGenrator) EXPECT() *MockKeyGenratorMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockKeyGenrator) Count() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count")
	ret0, _ := ret[0].(string)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockKeyGenratorMockRecorder) Count() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockKeyGenrator)(nil).Count))
}

// Key mocks base method.
func (m *MockKeyGenrator) Key() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key")
	ret0, _ := ret[0].(string)
	return ret0
}

// Key indicates an expected call of Key.
func (mr *MockKeyGenratorMockRecorder) Key() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyGenrator)(nil).Key))
}
