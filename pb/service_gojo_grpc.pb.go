// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: service_gojo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gojo_CreateUser_FullMethodName           = "/pb.Gojo/CreateUser"
	Gojo_LoginUser_FullMethodName            = "/pb.Gojo/LoginUser"
	Gojo_UpdateUser_FullMethodName           = "/pb.Gojo/UpdateUser"
	Gojo_VerifyEmail_FullMethodName          = "/pb.Gojo/VerifyEmail"
	Gojo_RenewToken_FullMethodName           = "/pb.Gojo/RenewToken"
	Gojo_GetAllGenres_FullMethodName         = "/pb.Gojo/GetAllGenres"
	Gojo_GetAllStudios_FullMethodName        = "/pb.Gojo/GetAllStudios"
	Gojo_GetAllLanguages_FullMethodName      = "/pb.Gojo/GetAllLanguages"
	Gojo_GetAllAnimeMetas_FullMethodName     = "/pb.Gojo/GetAllAnimeMetas"
	Gojo_CreateAnimeMovie_FullMethodName     = "/pb.Gojo/CreateAnimeMovie"
	Gojo_CreateGenres_FullMethodName         = "/pb.Gojo/CreateGenres"
	Gojo_CreateStudios_FullMethodName        = "/pb.Gojo/CreateStudios"
	Gojo_CreateLanguages_FullMethodName      = "/pb.Gojo/CreateLanguages"
	Gojo_CreateAnimeMovieMeta_FullMethodName = "/pb.Gojo/CreateAnimeMovieMeta"
	Gojo_AddInfoToAnimeMovie_FullMethodName  = "/pb.Gojo/AddInfoToAnimeMovie"
)

// GojoClient is the client API for Gojo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GojoClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error)
	RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error)
	GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error)
	GetAllStudios(ctx context.Context, in *GetAllStudiosRequest, opts ...grpc.CallOption) (*GetAllStudiosResponse, error)
	GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error)
	GetAllAnimeMetas(ctx context.Context, in *GetAllAnimeMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeMetasResponse, error)
	CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error)
	CreateGenres(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error)
	CreateStudios(ctx context.Context, in *CreateStudiosRequest, opts ...grpc.CallOption) (*CreateStudiosResponse, error)
	CreateLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...grpc.CallOption) (*CreateLanguagesResponse, error)
	CreateAnimeMovieMeta(ctx context.Context, in *CreateAnimeMovieMetaRequest, opts ...grpc.CallOption) (*CreateAnimeMovieMetaResponse, error)
	AddInfoToAnimeMovie(ctx context.Context, in *AddInfoAnimeMovieRequest, opts ...grpc.CallOption) (*AddInfoAnimeMovieResponse, error)
}

type gojoClient struct {
	cc grpc.ClientConnInterface
}

func NewGojoClient(cc grpc.ClientConnInterface) GojoClient {
	return &gojoClient{cc}
}

func (c *gojoClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) LoginUser(ctx context.Context, in *LoginUserRequest, opts ...grpc.CallOption) (*LoginUserResponse, error) {
	out := new(LoginUserResponse)
	err := c.cc.Invoke(ctx, Gojo_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) VerifyEmail(ctx context.Context, in *VerifyEmailRequest, opts ...grpc.CallOption) (*VerifyEmailResponse, error) {
	out := new(VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Gojo_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) RenewToken(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*RenewTokenResponse, error) {
	out := new(RenewTokenResponse)
	err := c.cc.Invoke(ctx, Gojo_RenewToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllGenres(ctx context.Context, in *GetAllGenresRequest, opts ...grpc.CallOption) (*GetAllGenresResponse, error) {
	out := new(GetAllGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllStudios(ctx context.Context, in *GetAllStudiosRequest, opts ...grpc.CallOption) (*GetAllStudiosResponse, error) {
	out := new(GetAllStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllLanguages(ctx context.Context, in *GetAllLanguagesRequest, opts ...grpc.CallOption) (*GetAllLanguagesResponse, error) {
	out := new(GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeMetas(ctx context.Context, in *GetAllAnimeMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeMetasResponse, error) {
	out := new(GetAllAnimeMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error) {
	out := new(CreateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateGenres(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error) {
	out := new(CreateGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateStudios(ctx context.Context, in *CreateStudiosRequest, opts ...grpc.CallOption) (*CreateStudiosResponse, error) {
	out := new(CreateStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateLanguages(ctx context.Context, in *CreateLanguagesRequest, opts ...grpc.CallOption) (*CreateLanguagesResponse, error) {
	out := new(CreateLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieMeta(ctx context.Context, in *CreateAnimeMovieMetaRequest, opts ...grpc.CallOption) (*CreateAnimeMovieMetaResponse, error) {
	out := new(CreateAnimeMovieMetaResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieMeta_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddInfoToAnimeMovie(ctx context.Context, in *AddInfoAnimeMovieRequest, opts ...grpc.CallOption) (*AddInfoAnimeMovieResponse, error) {
	out := new(AddInfoAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_AddInfoToAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GojoServer is the server API for Gojo service.
// All implementations must embed UnimplementedGojoServer
// for forward compatibility
type GojoServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error)
	RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error)
	GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error)
	GetAllStudios(context.Context, *GetAllStudiosRequest) (*GetAllStudiosResponse, error)
	GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error)
	GetAllAnimeMetas(context.Context, *GetAllAnimeMetasRequest) (*GetAllAnimeMetasResponse, error)
	CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error)
	CreateGenres(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error)
	CreateStudios(context.Context, *CreateStudiosRequest) (*CreateStudiosResponse, error)
	CreateLanguages(context.Context, *CreateLanguagesRequest) (*CreateLanguagesResponse, error)
	CreateAnimeMovieMeta(context.Context, *CreateAnimeMovieMetaRequest) (*CreateAnimeMovieMetaResponse, error)
	AddInfoToAnimeMovie(context.Context, *AddInfoAnimeMovieRequest) (*AddInfoAnimeMovieResponse, error)
	mustEmbedUnimplementedGojoServer()
}

// UnimplementedGojoServer must be embedded to have forward compatible implementations.
type UnimplementedGojoServer struct {
}

func (UnimplementedGojoServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGojoServer) LoginUser(context.Context, *LoginUserRequest) (*LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGojoServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGojoServer) VerifyEmail(context.Context, *VerifyEmailRequest) (*VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedGojoServer) RenewToken(context.Context, *RenewTokenRequest) (*RenewTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewToken not implemented")
}
func (UnimplementedGojoServer) GetAllGenres(context.Context, *GetAllGenresRequest) (*GetAllGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedGojoServer) GetAllStudios(context.Context, *GetAllStudiosRequest) (*GetAllStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudios not implemented")
}
func (UnimplementedGojoServer) GetAllLanguages(context.Context, *GetAllLanguagesRequest) (*GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeMetas(context.Context, *GetAllAnimeMetasRequest) (*GetAllAnimeMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateGenres(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenres not implemented")
}
func (UnimplementedGojoServer) CreateStudios(context.Context, *CreateStudiosRequest) (*CreateStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudios not implemented")
}
func (UnimplementedGojoServer) CreateLanguages(context.Context, *CreateLanguagesRequest) (*CreateLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguages not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieMeta(context.Context, *CreateAnimeMovieMetaRequest) (*CreateAnimeMovieMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieMeta not implemented")
}
func (UnimplementedGojoServer) AddInfoToAnimeMovie(context.Context, *AddInfoAnimeMovieRequest) (*AddInfoAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddInfoToAnimeMovie not implemented")
}
func (UnimplementedGojoServer) mustEmbedUnimplementedGojoServer() {}

// UnsafeGojoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GojoServer will
// result in compilation errors.
type UnsafeGojoServer interface {
	mustEmbedUnimplementedGojoServer()
}

func RegisterGojoServer(s grpc.ServiceRegistrar, srv GojoServer) {
	s.RegisterService(&Gojo_ServiceDesc, srv)
}

func _Gojo_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).LoginUser(ctx, req.(*LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).VerifyEmail(ctx, req.(*VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_RenewToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).RenewToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_RenewToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).RenewToken(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllGenres(ctx, req.(*GetAllGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllStudios(ctx, req.(*GetAllStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllLanguages(ctx, req.(*GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnimeMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeMetas(ctx, req.(*GetAllAnimeMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovie(ctx, req.(*CreateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateGenres(ctx, req.(*CreateGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateStudios(ctx, req.(*CreateStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateLanguages(ctx, req.(*CreateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieMeta_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieMeta(ctx, req.(*CreateAnimeMovieMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddInfoToAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddInfoAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddInfoToAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddInfoToAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddInfoToAnimeMovie(ctx, req.(*AddInfoAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gojo_ServiceDesc is the grpc.ServiceDesc for Gojo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gojo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gojo",
	HandlerType: (*GojoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Gojo_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Gojo_LoginUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Gojo_UpdateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Gojo_VerifyEmail_Handler,
		},
		{
			MethodName: "RenewToken",
			Handler:    _Gojo_RenewToken_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _Gojo_GetAllGenres_Handler,
		},
		{
			MethodName: "GetAllStudios",
			Handler:    _Gojo_GetAllStudios_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _Gojo_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetAllAnimeMetas",
			Handler:    _Gojo_GetAllAnimeMetas_Handler,
		},
		{
			MethodName: "CreateAnimeMovie",
			Handler:    _Gojo_CreateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateGenres",
			Handler:    _Gojo_CreateGenres_Handler,
		},
		{
			MethodName: "CreateStudios",
			Handler:    _Gojo_CreateStudios_Handler,
		},
		{
			MethodName: "CreateLanguages",
			Handler:    _Gojo_CreateLanguages_Handler,
		},
		{
			MethodName: "CreateAnimeMovieMeta",
			Handler:    _Gojo_CreateAnimeMovieMeta_Handler,
		},
		{
			MethodName: "AddInfoToAnimeMovie",
			Handler:    _Gojo_AddInfoToAnimeMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gojo.proto",
}
