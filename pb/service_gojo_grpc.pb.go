// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: service_gojo.proto

package pb

import (
	context "context"
	ampb "github.com/dj-yacine-flutter/gojo/pb/ampb"
	aspb "github.com/dj-yacine-flutter/gojo/pb/aspb"
	nfpb "github.com/dj-yacine-flutter/gojo/pb/nfpb"
	uspb "github.com/dj-yacine-flutter/gojo/pb/uspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gojo_CreateUser_FullMethodName                = "/pb.Gojo/CreateUser"
	Gojo_LoginUser_FullMethodName                 = "/pb.Gojo/LoginUser"
	Gojo_UpdateUser_FullMethodName                = "/pb.Gojo/UpdateUser"
	Gojo_VerifyEmail_FullMethodName               = "/pb.Gojo/VerifyEmail"
	Gojo_RenewTokens_FullMethodName               = "/pb.Gojo/RenewTokens"
	Gojo_CreateGenres_FullMethodName              = "/pb.Gojo/CreateGenres"
	Gojo_CreateStudios_FullMethodName             = "/pb.Gojo/CreateStudios"
	Gojo_CreateLanguages_FullMethodName           = "/pb.Gojo/CreateLanguages"
	Gojo_GetAllGenres_FullMethodName              = "/pb.Gojo/GetAllGenres"
	Gojo_GetAllStudios_FullMethodName             = "/pb.Gojo/GetAllStudios"
	Gojo_GetAllLanguages_FullMethodName           = "/pb.Gojo/GetAllLanguages"
	Gojo_CreateAnimeMovie_FullMethodName          = "/pb.Gojo/CreateAnimeMovie"
	Gojo_CreateAnimeMovieMetas_FullMethodName     = "/pb.Gojo/CreateAnimeMovieMetas"
	Gojo_CreateAnimeMovieResource_FullMethodName  = "/pb.Gojo/CreateAnimeMovieResource"
	Gojo_GetAllAnimeMovies_FullMethodName         = "/pb.Gojo/GetAllAnimeMovies"
	Gojo_GetAllAnimeMovieMetas_FullMethodName     = "/pb.Gojo/GetAllAnimeMovieMetas"
	Gojo_AddAnimeMovieInfo_FullMethodName         = "/pb.Gojo/AddAnimeMovieInfo"
	Gojo_UpdateAnimeMovie_FullMethodName          = "/pb.Gojo/UpdateAnimeMovie"
	Gojo_CreateAnimeMovieServer_FullMethodName    = "/pb.Gojo/CreateAnimeMovieServer"
	Gojo_AddAnimeMovieData_FullMethodName         = "/pb.Gojo/AddAnimeMovieData"
	Gojo_CreateAnimeSerie_FullMethodName          = "/pb.Gojo/CreateAnimeSerie"
	Gojo_CreateAnimeSerieMetas_FullMethodName     = "/pb.Gojo/CreateAnimeSerieMetas"
	Gojo_CreateAnimeSerieResource_FullMethodName  = "/pb.Gojo/CreateAnimeSerieResource"
	Gojo_GetAllAnimeSeries_FullMethodName         = "/pb.Gojo/GetAllAnimeSeries"
	Gojo_GetAllAnimeSerieMetas_FullMethodName     = "/pb.Gojo/GetAllAnimeSerieMetas"
	Gojo_AddAnimeSerieInfo_FullMethodName         = "/pb.Gojo/AddAnimeSerieInfo"
	Gojo_UpdateAnimeSerie_FullMethodName          = "/pb.Gojo/UpdateAnimeSerie"
	Gojo_CreateAnimeSerieServer_FullMethodName    = "/pb.Gojo/CreateAnimeSerieServer"
	Gojo_CreateAnimeSerieSeason_FullMethodName    = "/pb.Gojo/CreateAnimeSerieSeason"
	Gojo_AddAnimeSerieSeasonMetas_FullMethodName  = "/pb.Gojo/AddAnimeSerieSeasonMetas"
	Gojo_CreateAnimeSerieEpisode_FullMethodName   = "/pb.Gojo/CreateAnimeSerieEpisode"
	Gojo_AddAnimeSerieEpisodeMetas_FullMethodName = "/pb.Gojo/AddAnimeSerieEpisodeMetas"
)

// GojoClient is the client API for Gojo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GojoClient interface {
	CreateUser(ctx context.Context, in *uspb.CreateUserRequest, opts ...grpc.CallOption) (*uspb.CreateUserResponse, error)
	LoginUser(ctx context.Context, in *uspb.LoginUserRequest, opts ...grpc.CallOption) (*uspb.LoginUserResponse, error)
	UpdateUser(ctx context.Context, in *uspb.UpdateUserRequest, opts ...grpc.CallOption) (*uspb.UpdateUserResponse, error)
	VerifyEmail(ctx context.Context, in *uspb.VerifyEmailRequest, opts ...grpc.CallOption) (*uspb.VerifyEmailResponse, error)
	RenewTokens(ctx context.Context, in *uspb.RenewTokensRequest, opts ...grpc.CallOption) (*uspb.RenewTokensResponse, error)
	CreateGenres(ctx context.Context, in *nfpb.CreateGenresRequest, opts ...grpc.CallOption) (*nfpb.CreateGenresResponse, error)
	CreateStudios(ctx context.Context, in *nfpb.CreateStudiosRequest, opts ...grpc.CallOption) (*nfpb.CreateStudiosResponse, error)
	CreateLanguages(ctx context.Context, in *nfpb.CreateLanguagesRequest, opts ...grpc.CallOption) (*nfpb.CreateLanguagesResponse, error)
	GetAllGenres(ctx context.Context, in *nfpb.GetAllGenresRequest, opts ...grpc.CallOption) (*nfpb.GetAllGenresResponse, error)
	GetAllStudios(ctx context.Context, in *nfpb.GetAllStudiosRequest, opts ...grpc.CallOption) (*nfpb.GetAllStudiosResponse, error)
	GetAllLanguages(ctx context.Context, in *nfpb.GetAllLanguagesRequest, opts ...grpc.CallOption) (*nfpb.GetAllLanguagesResponse, error)
	CreateAnimeMovie(ctx context.Context, in *ampb.CreateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(ctx context.Context, in *ampb.CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieResource(ctx context.Context, in *ampb.CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResourceResponse, error)
	GetAllAnimeMovies(ctx context.Context, in *ampb.GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(ctx context.Context, in *ampb.GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMovieMetasResponse, error)
	AddAnimeMovieInfo(ctx context.Context, in *ampb.AddAnimeMovieInfoRequest, opts ...grpc.CallOption) (*ampb.AddAnimeMovieInfoResponse, error)
	UpdateAnimeMovie(ctx context.Context, in *ampb.UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.UpdateAnimeMovieResponse, error)
	CreateAnimeMovieServer(ctx context.Context, in *ampb.CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieServerResponse, error)
	AddAnimeMovieData(ctx context.Context, in *ampb.AddAnimeMovieDataRequest, opts ...grpc.CallOption) (*ampb.AddAnimeMovieDataResponse, error)
	CreateAnimeSerie(ctx context.Context, in *aspb.CreateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(ctx context.Context, in *aspb.CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieResource(ctx context.Context, in *aspb.CreateAnimeSerieResourceRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResourceResponse, error)
	GetAllAnimeSeries(ctx context.Context, in *aspb.GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSeriesResponse, error)
	GetAllAnimeSerieMetas(ctx context.Context, in *aspb.GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSerieMetasResponse, error)
	AddAnimeSerieInfo(ctx context.Context, in *aspb.AddAnimeSerieInfoRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieInfoResponse, error)
	UpdateAnimeSerie(ctx context.Context, in *aspb.UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.UpdateAnimeSerieResponse, error)
	CreateAnimeSerieServer(ctx context.Context, in *aspb.CreateAnimeSerieServerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieServerResponse, error)
	CreateAnimeSerieSeason(ctx context.Context, in *aspb.CreateAnimeSerieSeasonRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieSeasonResponse, error)
	AddAnimeSerieSeasonMetas(ctx context.Context, in *aspb.AddAnimeSerieSeasonMetasRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieSeasonMetasResponse, error)
	CreateAnimeSerieEpisode(ctx context.Context, in *aspb.CreateAnimeSerieEpisodeRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieEpisodeResponse, error)
	AddAnimeSerieEpisodeMetas(ctx context.Context, in *aspb.AddAnimeSerieEpisodeMetasRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieEpisodeMetasResponse, error)
}

type gojoClient struct {
	cc grpc.ClientConnInterface
}

func NewGojoClient(cc grpc.ClientConnInterface) GojoClient {
	return &gojoClient{cc}
}

func (c *gojoClient) CreateUser(ctx context.Context, in *uspb.CreateUserRequest, opts ...grpc.CallOption) (*uspb.CreateUserResponse, error) {
	out := new(uspb.CreateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) LoginUser(ctx context.Context, in *uspb.LoginUserRequest, opts ...grpc.CallOption) (*uspb.LoginUserResponse, error) {
	out := new(uspb.LoginUserResponse)
	err := c.cc.Invoke(ctx, Gojo_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateUser(ctx context.Context, in *uspb.UpdateUserRequest, opts ...grpc.CallOption) (*uspb.UpdateUserResponse, error) {
	out := new(uspb.UpdateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) VerifyEmail(ctx context.Context, in *uspb.VerifyEmailRequest, opts ...grpc.CallOption) (*uspb.VerifyEmailResponse, error) {
	out := new(uspb.VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Gojo_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) RenewTokens(ctx context.Context, in *uspb.RenewTokensRequest, opts ...grpc.CallOption) (*uspb.RenewTokensResponse, error) {
	out := new(uspb.RenewTokensResponse)
	err := c.cc.Invoke(ctx, Gojo_RenewTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateGenres(ctx context.Context, in *nfpb.CreateGenresRequest, opts ...grpc.CallOption) (*nfpb.CreateGenresResponse, error) {
	out := new(nfpb.CreateGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateStudios(ctx context.Context, in *nfpb.CreateStudiosRequest, opts ...grpc.CallOption) (*nfpb.CreateStudiosResponse, error) {
	out := new(nfpb.CreateStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateLanguages(ctx context.Context, in *nfpb.CreateLanguagesRequest, opts ...grpc.CallOption) (*nfpb.CreateLanguagesResponse, error) {
	out := new(nfpb.CreateLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllGenres(ctx context.Context, in *nfpb.GetAllGenresRequest, opts ...grpc.CallOption) (*nfpb.GetAllGenresResponse, error) {
	out := new(nfpb.GetAllGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllStudios(ctx context.Context, in *nfpb.GetAllStudiosRequest, opts ...grpc.CallOption) (*nfpb.GetAllStudiosResponse, error) {
	out := new(nfpb.GetAllStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllLanguages(ctx context.Context, in *nfpb.GetAllLanguagesRequest, opts ...grpc.CallOption) (*nfpb.GetAllLanguagesResponse, error) {
	out := new(nfpb.GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovie(ctx context.Context, in *ampb.CreateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResponse, error) {
	out := new(ampb.CreateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieMetas(ctx context.Context, in *ampb.CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieMetasResponse, error) {
	out := new(ampb.CreateAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieResource(ctx context.Context, in *ampb.CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResourceResponse, error) {
	out := new(ampb.CreateAnimeMovieResourceResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeMovies(ctx context.Context, in *ampb.GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMoviesResponse, error) {
	out := new(ampb.GetAllAnimeMoviesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeMovieMetas(ctx context.Context, in *ampb.GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMovieMetasResponse, error) {
	out := new(ampb.GetAllAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddAnimeMovieInfo(ctx context.Context, in *ampb.AddAnimeMovieInfoRequest, opts ...grpc.CallOption) (*ampb.AddAnimeMovieInfoResponse, error) {
	out := new(ampb.AddAnimeMovieInfoResponse)
	err := c.cc.Invoke(ctx, Gojo_AddAnimeMovieInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateAnimeMovie(ctx context.Context, in *ampb.UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.UpdateAnimeMovieResponse, error) {
	out := new(ampb.UpdateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieServer(ctx context.Context, in *ampb.CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieServerResponse, error) {
	out := new(ampb.CreateAnimeMovieServerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddAnimeMovieData(ctx context.Context, in *ampb.AddAnimeMovieDataRequest, opts ...grpc.CallOption) (*ampb.AddAnimeMovieDataResponse, error) {
	out := new(ampb.AddAnimeMovieDataResponse)
	err := c.cc.Invoke(ctx, Gojo_AddAnimeMovieData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerie(ctx context.Context, in *aspb.CreateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResponse, error) {
	out := new(aspb.CreateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieMetas(ctx context.Context, in *aspb.CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieMetasResponse, error) {
	out := new(aspb.CreateAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieResource(ctx context.Context, in *aspb.CreateAnimeSerieResourceRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResourceResponse, error) {
	out := new(aspb.CreateAnimeSerieResourceResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeSeries(ctx context.Context, in *aspb.GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSeriesResponse, error) {
	out := new(aspb.GetAllAnimeSeriesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeSerieMetas(ctx context.Context, in *aspb.GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSerieMetasResponse, error) {
	out := new(aspb.GetAllAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddAnimeSerieInfo(ctx context.Context, in *aspb.AddAnimeSerieInfoRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieInfoResponse, error) {
	out := new(aspb.AddAnimeSerieInfoResponse)
	err := c.cc.Invoke(ctx, Gojo_AddAnimeSerieInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateAnimeSerie(ctx context.Context, in *aspb.UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.UpdateAnimeSerieResponse, error) {
	out := new(aspb.UpdateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieServer(ctx context.Context, in *aspb.CreateAnimeSerieServerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieServerResponse, error) {
	out := new(aspb.CreateAnimeSerieServerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieSeason(ctx context.Context, in *aspb.CreateAnimeSerieSeasonRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieSeasonResponse, error) {
	out := new(aspb.CreateAnimeSerieSeasonResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddAnimeSerieSeasonMetas(ctx context.Context, in *aspb.AddAnimeSerieSeasonMetasRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieSeasonMetasResponse, error) {
	out := new(aspb.AddAnimeSerieSeasonMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_AddAnimeSerieSeasonMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieEpisode(ctx context.Context, in *aspb.CreateAnimeSerieEpisodeRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieEpisodeResponse, error) {
	out := new(aspb.CreateAnimeSerieEpisodeResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieEpisode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) AddAnimeSerieEpisodeMetas(ctx context.Context, in *aspb.AddAnimeSerieEpisodeMetasRequest, opts ...grpc.CallOption) (*aspb.AddAnimeSerieEpisodeMetasResponse, error) {
	out := new(aspb.AddAnimeSerieEpisodeMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_AddAnimeSerieEpisodeMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GojoServer is the server API for Gojo service.
// All implementations must embed UnimplementedGojoServer
// for forward compatibility
type GojoServer interface {
	CreateUser(context.Context, *uspb.CreateUserRequest) (*uspb.CreateUserResponse, error)
	LoginUser(context.Context, *uspb.LoginUserRequest) (*uspb.LoginUserResponse, error)
	UpdateUser(context.Context, *uspb.UpdateUserRequest) (*uspb.UpdateUserResponse, error)
	VerifyEmail(context.Context, *uspb.VerifyEmailRequest) (*uspb.VerifyEmailResponse, error)
	RenewTokens(context.Context, *uspb.RenewTokensRequest) (*uspb.RenewTokensResponse, error)
	CreateGenres(context.Context, *nfpb.CreateGenresRequest) (*nfpb.CreateGenresResponse, error)
	CreateStudios(context.Context, *nfpb.CreateStudiosRequest) (*nfpb.CreateStudiosResponse, error)
	CreateLanguages(context.Context, *nfpb.CreateLanguagesRequest) (*nfpb.CreateLanguagesResponse, error)
	GetAllGenres(context.Context, *nfpb.GetAllGenresRequest) (*nfpb.GetAllGenresResponse, error)
	GetAllStudios(context.Context, *nfpb.GetAllStudiosRequest) (*nfpb.GetAllStudiosResponse, error)
	GetAllLanguages(context.Context, *nfpb.GetAllLanguagesRequest) (*nfpb.GetAllLanguagesResponse, error)
	CreateAnimeMovie(context.Context, *ampb.CreateAnimeMovieRequest) (*ampb.CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(context.Context, *ampb.CreateAnimeMovieMetasRequest) (*ampb.CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieResource(context.Context, *ampb.CreateAnimeMovieResourceRequest) (*ampb.CreateAnimeMovieResourceResponse, error)
	GetAllAnimeMovies(context.Context, *ampb.GetAllAnimeMoviesRequest) (*ampb.GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(context.Context, *ampb.GetAllAnimeMovieMetasRequest) (*ampb.GetAllAnimeMovieMetasResponse, error)
	AddAnimeMovieInfo(context.Context, *ampb.AddAnimeMovieInfoRequest) (*ampb.AddAnimeMovieInfoResponse, error)
	UpdateAnimeMovie(context.Context, *ampb.UpdateAnimeMovieRequest) (*ampb.UpdateAnimeMovieResponse, error)
	CreateAnimeMovieServer(context.Context, *ampb.CreateAnimeMovieServerRequest) (*ampb.CreateAnimeMovieServerResponse, error)
	AddAnimeMovieData(context.Context, *ampb.AddAnimeMovieDataRequest) (*ampb.AddAnimeMovieDataResponse, error)
	CreateAnimeSerie(context.Context, *aspb.CreateAnimeSerieRequest) (*aspb.CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(context.Context, *aspb.CreateAnimeSerieMetasRequest) (*aspb.CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieResource(context.Context, *aspb.CreateAnimeSerieResourceRequest) (*aspb.CreateAnimeSerieResourceResponse, error)
	GetAllAnimeSeries(context.Context, *aspb.GetAllAnimeSeriesRequest) (*aspb.GetAllAnimeSeriesResponse, error)
	GetAllAnimeSerieMetas(context.Context, *aspb.GetAllAnimeSerieMetasRequest) (*aspb.GetAllAnimeSerieMetasResponse, error)
	AddAnimeSerieInfo(context.Context, *aspb.AddAnimeSerieInfoRequest) (*aspb.AddAnimeSerieInfoResponse, error)
	UpdateAnimeSerie(context.Context, *aspb.UpdateAnimeSerieRequest) (*aspb.UpdateAnimeSerieResponse, error)
	CreateAnimeSerieServer(context.Context, *aspb.CreateAnimeSerieServerRequest) (*aspb.CreateAnimeSerieServerResponse, error)
	CreateAnimeSerieSeason(context.Context, *aspb.CreateAnimeSerieSeasonRequest) (*aspb.CreateAnimeSerieSeasonResponse, error)
	AddAnimeSerieSeasonMetas(context.Context, *aspb.AddAnimeSerieSeasonMetasRequest) (*aspb.AddAnimeSerieSeasonMetasResponse, error)
	CreateAnimeSerieEpisode(context.Context, *aspb.CreateAnimeSerieEpisodeRequest) (*aspb.CreateAnimeSerieEpisodeResponse, error)
	AddAnimeSerieEpisodeMetas(context.Context, *aspb.AddAnimeSerieEpisodeMetasRequest) (*aspb.AddAnimeSerieEpisodeMetasResponse, error)
	mustEmbedUnimplementedGojoServer()
}

// UnimplementedGojoServer must be embedded to have forward compatible implementations.
type UnimplementedGojoServer struct {
}

func (UnimplementedGojoServer) CreateUser(context.Context, *uspb.CreateUserRequest) (*uspb.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGojoServer) LoginUser(context.Context, *uspb.LoginUserRequest) (*uspb.LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGojoServer) UpdateUser(context.Context, *uspb.UpdateUserRequest) (*uspb.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGojoServer) VerifyEmail(context.Context, *uspb.VerifyEmailRequest) (*uspb.VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedGojoServer) RenewTokens(context.Context, *uspb.RenewTokensRequest) (*uspb.RenewTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewTokens not implemented")
}
func (UnimplementedGojoServer) CreateGenres(context.Context, *nfpb.CreateGenresRequest) (*nfpb.CreateGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenres not implemented")
}
func (UnimplementedGojoServer) CreateStudios(context.Context, *nfpb.CreateStudiosRequest) (*nfpb.CreateStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudios not implemented")
}
func (UnimplementedGojoServer) CreateLanguages(context.Context, *nfpb.CreateLanguagesRequest) (*nfpb.CreateLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguages not implemented")
}
func (UnimplementedGojoServer) GetAllGenres(context.Context, *nfpb.GetAllGenresRequest) (*nfpb.GetAllGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedGojoServer) GetAllStudios(context.Context, *nfpb.GetAllStudiosRequest) (*nfpb.GetAllStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudios not implemented")
}
func (UnimplementedGojoServer) GetAllLanguages(context.Context, *nfpb.GetAllLanguagesRequest) (*nfpb.GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovie(context.Context, *ampb.CreateAnimeMovieRequest) (*ampb.CreateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieMetas(context.Context, *ampb.CreateAnimeMovieMetasRequest) (*ampb.CreateAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieResource(context.Context, *ampb.CreateAnimeMovieResourceRequest) (*ampb.CreateAnimeMovieResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieResource not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeMovies(context.Context, *ampb.GetAllAnimeMoviesRequest) (*ampb.GetAllAnimeMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovies not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeMovieMetas(context.Context, *ampb.GetAllAnimeMovieMetasRequest) (*ampb.GetAllAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovieMetas not implemented")
}
func (UnimplementedGojoServer) AddAnimeMovieInfo(context.Context, *ampb.AddAnimeMovieInfoRequest) (*ampb.AddAnimeMovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeMovieInfo not implemented")
}
func (UnimplementedGojoServer) UpdateAnimeMovie(context.Context, *ampb.UpdateAnimeMovieRequest) (*ampb.UpdateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieServer(context.Context, *ampb.CreateAnimeMovieServerRequest) (*ampb.CreateAnimeMovieServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieServer not implemented")
}
func (UnimplementedGojoServer) AddAnimeMovieData(context.Context, *ampb.AddAnimeMovieDataRequest) (*ampb.AddAnimeMovieDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeMovieData not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerie(context.Context, *aspb.CreateAnimeSerieRequest) (*aspb.CreateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieMetas(context.Context, *aspb.CreateAnimeSerieMetasRequest) (*aspb.CreateAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieResource(context.Context, *aspb.CreateAnimeSerieResourceRequest) (*aspb.CreateAnimeSerieResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieResource not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeSeries(context.Context, *aspb.GetAllAnimeSeriesRequest) (*aspb.GetAllAnimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSeries not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeSerieMetas(context.Context, *aspb.GetAllAnimeSerieMetasRequest) (*aspb.GetAllAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSerieMetas not implemented")
}
func (UnimplementedGojoServer) AddAnimeSerieInfo(context.Context, *aspb.AddAnimeSerieInfoRequest) (*aspb.AddAnimeSerieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeSerieInfo not implemented")
}
func (UnimplementedGojoServer) UpdateAnimeSerie(context.Context, *aspb.UpdateAnimeSerieRequest) (*aspb.UpdateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeSerie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieServer(context.Context, *aspb.CreateAnimeSerieServerRequest) (*aspb.CreateAnimeSerieServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieServer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieSeason(context.Context, *aspb.CreateAnimeSerieSeasonRequest) (*aspb.CreateAnimeSerieSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieSeason not implemented")
}
func (UnimplementedGojoServer) AddAnimeSerieSeasonMetas(context.Context, *aspb.AddAnimeSerieSeasonMetasRequest) (*aspb.AddAnimeSerieSeasonMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeSerieSeasonMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieEpisode(context.Context, *aspb.CreateAnimeSerieEpisodeRequest) (*aspb.CreateAnimeSerieEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieEpisode not implemented")
}
func (UnimplementedGojoServer) AddAnimeSerieEpisodeMetas(context.Context, *aspb.AddAnimeSerieEpisodeMetasRequest) (*aspb.AddAnimeSerieEpisodeMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeSerieEpisodeMetas not implemented")
}
func (UnimplementedGojoServer) mustEmbedUnimplementedGojoServer() {}

// UnsafeGojoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GojoServer will
// result in compilation errors.
type UnsafeGojoServer interface {
	mustEmbedUnimplementedGojoServer()
}

func RegisterGojoServer(s grpc.ServiceRegistrar, srv GojoServer) {
	s.RegisterService(&Gojo_ServiceDesc, srv)
}

func _Gojo_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateUser(ctx, req.(*uspb.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).LoginUser(ctx, req.(*uspb.LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateUser(ctx, req.(*uspb.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).VerifyEmail(ctx, req.(*uspb.VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_RenewTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.RenewTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).RenewTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_RenewTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).RenewTokens(ctx, req.(*uspb.RenewTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateGenres(ctx, req.(*nfpb.CreateGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateStudios(ctx, req.(*nfpb.CreateStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateLanguages(ctx, req.(*nfpb.CreateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllGenres(ctx, req.(*nfpb.GetAllGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllStudios(ctx, req.(*nfpb.GetAllStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllLanguages(ctx, req.(*nfpb.GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovie(ctx, req.(*ampb.CreateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieMetas(ctx, req.(*ampb.CreateAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieResource(ctx, req.(*ampb.CreateAnimeMovieResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.GetAllAnimeMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeMovies(ctx, req.(*ampb.GetAllAnimeMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.GetAllAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeMovieMetas(ctx, req.(*ampb.GetAllAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddAnimeMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.AddAnimeMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddAnimeMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddAnimeMovieInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddAnimeMovieInfo(ctx, req.(*ampb.AddAnimeMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.UpdateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateAnimeMovie(ctx, req.(*ampb.UpdateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieServer(ctx, req.(*ampb.CreateAnimeMovieServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddAnimeMovieData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.AddAnimeMovieDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddAnimeMovieData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddAnimeMovieData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddAnimeMovieData(ctx, req.(*ampb.AddAnimeMovieDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerie(ctx, req.(*aspb.CreateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieMetas(ctx, req.(*aspb.CreateAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieResource(ctx, req.(*aspb.CreateAnimeSerieResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetAllAnimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeSeries(ctx, req.(*aspb.GetAllAnimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetAllAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeSerieMetas(ctx, req.(*aspb.GetAllAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddAnimeSerieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.AddAnimeSerieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddAnimeSerieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddAnimeSerieInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddAnimeSerieInfo(ctx, req.(*aspb.AddAnimeSerieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.UpdateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateAnimeSerie(ctx, req.(*aspb.UpdateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieServer(ctx, req.(*aspb.CreateAnimeSerieServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieSeason(ctx, req.(*aspb.CreateAnimeSerieSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddAnimeSerieSeasonMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.AddAnimeSerieSeasonMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddAnimeSerieSeasonMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddAnimeSerieSeasonMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddAnimeSerieSeasonMetas(ctx, req.(*aspb.AddAnimeSerieSeasonMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieEpisode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieEpisode(ctx, req.(*aspb.CreateAnimeSerieEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_AddAnimeSerieEpisodeMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.AddAnimeSerieEpisodeMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).AddAnimeSerieEpisodeMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_AddAnimeSerieEpisodeMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).AddAnimeSerieEpisodeMetas(ctx, req.(*aspb.AddAnimeSerieEpisodeMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gojo_ServiceDesc is the grpc.ServiceDesc for Gojo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gojo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gojo",
	HandlerType: (*GojoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Gojo_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Gojo_LoginUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Gojo_UpdateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Gojo_VerifyEmail_Handler,
		},
		{
			MethodName: "RenewTokens",
			Handler:    _Gojo_RenewTokens_Handler,
		},
		{
			MethodName: "CreateGenres",
			Handler:    _Gojo_CreateGenres_Handler,
		},
		{
			MethodName: "CreateStudios",
			Handler:    _Gojo_CreateStudios_Handler,
		},
		{
			MethodName: "CreateLanguages",
			Handler:    _Gojo_CreateLanguages_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _Gojo_GetAllGenres_Handler,
		},
		{
			MethodName: "GetAllStudios",
			Handler:    _Gojo_GetAllStudios_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _Gojo_GetAllLanguages_Handler,
		},
		{
			MethodName: "CreateAnimeMovie",
			Handler:    _Gojo_CreateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeMovieMetas",
			Handler:    _Gojo_CreateAnimeMovieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeMovieResource",
			Handler:    _Gojo_CreateAnimeMovieResource_Handler,
		},
		{
			MethodName: "GetAllAnimeMovies",
			Handler:    _Gojo_GetAllAnimeMovies_Handler,
		},
		{
			MethodName: "GetAllAnimeMovieMetas",
			Handler:    _Gojo_GetAllAnimeMovieMetas_Handler,
		},
		{
			MethodName: "AddAnimeMovieInfo",
			Handler:    _Gojo_AddAnimeMovieInfo_Handler,
		},
		{
			MethodName: "UpdateAnimeMovie",
			Handler:    _Gojo_UpdateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeMovieServer",
			Handler:    _Gojo_CreateAnimeMovieServer_Handler,
		},
		{
			MethodName: "AddAnimeMovieData",
			Handler:    _Gojo_AddAnimeMovieData_Handler,
		},
		{
			MethodName: "CreateAnimeSerie",
			Handler:    _Gojo_CreateAnimeSerie_Handler,
		},
		{
			MethodName: "CreateAnimeSerieMetas",
			Handler:    _Gojo_CreateAnimeSerieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSerieResource",
			Handler:    _Gojo_CreateAnimeSerieResource_Handler,
		},
		{
			MethodName: "GetAllAnimeSeries",
			Handler:    _Gojo_GetAllAnimeSeries_Handler,
		},
		{
			MethodName: "GetAllAnimeSerieMetas",
			Handler:    _Gojo_GetAllAnimeSerieMetas_Handler,
		},
		{
			MethodName: "AddAnimeSerieInfo",
			Handler:    _Gojo_AddAnimeSerieInfo_Handler,
		},
		{
			MethodName: "UpdateAnimeSerie",
			Handler:    _Gojo_UpdateAnimeSerie_Handler,
		},
		{
			MethodName: "CreateAnimeSerieServer",
			Handler:    _Gojo_CreateAnimeSerieServer_Handler,
		},
		{
			MethodName: "CreateAnimeSerieSeason",
			Handler:    _Gojo_CreateAnimeSerieSeason_Handler,
		},
		{
			MethodName: "AddAnimeSerieSeasonMetas",
			Handler:    _Gojo_AddAnimeSerieSeasonMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSerieEpisode",
			Handler:    _Gojo_CreateAnimeSerieEpisode_Handler,
		},
		{
			MethodName: "AddAnimeSerieEpisodeMetas",
			Handler:    _Gojo_AddAnimeSerieEpisodeMetas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gojo.proto",
}
