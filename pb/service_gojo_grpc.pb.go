// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: service_gojo.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gojo_CreateAnimeMovie_FullMethodName = "/pb.Gojo/CreateAnimeMovie"
	Gojo_CreateGenre_FullMethodName      = "/pb.Gojo/CreateGenre"
)

// GojoClient is the client API for Gojo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GojoClient interface {
	CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error)
	CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error)
}

type gojoClient struct {
	cc grpc.ClientConnInterface
}

func NewGojoClient(cc grpc.ClientConnInterface) GojoClient {
	return &gojoClient{cc}
}

func (c *gojoClient) CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error) {
	out := new(CreateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateGenre(ctx context.Context, in *CreateGenreRequest, opts ...grpc.CallOption) (*CreateGenreResponse, error) {
	out := new(CreateGenreResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateGenre_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GojoServer is the server API for Gojo service.
// All implementations must embed UnimplementedGojoServer
// for forward compatibility
type GojoServer interface {
	CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error)
	CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error)
	mustEmbedUnimplementedGojoServer()
}

// UnimplementedGojoServer must be embedded to have forward compatible implementations.
type UnimplementedGojoServer struct {
}

func (UnimplementedGojoServer) CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateGenre(context.Context, *CreateGenreRequest) (*CreateGenreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenre not implemented")
}
func (UnimplementedGojoServer) mustEmbedUnimplementedGojoServer() {}

// UnsafeGojoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GojoServer will
// result in compilation errors.
type UnsafeGojoServer interface {
	mustEmbedUnimplementedGojoServer()
}

func RegisterGojoServer(s grpc.ServiceRegistrar, srv GojoServer) {
	s.RegisterService(&Gojo_ServiceDesc, srv)
}

func _Gojo_CreateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovie(ctx, req.(*CreateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateGenre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateGenre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateGenre_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateGenre(ctx, req.(*CreateGenreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gojo_ServiceDesc is the grpc.ServiceDesc for Gojo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gojo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gojo",
	HandlerType: (*GojoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnimeMovie",
			Handler:    _Gojo_CreateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateGenre",
			Handler:    _Gojo_CreateGenre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gojo.proto",
}
