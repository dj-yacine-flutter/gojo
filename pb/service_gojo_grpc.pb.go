// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: service_gojo.proto

package pb

import (
	context "context"
	ampb "github.com/dj-yacine-flutter/gojo/pb/ampb"
	aspb "github.com/dj-yacine-flutter/gojo/pb/aspb"
	nfpb "github.com/dj-yacine-flutter/gojo/pb/nfpb"
	uspb "github.com/dj-yacine-flutter/gojo/pb/uspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gojo_CreateUser_FullMethodName                = "/pb.Gojo/CreateUser"
	Gojo_LoginUser_FullMethodName                 = "/pb.Gojo/LoginUser"
	Gojo_UpdateUser_FullMethodName                = "/pb.Gojo/UpdateUser"
	Gojo_VerifyEmail_FullMethodName               = "/pb.Gojo/VerifyEmail"
	Gojo_RenewTokens_FullMethodName               = "/pb.Gojo/RenewTokens"
	Gojo_CreateGenres_FullMethodName              = "/pb.Gojo/CreateGenres"
	Gojo_CreateStudios_FullMethodName             = "/pb.Gojo/CreateStudios"
	Gojo_CreateLanguages_FullMethodName           = "/pb.Gojo/CreateLanguages"
	Gojo_GetAllGenres_FullMethodName              = "/pb.Gojo/GetAllGenres"
	Gojo_GetAllStudios_FullMethodName             = "/pb.Gojo/GetAllStudios"
	Gojo_GetAllLanguages_FullMethodName           = "/pb.Gojo/GetAllLanguages"
	Gojo_CreateAnimeMovie_FullMethodName          = "/pb.Gojo/CreateAnimeMovie"
	Gojo_CreateAnimeMovieMetas_FullMethodName     = "/pb.Gojo/CreateAnimeMovieMetas"
	Gojo_CreateAnimeMovieInfo_FullMethodName      = "/pb.Gojo/CreateAnimeMovieInfo"
	Gojo_CreateAnimeMovieResource_FullMethodName  = "/pb.Gojo/CreateAnimeMovieResource"
	Gojo_CreateAnimeMovieLink_FullMethodName      = "/pb.Gojo/CreateAnimeMovieLink"
	Gojo_CreateAnimeMovieImage_FullMethodName     = "/pb.Gojo/CreateAnimeMovieImage"
	Gojo_CreateAnimeMovieTrailer_FullMethodName   = "/pb.Gojo/CreateAnimeMovieTrailer"
	Gojo_CreateAnimeMovieTitle_FullMethodName     = "/pb.Gojo/CreateAnimeMovieTitle"
	Gojo_UpdateAnimeMovie_FullMethodName          = "/pb.Gojo/UpdateAnimeMovie"
	Gojo_CreateAnimeMovieServer_FullMethodName    = "/pb.Gojo/CreateAnimeMovieServer"
	Gojo_CreateAnimeMovieData_FullMethodName      = "/pb.Gojo/CreateAnimeMovieData"
	Gojo_GetAllAnimeMovies_FullMethodName         = "/pb.Gojo/GetAllAnimeMovies"
	Gojo_GetAllAnimeMovieMetas_FullMethodName     = "/pb.Gojo/GetAllAnimeMovieMetas"
	Gojo_GetFullAnimeMovie_FullMethodName         = "/pb.Gojo/GetFullAnimeMovie"
	Gojo_QueryAnimeMovie_FullMethodName           = "/pb.Gojo/QueryAnimeMovie"
	Gojo_CreateAnimeSerie_FullMethodName          = "/pb.Gojo/CreateAnimeSerie"
	Gojo_CreateAnimeSerieMetas_FullMethodName     = "/pb.Gojo/CreateAnimeSerieMetas"
	Gojo_CreateAnimeSerieLink_FullMethodName      = "/pb.Gojo/CreateAnimeSerieLink"
	Gojo_CreateAnimeSerieTrailer_FullMethodName   = "/pb.Gojo/CreateAnimeSerieTrailer"
	Gojo_CreateAnimeSerieImage_FullMethodName     = "/pb.Gojo/CreateAnimeSerieImage"
	Gojo_CreateAnimeSeasonImage_FullMethodName    = "/pb.Gojo/CreateAnimeSeasonImage"
	Gojo_CreateAnimeSeasonInfo_FullMethodName     = "/pb.Gojo/CreateAnimeSeasonInfo"
	Gojo_CreateAnimeSerieServer_FullMethodName    = "/pb.Gojo/CreateAnimeSerieServer"
	Gojo_CreateAnimeSeason_FullMethodName         = "/pb.Gojo/CreateAnimeSeason"
	Gojo_CreateAnimeSeasonMetas_FullMethodName    = "/pb.Gojo/CreateAnimeSeasonMetas"
	Gojo_CreateAnimeSeasonResource_FullMethodName = "/pb.Gojo/CreateAnimeSeasonResource"
	Gojo_CreateAnimeSeasonTrailer_FullMethodName  = "/pb.Gojo/CreateAnimeSeasonTrailer"
	Gojo_CreateAnimeEpisode_FullMethodName        = "/pb.Gojo/CreateAnimeEpisode"
	Gojo_CreateAnimeEpisodeMetas_FullMethodName   = "/pb.Gojo/CreateAnimeEpisodeMetas"
	Gojo_CreateAnimeSerieData_FullMethodName      = "/pb.Gojo/CreateAnimeSerieData"
	Gojo_CreateAnimeSeasonTitle_FullMethodName    = "/pb.Gojo/CreateAnimeSeasonTitle"
	Gojo_GetFullAnimeSerie_FullMethodName         = "/pb.Gojo/GetFullAnimeSerie"
	Gojo_GetAllAnimeSeries_FullMethodName         = "/pb.Gojo/GetAllAnimeSeries"
	Gojo_GetFullAnimeSeason_FullMethodName        = "/pb.Gojo/GetFullAnimeSeason"
	Gojo_GetAllAnimeSerieMetas_FullMethodName     = "/pb.Gojo/GetAllAnimeSerieMetas"
	Gojo_UpdateAnimeSerie_FullMethodName          = "/pb.Gojo/UpdateAnimeSerie"
	Gojo_QueryAnimeSeason_FullMethodName          = "/pb.Gojo/QueryAnimeSeason"
)

// GojoClient is the client API for Gojo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GojoClient interface {
	CreateUser(ctx context.Context, in *uspb.CreateUserRequest, opts ...grpc.CallOption) (*uspb.CreateUserResponse, error)
	LoginUser(ctx context.Context, in *uspb.LoginUserRequest, opts ...grpc.CallOption) (*uspb.LoginUserResponse, error)
	UpdateUser(ctx context.Context, in *uspb.UpdateUserRequest, opts ...grpc.CallOption) (*uspb.UpdateUserResponse, error)
	VerifyEmail(ctx context.Context, in *uspb.VerifyEmailRequest, opts ...grpc.CallOption) (*uspb.VerifyEmailResponse, error)
	RenewTokens(ctx context.Context, in *uspb.RenewTokensRequest, opts ...grpc.CallOption) (*uspb.RenewTokensResponse, error)
	CreateGenres(ctx context.Context, in *nfpb.CreateGenresRequest, opts ...grpc.CallOption) (*nfpb.CreateGenresResponse, error)
	CreateStudios(ctx context.Context, in *nfpb.CreateStudiosRequest, opts ...grpc.CallOption) (*nfpb.CreateStudiosResponse, error)
	CreateLanguages(ctx context.Context, in *nfpb.CreateLanguagesRequest, opts ...grpc.CallOption) (*nfpb.CreateLanguagesResponse, error)
	GetAllGenres(ctx context.Context, in *nfpb.GetAllGenresRequest, opts ...grpc.CallOption) (*nfpb.GetAllGenresResponse, error)
	GetAllStudios(ctx context.Context, in *nfpb.GetAllStudiosRequest, opts ...grpc.CallOption) (*nfpb.GetAllStudiosResponse, error)
	GetAllLanguages(ctx context.Context, in *nfpb.GetAllLanguagesRequest, opts ...grpc.CallOption) (*nfpb.GetAllLanguagesResponse, error)
	CreateAnimeMovie(ctx context.Context, in *ampb.CreateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(ctx context.Context, in *ampb.CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieInfo(ctx context.Context, in *ampb.CreateAnimeMovieInfoRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieInfoResponse, error)
	CreateAnimeMovieResource(ctx context.Context, in *ampb.CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResourceResponse, error)
	CreateAnimeMovieLink(ctx context.Context, in *ampb.CreateAnimeMovieLinkRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieLinkResponse, error)
	CreateAnimeMovieImage(ctx context.Context, in *ampb.CreateAnimeMovieImageRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieImageResponse, error)
	CreateAnimeMovieTrailer(ctx context.Context, in *ampb.CreateAnimeMovieTrailerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieTrailerResponse, error)
	CreateAnimeMovieTitle(ctx context.Context, in *ampb.CreateAnimeMovieTitleRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieTitleResponse, error)
	UpdateAnimeMovie(ctx context.Context, in *ampb.UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.UpdateAnimeMovieResponse, error)
	CreateAnimeMovieServer(ctx context.Context, in *ampb.CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieServerResponse, error)
	CreateAnimeMovieData(ctx context.Context, in *ampb.CreateAnimeMovieDataRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieDataResponse, error)
	GetAllAnimeMovies(ctx context.Context, in *ampb.GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(ctx context.Context, in *ampb.GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMovieMetasResponse, error)
	GetFullAnimeMovie(ctx context.Context, in *ampb.GetFullAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.GetFullAnimeMovieResponse, error)
	QueryAnimeMovie(ctx context.Context, in *ampb.QueryAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.QueryAnimeMovieResponse, error)
	CreateAnimeSerie(ctx context.Context, in *aspb.CreateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(ctx context.Context, in *aspb.CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieLink(ctx context.Context, in *aspb.CreateAnimeSerieLinkRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieLinkResponse, error)
	CreateAnimeSerieTrailer(ctx context.Context, in *aspb.CreateAnimeSerieTrailerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieTrailerResponse, error)
	CreateAnimeSerieImage(ctx context.Context, in *aspb.CreateAnimeSerieImageRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieImageResponse, error)
	CreateAnimeSeasonImage(ctx context.Context, in *aspb.CreateAnimeSeasonImageRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonImageResponse, error)
	CreateAnimeSeasonInfo(ctx context.Context, in *aspb.CreateAnimeSeasonInfoRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonInfoResponse, error)
	CreateAnimeSerieServer(ctx context.Context, in *aspb.CreateAnimeSerieServerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieServerResponse, error)
	CreateAnimeSeason(ctx context.Context, in *aspb.CreateAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonResponse, error)
	CreateAnimeSeasonMetas(ctx context.Context, in *aspb.CreateAnimeSeasonMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonMetasResponse, error)
	CreateAnimeSeasonResource(ctx context.Context, in *aspb.CreateAnimeSeasonResourceRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonResourceResponse, error)
	CreateAnimeSeasonTrailer(ctx context.Context, in *aspb.CreateAnimeSeasonTrailerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonTrailerResponse, error)
	CreateAnimeEpisode(ctx context.Context, in *aspb.CreateAnimeEpisodeRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeEpisodeResponse, error)
	CreateAnimeEpisodeMetas(ctx context.Context, in *aspb.CreateAnimeEpisodeMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeEpisodeMetasResponse, error)
	CreateAnimeSerieData(ctx context.Context, in *aspb.CreateAnimeSerieDataRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieDataResponse, error)
	CreateAnimeSeasonTitle(ctx context.Context, in *aspb.CreateAnimeSeasonTitleRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonTitleResponse, error)
	GetFullAnimeSerie(ctx context.Context, in *aspb.GetFullAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.GetFullAnimeSerieResponse, error)
	GetAllAnimeSeries(ctx context.Context, in *aspb.GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSeriesResponse, error)
	GetFullAnimeSeason(ctx context.Context, in *aspb.GetFullAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.GetFullAnimeSeasonResponse, error)
	GetAllAnimeSerieMetas(ctx context.Context, in *aspb.GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSerieMetasResponse, error)
	UpdateAnimeSerie(ctx context.Context, in *aspb.UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.UpdateAnimeSerieResponse, error)
	QueryAnimeSeason(ctx context.Context, in *aspb.QueryAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.QueryAnimeSeasonResponse, error)
}

type gojoClient struct {
	cc grpc.ClientConnInterface
}

func NewGojoClient(cc grpc.ClientConnInterface) GojoClient {
	return &gojoClient{cc}
}

func (c *gojoClient) CreateUser(ctx context.Context, in *uspb.CreateUserRequest, opts ...grpc.CallOption) (*uspb.CreateUserResponse, error) {
	out := new(uspb.CreateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) LoginUser(ctx context.Context, in *uspb.LoginUserRequest, opts ...grpc.CallOption) (*uspb.LoginUserResponse, error) {
	out := new(uspb.LoginUserResponse)
	err := c.cc.Invoke(ctx, Gojo_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateUser(ctx context.Context, in *uspb.UpdateUserRequest, opts ...grpc.CallOption) (*uspb.UpdateUserResponse, error) {
	out := new(uspb.UpdateUserResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) VerifyEmail(ctx context.Context, in *uspb.VerifyEmailRequest, opts ...grpc.CallOption) (*uspb.VerifyEmailResponse, error) {
	out := new(uspb.VerifyEmailResponse)
	err := c.cc.Invoke(ctx, Gojo_VerifyEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) RenewTokens(ctx context.Context, in *uspb.RenewTokensRequest, opts ...grpc.CallOption) (*uspb.RenewTokensResponse, error) {
	out := new(uspb.RenewTokensResponse)
	err := c.cc.Invoke(ctx, Gojo_RenewTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateGenres(ctx context.Context, in *nfpb.CreateGenresRequest, opts ...grpc.CallOption) (*nfpb.CreateGenresResponse, error) {
	out := new(nfpb.CreateGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateStudios(ctx context.Context, in *nfpb.CreateStudiosRequest, opts ...grpc.CallOption) (*nfpb.CreateStudiosResponse, error) {
	out := new(nfpb.CreateStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateLanguages(ctx context.Context, in *nfpb.CreateLanguagesRequest, opts ...grpc.CallOption) (*nfpb.CreateLanguagesResponse, error) {
	out := new(nfpb.CreateLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllGenres(ctx context.Context, in *nfpb.GetAllGenresRequest, opts ...grpc.CallOption) (*nfpb.GetAllGenresResponse, error) {
	out := new(nfpb.GetAllGenresResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllStudios(ctx context.Context, in *nfpb.GetAllStudiosRequest, opts ...grpc.CallOption) (*nfpb.GetAllStudiosResponse, error) {
	out := new(nfpb.GetAllStudiosResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllStudios_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllLanguages(ctx context.Context, in *nfpb.GetAllLanguagesRequest, opts ...grpc.CallOption) (*nfpb.GetAllLanguagesResponse, error) {
	out := new(nfpb.GetAllLanguagesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovie(ctx context.Context, in *ampb.CreateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResponse, error) {
	out := new(ampb.CreateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieMetas(ctx context.Context, in *ampb.CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieMetasResponse, error) {
	out := new(ampb.CreateAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieInfo(ctx context.Context, in *ampb.CreateAnimeMovieInfoRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieInfoResponse, error) {
	out := new(ampb.CreateAnimeMovieInfoResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieResource(ctx context.Context, in *ampb.CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieResourceResponse, error) {
	out := new(ampb.CreateAnimeMovieResourceResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieLink(ctx context.Context, in *ampb.CreateAnimeMovieLinkRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieLinkResponse, error) {
	out := new(ampb.CreateAnimeMovieLinkResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieImage(ctx context.Context, in *ampb.CreateAnimeMovieImageRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieImageResponse, error) {
	out := new(ampb.CreateAnimeMovieImageResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieTrailer(ctx context.Context, in *ampb.CreateAnimeMovieTrailerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieTrailerResponse, error) {
	out := new(ampb.CreateAnimeMovieTrailerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieTitle(ctx context.Context, in *ampb.CreateAnimeMovieTitleRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieTitleResponse, error) {
	out := new(ampb.CreateAnimeMovieTitleResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateAnimeMovie(ctx context.Context, in *ampb.UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.UpdateAnimeMovieResponse, error) {
	out := new(ampb.UpdateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieServer(ctx context.Context, in *ampb.CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieServerResponse, error) {
	out := new(ampb.CreateAnimeMovieServerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeMovieData(ctx context.Context, in *ampb.CreateAnimeMovieDataRequest, opts ...grpc.CallOption) (*ampb.CreateAnimeMovieDataResponse, error) {
	out := new(ampb.CreateAnimeMovieDataResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeMovieData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeMovies(ctx context.Context, in *ampb.GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMoviesResponse, error) {
	out := new(ampb.GetAllAnimeMoviesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeMovieMetas(ctx context.Context, in *ampb.GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*ampb.GetAllAnimeMovieMetasResponse, error) {
	out := new(ampb.GetAllAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetFullAnimeMovie(ctx context.Context, in *ampb.GetFullAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.GetFullAnimeMovieResponse, error) {
	out := new(ampb.GetFullAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_GetFullAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) QueryAnimeMovie(ctx context.Context, in *ampb.QueryAnimeMovieRequest, opts ...grpc.CallOption) (*ampb.QueryAnimeMovieResponse, error) {
	out := new(ampb.QueryAnimeMovieResponse)
	err := c.cc.Invoke(ctx, Gojo_QueryAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerie(ctx context.Context, in *aspb.CreateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieResponse, error) {
	out := new(aspb.CreateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieMetas(ctx context.Context, in *aspb.CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieMetasResponse, error) {
	out := new(aspb.CreateAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieLink(ctx context.Context, in *aspb.CreateAnimeSerieLinkRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieLinkResponse, error) {
	out := new(aspb.CreateAnimeSerieLinkResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieTrailer(ctx context.Context, in *aspb.CreateAnimeSerieTrailerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieTrailerResponse, error) {
	out := new(aspb.CreateAnimeSerieTrailerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieImage(ctx context.Context, in *aspb.CreateAnimeSerieImageRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieImageResponse, error) {
	out := new(aspb.CreateAnimeSerieImageResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonImage(ctx context.Context, in *aspb.CreateAnimeSeasonImageRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonImageResponse, error) {
	out := new(aspb.CreateAnimeSeasonImageResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonInfo(ctx context.Context, in *aspb.CreateAnimeSeasonInfoRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonInfoResponse, error) {
	out := new(aspb.CreateAnimeSeasonInfoResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieServer(ctx context.Context, in *aspb.CreateAnimeSerieServerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieServerResponse, error) {
	out := new(aspb.CreateAnimeSerieServerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeason(ctx context.Context, in *aspb.CreateAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonResponse, error) {
	out := new(aspb.CreateAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonMetas(ctx context.Context, in *aspb.CreateAnimeSeasonMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonMetasResponse, error) {
	out := new(aspb.CreateAnimeSeasonMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonResource(ctx context.Context, in *aspb.CreateAnimeSeasonResourceRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonResourceResponse, error) {
	out := new(aspb.CreateAnimeSeasonResourceResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonTrailer(ctx context.Context, in *aspb.CreateAnimeSeasonTrailerRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonTrailerResponse, error) {
	out := new(aspb.CreateAnimeSeasonTrailerResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeEpisode(ctx context.Context, in *aspb.CreateAnimeEpisodeRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeEpisodeResponse, error) {
	out := new(aspb.CreateAnimeEpisodeResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeEpisode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeEpisodeMetas(ctx context.Context, in *aspb.CreateAnimeEpisodeMetasRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeEpisodeMetasResponse, error) {
	out := new(aspb.CreateAnimeEpisodeMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeEpisodeMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSerieData(ctx context.Context, in *aspb.CreateAnimeSerieDataRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSerieDataResponse, error) {
	out := new(aspb.CreateAnimeSerieDataResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSerieData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) CreateAnimeSeasonTitle(ctx context.Context, in *aspb.CreateAnimeSeasonTitleRequest, opts ...grpc.CallOption) (*aspb.CreateAnimeSeasonTitleResponse, error) {
	out := new(aspb.CreateAnimeSeasonTitleResponse)
	err := c.cc.Invoke(ctx, Gojo_CreateAnimeSeasonTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetFullAnimeSerie(ctx context.Context, in *aspb.GetFullAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.GetFullAnimeSerieResponse, error) {
	out := new(aspb.GetFullAnimeSerieResponse)
	err := c.cc.Invoke(ctx, Gojo_GetFullAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeSeries(ctx context.Context, in *aspb.GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSeriesResponse, error) {
	out := new(aspb.GetAllAnimeSeriesResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetFullAnimeSeason(ctx context.Context, in *aspb.GetFullAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.GetFullAnimeSeasonResponse, error) {
	out := new(aspb.GetFullAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, Gojo_GetFullAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) GetAllAnimeSerieMetas(ctx context.Context, in *aspb.GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*aspb.GetAllAnimeSerieMetasResponse, error) {
	out := new(aspb.GetAllAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, Gojo_GetAllAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) UpdateAnimeSerie(ctx context.Context, in *aspb.UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*aspb.UpdateAnimeSerieResponse, error) {
	out := new(aspb.UpdateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, Gojo_UpdateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gojoClient) QueryAnimeSeason(ctx context.Context, in *aspb.QueryAnimeSeasonRequest, opts ...grpc.CallOption) (*aspb.QueryAnimeSeasonResponse, error) {
	out := new(aspb.QueryAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, Gojo_QueryAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GojoServer is the server API for Gojo service.
// All implementations must embed UnimplementedGojoServer
// for forward compatibility
type GojoServer interface {
	CreateUser(context.Context, *uspb.CreateUserRequest) (*uspb.CreateUserResponse, error)
	LoginUser(context.Context, *uspb.LoginUserRequest) (*uspb.LoginUserResponse, error)
	UpdateUser(context.Context, *uspb.UpdateUserRequest) (*uspb.UpdateUserResponse, error)
	VerifyEmail(context.Context, *uspb.VerifyEmailRequest) (*uspb.VerifyEmailResponse, error)
	RenewTokens(context.Context, *uspb.RenewTokensRequest) (*uspb.RenewTokensResponse, error)
	CreateGenres(context.Context, *nfpb.CreateGenresRequest) (*nfpb.CreateGenresResponse, error)
	CreateStudios(context.Context, *nfpb.CreateStudiosRequest) (*nfpb.CreateStudiosResponse, error)
	CreateLanguages(context.Context, *nfpb.CreateLanguagesRequest) (*nfpb.CreateLanguagesResponse, error)
	GetAllGenres(context.Context, *nfpb.GetAllGenresRequest) (*nfpb.GetAllGenresResponse, error)
	GetAllStudios(context.Context, *nfpb.GetAllStudiosRequest) (*nfpb.GetAllStudiosResponse, error)
	GetAllLanguages(context.Context, *nfpb.GetAllLanguagesRequest) (*nfpb.GetAllLanguagesResponse, error)
	CreateAnimeMovie(context.Context, *ampb.CreateAnimeMovieRequest) (*ampb.CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(context.Context, *ampb.CreateAnimeMovieMetasRequest) (*ampb.CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieInfo(context.Context, *ampb.CreateAnimeMovieInfoRequest) (*ampb.CreateAnimeMovieInfoResponse, error)
	CreateAnimeMovieResource(context.Context, *ampb.CreateAnimeMovieResourceRequest) (*ampb.CreateAnimeMovieResourceResponse, error)
	CreateAnimeMovieLink(context.Context, *ampb.CreateAnimeMovieLinkRequest) (*ampb.CreateAnimeMovieLinkResponse, error)
	CreateAnimeMovieImage(context.Context, *ampb.CreateAnimeMovieImageRequest) (*ampb.CreateAnimeMovieImageResponse, error)
	CreateAnimeMovieTrailer(context.Context, *ampb.CreateAnimeMovieTrailerRequest) (*ampb.CreateAnimeMovieTrailerResponse, error)
	CreateAnimeMovieTitle(context.Context, *ampb.CreateAnimeMovieTitleRequest) (*ampb.CreateAnimeMovieTitleResponse, error)
	UpdateAnimeMovie(context.Context, *ampb.UpdateAnimeMovieRequest) (*ampb.UpdateAnimeMovieResponse, error)
	CreateAnimeMovieServer(context.Context, *ampb.CreateAnimeMovieServerRequest) (*ampb.CreateAnimeMovieServerResponse, error)
	CreateAnimeMovieData(context.Context, *ampb.CreateAnimeMovieDataRequest) (*ampb.CreateAnimeMovieDataResponse, error)
	GetAllAnimeMovies(context.Context, *ampb.GetAllAnimeMoviesRequest) (*ampb.GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(context.Context, *ampb.GetAllAnimeMovieMetasRequest) (*ampb.GetAllAnimeMovieMetasResponse, error)
	GetFullAnimeMovie(context.Context, *ampb.GetFullAnimeMovieRequest) (*ampb.GetFullAnimeMovieResponse, error)
	QueryAnimeMovie(context.Context, *ampb.QueryAnimeMovieRequest) (*ampb.QueryAnimeMovieResponse, error)
	CreateAnimeSerie(context.Context, *aspb.CreateAnimeSerieRequest) (*aspb.CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(context.Context, *aspb.CreateAnimeSerieMetasRequest) (*aspb.CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieLink(context.Context, *aspb.CreateAnimeSerieLinkRequest) (*aspb.CreateAnimeSerieLinkResponse, error)
	CreateAnimeSerieTrailer(context.Context, *aspb.CreateAnimeSerieTrailerRequest) (*aspb.CreateAnimeSerieTrailerResponse, error)
	CreateAnimeSerieImage(context.Context, *aspb.CreateAnimeSerieImageRequest) (*aspb.CreateAnimeSerieImageResponse, error)
	CreateAnimeSeasonImage(context.Context, *aspb.CreateAnimeSeasonImageRequest) (*aspb.CreateAnimeSeasonImageResponse, error)
	CreateAnimeSeasonInfo(context.Context, *aspb.CreateAnimeSeasonInfoRequest) (*aspb.CreateAnimeSeasonInfoResponse, error)
	CreateAnimeSerieServer(context.Context, *aspb.CreateAnimeSerieServerRequest) (*aspb.CreateAnimeSerieServerResponse, error)
	CreateAnimeSeason(context.Context, *aspb.CreateAnimeSeasonRequest) (*aspb.CreateAnimeSeasonResponse, error)
	CreateAnimeSeasonMetas(context.Context, *aspb.CreateAnimeSeasonMetasRequest) (*aspb.CreateAnimeSeasonMetasResponse, error)
	CreateAnimeSeasonResource(context.Context, *aspb.CreateAnimeSeasonResourceRequest) (*aspb.CreateAnimeSeasonResourceResponse, error)
	CreateAnimeSeasonTrailer(context.Context, *aspb.CreateAnimeSeasonTrailerRequest) (*aspb.CreateAnimeSeasonTrailerResponse, error)
	CreateAnimeEpisode(context.Context, *aspb.CreateAnimeEpisodeRequest) (*aspb.CreateAnimeEpisodeResponse, error)
	CreateAnimeEpisodeMetas(context.Context, *aspb.CreateAnimeEpisodeMetasRequest) (*aspb.CreateAnimeEpisodeMetasResponse, error)
	CreateAnimeSerieData(context.Context, *aspb.CreateAnimeSerieDataRequest) (*aspb.CreateAnimeSerieDataResponse, error)
	CreateAnimeSeasonTitle(context.Context, *aspb.CreateAnimeSeasonTitleRequest) (*aspb.CreateAnimeSeasonTitleResponse, error)
	GetFullAnimeSerie(context.Context, *aspb.GetFullAnimeSerieRequest) (*aspb.GetFullAnimeSerieResponse, error)
	GetAllAnimeSeries(context.Context, *aspb.GetAllAnimeSeriesRequest) (*aspb.GetAllAnimeSeriesResponse, error)
	GetFullAnimeSeason(context.Context, *aspb.GetFullAnimeSeasonRequest) (*aspb.GetFullAnimeSeasonResponse, error)
	GetAllAnimeSerieMetas(context.Context, *aspb.GetAllAnimeSerieMetasRequest) (*aspb.GetAllAnimeSerieMetasResponse, error)
	UpdateAnimeSerie(context.Context, *aspb.UpdateAnimeSerieRequest) (*aspb.UpdateAnimeSerieResponse, error)
	QueryAnimeSeason(context.Context, *aspb.QueryAnimeSeasonRequest) (*aspb.QueryAnimeSeasonResponse, error)
	mustEmbedUnimplementedGojoServer()
}

// UnimplementedGojoServer must be embedded to have forward compatible implementations.
type UnimplementedGojoServer struct {
}

func (UnimplementedGojoServer) CreateUser(context.Context, *uspb.CreateUserRequest) (*uspb.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedGojoServer) LoginUser(context.Context, *uspb.LoginUserRequest) (*uspb.LoginUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedGojoServer) UpdateUser(context.Context, *uspb.UpdateUserRequest) (*uspb.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGojoServer) VerifyEmail(context.Context, *uspb.VerifyEmailRequest) (*uspb.VerifyEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedGojoServer) RenewTokens(context.Context, *uspb.RenewTokensRequest) (*uspb.RenewTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewTokens not implemented")
}
func (UnimplementedGojoServer) CreateGenres(context.Context, *nfpb.CreateGenresRequest) (*nfpb.CreateGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenres not implemented")
}
func (UnimplementedGojoServer) CreateStudios(context.Context, *nfpb.CreateStudiosRequest) (*nfpb.CreateStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudios not implemented")
}
func (UnimplementedGojoServer) CreateLanguages(context.Context, *nfpb.CreateLanguagesRequest) (*nfpb.CreateLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLanguages not implemented")
}
func (UnimplementedGojoServer) GetAllGenres(context.Context, *nfpb.GetAllGenresRequest) (*nfpb.GetAllGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGenres not implemented")
}
func (UnimplementedGojoServer) GetAllStudios(context.Context, *nfpb.GetAllStudiosRequest) (*nfpb.GetAllStudiosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStudios not implemented")
}
func (UnimplementedGojoServer) GetAllLanguages(context.Context, *nfpb.GetAllLanguagesRequest) (*nfpb.GetAllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovie(context.Context, *ampb.CreateAnimeMovieRequest) (*ampb.CreateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieMetas(context.Context, *ampb.CreateAnimeMovieMetasRequest) (*ampb.CreateAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieInfo(context.Context, *ampb.CreateAnimeMovieInfoRequest) (*ampb.CreateAnimeMovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieInfo not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieResource(context.Context, *ampb.CreateAnimeMovieResourceRequest) (*ampb.CreateAnimeMovieResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieResource not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieLink(context.Context, *ampb.CreateAnimeMovieLinkRequest) (*ampb.CreateAnimeMovieLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieLink not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieImage(context.Context, *ampb.CreateAnimeMovieImageRequest) (*ampb.CreateAnimeMovieImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieImage not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieTrailer(context.Context, *ampb.CreateAnimeMovieTrailerRequest) (*ampb.CreateAnimeMovieTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieTrailer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieTitle(context.Context, *ampb.CreateAnimeMovieTitleRequest) (*ampb.CreateAnimeMovieTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieTitle not implemented")
}
func (UnimplementedGojoServer) UpdateAnimeMovie(context.Context, *ampb.UpdateAnimeMovieRequest) (*ampb.UpdateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieServer(context.Context, *ampb.CreateAnimeMovieServerRequest) (*ampb.CreateAnimeMovieServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieServer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeMovieData(context.Context, *ampb.CreateAnimeMovieDataRequest) (*ampb.CreateAnimeMovieDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieData not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeMovies(context.Context, *ampb.GetAllAnimeMoviesRequest) (*ampb.GetAllAnimeMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovies not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeMovieMetas(context.Context, *ampb.GetAllAnimeMovieMetasRequest) (*ampb.GetAllAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovieMetas not implemented")
}
func (UnimplementedGojoServer) GetFullAnimeMovie(context.Context, *ampb.GetFullAnimeMovieRequest) (*ampb.GetFullAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeMovie not implemented")
}
func (UnimplementedGojoServer) QueryAnimeMovie(context.Context, *ampb.QueryAnimeMovieRequest) (*ampb.QueryAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnimeMovie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerie(context.Context, *aspb.CreateAnimeSerieRequest) (*aspb.CreateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerie not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieMetas(context.Context, *aspb.CreateAnimeSerieMetasRequest) (*aspb.CreateAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieLink(context.Context, *aspb.CreateAnimeSerieLinkRequest) (*aspb.CreateAnimeSerieLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieLink not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieTrailer(context.Context, *aspb.CreateAnimeSerieTrailerRequest) (*aspb.CreateAnimeSerieTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieTrailer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieImage(context.Context, *aspb.CreateAnimeSerieImageRequest) (*aspb.CreateAnimeSerieImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieImage not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonImage(context.Context, *aspb.CreateAnimeSeasonImageRequest) (*aspb.CreateAnimeSeasonImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonImage not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonInfo(context.Context, *aspb.CreateAnimeSeasonInfoRequest) (*aspb.CreateAnimeSeasonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonInfo not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieServer(context.Context, *aspb.CreateAnimeSerieServerRequest) (*aspb.CreateAnimeSerieServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieServer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeason(context.Context, *aspb.CreateAnimeSeasonRequest) (*aspb.CreateAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeason not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonMetas(context.Context, *aspb.CreateAnimeSeasonMetasRequest) (*aspb.CreateAnimeSeasonMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonResource(context.Context, *aspb.CreateAnimeSeasonResourceRequest) (*aspb.CreateAnimeSeasonResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonResource not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonTrailer(context.Context, *aspb.CreateAnimeSeasonTrailerRequest) (*aspb.CreateAnimeSeasonTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonTrailer not implemented")
}
func (UnimplementedGojoServer) CreateAnimeEpisode(context.Context, *aspb.CreateAnimeEpisodeRequest) (*aspb.CreateAnimeEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisode not implemented")
}
func (UnimplementedGojoServer) CreateAnimeEpisodeMetas(context.Context, *aspb.CreateAnimeEpisodeMetasRequest) (*aspb.CreateAnimeEpisodeMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisodeMetas not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSerieData(context.Context, *aspb.CreateAnimeSerieDataRequest) (*aspb.CreateAnimeSerieDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieData not implemented")
}
func (UnimplementedGojoServer) CreateAnimeSeasonTitle(context.Context, *aspb.CreateAnimeSeasonTitleRequest) (*aspb.CreateAnimeSeasonTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonTitle not implemented")
}
func (UnimplementedGojoServer) GetFullAnimeSerie(context.Context, *aspb.GetFullAnimeSerieRequest) (*aspb.GetFullAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeSerie not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeSeries(context.Context, *aspb.GetAllAnimeSeriesRequest) (*aspb.GetAllAnimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSeries not implemented")
}
func (UnimplementedGojoServer) GetFullAnimeSeason(context.Context, *aspb.GetFullAnimeSeasonRequest) (*aspb.GetFullAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeSeason not implemented")
}
func (UnimplementedGojoServer) GetAllAnimeSerieMetas(context.Context, *aspb.GetAllAnimeSerieMetasRequest) (*aspb.GetAllAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSerieMetas not implemented")
}
func (UnimplementedGojoServer) UpdateAnimeSerie(context.Context, *aspb.UpdateAnimeSerieRequest) (*aspb.UpdateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeSerie not implemented")
}
func (UnimplementedGojoServer) QueryAnimeSeason(context.Context, *aspb.QueryAnimeSeasonRequest) (*aspb.QueryAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnimeSeason not implemented")
}
func (UnimplementedGojoServer) mustEmbedUnimplementedGojoServer() {}

// UnsafeGojoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GojoServer will
// result in compilation errors.
type UnsafeGojoServer interface {
	mustEmbedUnimplementedGojoServer()
}

func RegisterGojoServer(s grpc.ServiceRegistrar, srv GojoServer) {
	s.RegisterService(&Gojo_ServiceDesc, srv)
}

func _Gojo_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateUser(ctx, req.(*uspb.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.LoginUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).LoginUser(ctx, req.(*uspb.LoginUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateUser(ctx, req.(*uspb.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.VerifyEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_VerifyEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).VerifyEmail(ctx, req.(*uspb.VerifyEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_RenewTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(uspb.RenewTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).RenewTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_RenewTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).RenewTokens(ctx, req.(*uspb.RenewTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateGenres(ctx, req.(*nfpb.CreateGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateStudios(ctx, req.(*nfpb.CreateStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.CreateLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateLanguages(ctx, req.(*nfpb.CreateLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllGenres(ctx, req.(*nfpb.GetAllGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllStudios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllStudiosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllStudios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllStudios_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllStudios(ctx, req.(*nfpb.GetAllStudiosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(nfpb.GetAllLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllLanguages(ctx, req.(*nfpb.GetAllLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovie(ctx, req.(*ampb.CreateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieMetas(ctx, req.(*ampb.CreateAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieInfo(ctx, req.(*ampb.CreateAnimeMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieResource(ctx, req.(*ampb.CreateAnimeMovieResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieLink(ctx, req.(*ampb.CreateAnimeMovieLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieImage(ctx, req.(*ampb.CreateAnimeMovieImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieTrailer(ctx, req.(*ampb.CreateAnimeMovieTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieTitle(ctx, req.(*ampb.CreateAnimeMovieTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.UpdateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateAnimeMovie(ctx, req.(*ampb.UpdateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieServer(ctx, req.(*ampb.CreateAnimeMovieServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeMovieData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.CreateAnimeMovieDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeMovieData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeMovieData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeMovieData(ctx, req.(*ampb.CreateAnimeMovieDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.GetAllAnimeMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeMovies(ctx, req.(*ampb.GetAllAnimeMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.GetAllAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeMovieMetas(ctx, req.(*ampb.GetAllAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetFullAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.GetFullAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetFullAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetFullAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetFullAnimeMovie(ctx, req.(*ampb.GetFullAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_QueryAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ampb.QueryAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).QueryAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_QueryAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).QueryAnimeMovie(ctx, req.(*ampb.QueryAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerie(ctx, req.(*aspb.CreateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieMetas(ctx, req.(*aspb.CreateAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieLink(ctx, req.(*aspb.CreateAnimeSerieLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieTrailer(ctx, req.(*aspb.CreateAnimeSerieTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieImage(ctx, req.(*aspb.CreateAnimeSerieImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonImage(ctx, req.(*aspb.CreateAnimeSeasonImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonInfo(ctx, req.(*aspb.CreateAnimeSeasonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieServer(ctx, req.(*aspb.CreateAnimeSerieServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeason(ctx, req.(*aspb.CreateAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonMetas(ctx, req.(*aspb.CreateAnimeSeasonMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonResource(ctx, req.(*aspb.CreateAnimeSeasonResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonTrailer(ctx, req.(*aspb.CreateAnimeSeasonTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeEpisode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeEpisode(ctx, req.(*aspb.CreateAnimeEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeEpisodeMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeEpisodeMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeEpisodeMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeEpisodeMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeEpisodeMetas(ctx, req.(*aspb.CreateAnimeEpisodeMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSerieData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSerieDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSerieData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSerieData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSerieData(ctx, req.(*aspb.CreateAnimeSerieDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_CreateAnimeSeasonTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.CreateAnimeSeasonTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).CreateAnimeSeasonTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_CreateAnimeSeasonTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).CreateAnimeSeasonTitle(ctx, req.(*aspb.CreateAnimeSeasonTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetFullAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetFullAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetFullAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetFullAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetFullAnimeSerie(ctx, req.(*aspb.GetFullAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetAllAnimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeSeries(ctx, req.(*aspb.GetAllAnimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetFullAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetFullAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetFullAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetFullAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetFullAnimeSeason(ctx, req.(*aspb.GetFullAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_GetAllAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.GetAllAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).GetAllAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_GetAllAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).GetAllAnimeSerieMetas(ctx, req.(*aspb.GetAllAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_UpdateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.UpdateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).UpdateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_UpdateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).UpdateAnimeSerie(ctx, req.(*aspb.UpdateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gojo_QueryAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(aspb.QueryAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GojoServer).QueryAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gojo_QueryAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GojoServer).QueryAnimeSeason(ctx, req.(*aspb.QueryAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gojo_ServiceDesc is the grpc.ServiceDesc for Gojo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gojo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Gojo",
	HandlerType: (*GojoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Gojo_CreateUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _Gojo_LoginUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Gojo_UpdateUser_Handler,
		},
		{
			MethodName: "VerifyEmail",
			Handler:    _Gojo_VerifyEmail_Handler,
		},
		{
			MethodName: "RenewTokens",
			Handler:    _Gojo_RenewTokens_Handler,
		},
		{
			MethodName: "CreateGenres",
			Handler:    _Gojo_CreateGenres_Handler,
		},
		{
			MethodName: "CreateStudios",
			Handler:    _Gojo_CreateStudios_Handler,
		},
		{
			MethodName: "CreateLanguages",
			Handler:    _Gojo_CreateLanguages_Handler,
		},
		{
			MethodName: "GetAllGenres",
			Handler:    _Gojo_GetAllGenres_Handler,
		},
		{
			MethodName: "GetAllStudios",
			Handler:    _Gojo_GetAllStudios_Handler,
		},
		{
			MethodName: "GetAllLanguages",
			Handler:    _Gojo_GetAllLanguages_Handler,
		},
		{
			MethodName: "CreateAnimeMovie",
			Handler:    _Gojo_CreateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeMovieMetas",
			Handler:    _Gojo_CreateAnimeMovieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeMovieInfo",
			Handler:    _Gojo_CreateAnimeMovieInfo_Handler,
		},
		{
			MethodName: "CreateAnimeMovieResource",
			Handler:    _Gojo_CreateAnimeMovieResource_Handler,
		},
		{
			MethodName: "CreateAnimeMovieLink",
			Handler:    _Gojo_CreateAnimeMovieLink_Handler,
		},
		{
			MethodName: "CreateAnimeMovieImage",
			Handler:    _Gojo_CreateAnimeMovieImage_Handler,
		},
		{
			MethodName: "CreateAnimeMovieTrailer",
			Handler:    _Gojo_CreateAnimeMovieTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeMovieTitle",
			Handler:    _Gojo_CreateAnimeMovieTitle_Handler,
		},
		{
			MethodName: "UpdateAnimeMovie",
			Handler:    _Gojo_UpdateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeMovieServer",
			Handler:    _Gojo_CreateAnimeMovieServer_Handler,
		},
		{
			MethodName: "CreateAnimeMovieData",
			Handler:    _Gojo_CreateAnimeMovieData_Handler,
		},
		{
			MethodName: "GetAllAnimeMovies",
			Handler:    _Gojo_GetAllAnimeMovies_Handler,
		},
		{
			MethodName: "GetAllAnimeMovieMetas",
			Handler:    _Gojo_GetAllAnimeMovieMetas_Handler,
		},
		{
			MethodName: "GetFullAnimeMovie",
			Handler:    _Gojo_GetFullAnimeMovie_Handler,
		},
		{
			MethodName: "QueryAnimeMovie",
			Handler:    _Gojo_QueryAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeSerie",
			Handler:    _Gojo_CreateAnimeSerie_Handler,
		},
		{
			MethodName: "CreateAnimeSerieMetas",
			Handler:    _Gojo_CreateAnimeSerieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSerieLink",
			Handler:    _Gojo_CreateAnimeSerieLink_Handler,
		},
		{
			MethodName: "CreateAnimeSerieTrailer",
			Handler:    _Gojo_CreateAnimeSerieTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeSerieImage",
			Handler:    _Gojo_CreateAnimeSerieImage_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonImage",
			Handler:    _Gojo_CreateAnimeSeasonImage_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonInfo",
			Handler:    _Gojo_CreateAnimeSeasonInfo_Handler,
		},
		{
			MethodName: "CreateAnimeSerieServer",
			Handler:    _Gojo_CreateAnimeSerieServer_Handler,
		},
		{
			MethodName: "CreateAnimeSeason",
			Handler:    _Gojo_CreateAnimeSeason_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonMetas",
			Handler:    _Gojo_CreateAnimeSeasonMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonResource",
			Handler:    _Gojo_CreateAnimeSeasonResource_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonTrailer",
			Handler:    _Gojo_CreateAnimeSeasonTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeEpisode",
			Handler:    _Gojo_CreateAnimeEpisode_Handler,
		},
		{
			MethodName: "CreateAnimeEpisodeMetas",
			Handler:    _Gojo_CreateAnimeEpisodeMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSerieData",
			Handler:    _Gojo_CreateAnimeSerieData_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonTitle",
			Handler:    _Gojo_CreateAnimeSeasonTitle_Handler,
		},
		{
			MethodName: "GetFullAnimeSerie",
			Handler:    _Gojo_GetFullAnimeSerie_Handler,
		},
		{
			MethodName: "GetAllAnimeSeries",
			Handler:    _Gojo_GetAllAnimeSeries_Handler,
		},
		{
			MethodName: "GetFullAnimeSeason",
			Handler:    _Gojo_GetFullAnimeSeason_Handler,
		},
		{
			MethodName: "GetAllAnimeSerieMetas",
			Handler:    _Gojo_GetAllAnimeSerieMetas_Handler,
		},
		{
			MethodName: "UpdateAnimeSerie",
			Handler:    _Gojo_UpdateAnimeSerie_Handler,
		},
		{
			MethodName: "QueryAnimeSeason",
			Handler:    _Gojo_QueryAnimeSeason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service_gojo.proto",
}
