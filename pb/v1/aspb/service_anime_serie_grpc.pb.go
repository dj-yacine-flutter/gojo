// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: v1/aspb/service_anime_serie.proto

package aspbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnimeSerieService_CreateAnimeSerie_FullMethodName          = "/v1.aspbv1.AnimeSerieService/CreateAnimeSerie"
	AnimeSerieService_CreateAnimeSerieMetas_FullMethodName     = "/v1.aspbv1.AnimeSerieService/CreateAnimeSerieMetas"
	AnimeSerieService_CreateAnimeSerieLink_FullMethodName      = "/v1.aspbv1.AnimeSerieService/CreateAnimeSerieLink"
	AnimeSerieService_CreateAnimeSerieTrailer_FullMethodName   = "/v1.aspbv1.AnimeSerieService/CreateAnimeSerieTrailer"
	AnimeSerieService_CreateAnimeSerieImage_FullMethodName     = "/v1.aspbv1.AnimeSerieService/CreateAnimeSerieImage"
	AnimeSerieService_CreateAnimeSeasonImage_FullMethodName    = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonImage"
	AnimeSerieService_CreateAnimeSeasonInfo_FullMethodName     = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonInfo"
	AnimeSerieService_CreateAnimeSeason_FullMethodName         = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeason"
	AnimeSerieService_CreateAnimeSeasonMetas_FullMethodName    = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonMetas"
	AnimeSerieService_CreateAnimeSeasonResource_FullMethodName = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonResource"
	AnimeSerieService_CreateAnimeSeasonTrailer_FullMethodName  = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonTrailer"
	AnimeSerieService_CreateAnimeEpisode_FullMethodName        = "/v1.aspbv1.AnimeSerieService/CreateAnimeEpisode"
	AnimeSerieService_CreateAnimeEpisodeMetas_FullMethodName   = "/v1.aspbv1.AnimeSerieService/CreateAnimeEpisodeMetas"
	AnimeSerieService_CreateAnimeEpisodeServer_FullMethodName  = "/v1.aspbv1.AnimeSerieService/CreateAnimeEpisodeServer"
	AnimeSerieService_CreateAnimeEpisodeData_FullMethodName    = "/v1.aspbv1.AnimeSerieService/CreateAnimeEpisodeData"
	AnimeSerieService_CreateAnimeSeasonTitle_FullMethodName    = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonTitle"
	AnimeSerieService_CreateAnimeSeasonTag_FullMethodName      = "/v1.aspbv1.AnimeSerieService/CreateAnimeSeasonTag"
	AnimeSerieService_GetFullAnimeSerie_FullMethodName         = "/v1.aspbv1.AnimeSerieService/GetFullAnimeSerie"
	AnimeSerieService_GetAllAnimeSeries_FullMethodName         = "/v1.aspbv1.AnimeSerieService/GetAllAnimeSeries"
	AnimeSerieService_GetFullAnimeSeason_FullMethodName        = "/v1.aspbv1.AnimeSerieService/GetFullAnimeSeason"
	AnimeSerieService_GetAllAnimeSerieMetas_FullMethodName     = "/v1.aspbv1.AnimeSerieService/GetAllAnimeSerieMetas"
	AnimeSerieService_GetAnimeSerieSeasons_FullMethodName      = "/v1.aspbv1.AnimeSerieService/GetAnimeSerieSeasons"
	AnimeSerieService_GetAnimeSeasonEpisodes_FullMethodName    = "/v1.aspbv1.AnimeSerieService/GetAnimeSeasonEpisodes"
	AnimeSerieService_UpdateAnimeSerie_FullMethodName          = "/v1.aspbv1.AnimeSerieService/UpdateAnimeSerie"
	AnimeSerieService_QueryAnimeSeason_FullMethodName          = "/v1.aspbv1.AnimeSerieService/QueryAnimeSeason"
)

// AnimeSerieServiceClient is the client API for AnimeSerieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeSerieServiceClient interface {
	CreateAnimeSerie(ctx context.Context, in *CreateAnimeSerieRequest, opts ...grpc.CallOption) (*CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(ctx context.Context, in *CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieLink(ctx context.Context, in *CreateAnimeSerieLinkRequest, opts ...grpc.CallOption) (*CreateAnimeSerieLinkResponse, error)
	CreateAnimeSerieTrailer(ctx context.Context, in *CreateAnimeSerieTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeSerieTrailerResponse, error)
	CreateAnimeSerieImage(ctx context.Context, in *CreateAnimeSerieImageRequest, opts ...grpc.CallOption) (*CreateAnimeSerieImageResponse, error)
	CreateAnimeSeasonImage(ctx context.Context, in *CreateAnimeSeasonImageRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonImageResponse, error)
	CreateAnimeSeasonInfo(ctx context.Context, in *CreateAnimeSeasonInfoRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonInfoResponse, error)
	CreateAnimeSeason(ctx context.Context, in *CreateAnimeSeasonRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonResponse, error)
	CreateAnimeSeasonMetas(ctx context.Context, in *CreateAnimeSeasonMetasRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonMetasResponse, error)
	CreateAnimeSeasonResource(ctx context.Context, in *CreateAnimeSeasonResourceRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonResourceResponse, error)
	CreateAnimeSeasonTrailer(ctx context.Context, in *CreateAnimeSeasonTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTrailerResponse, error)
	CreateAnimeEpisode(ctx context.Context, in *CreateAnimeEpisodeRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeResponse, error)
	CreateAnimeEpisodeMetas(ctx context.Context, in *CreateAnimeEpisodeMetasRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeMetasResponse, error)
	CreateAnimeEpisodeServer(ctx context.Context, in *CreateAnimeEpisodeServerRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeServerResponse, error)
	CreateAnimeEpisodeData(ctx context.Context, in *CreateAnimeEpisodeDataRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeDataResponse, error)
	CreateAnimeSeasonTitle(ctx context.Context, in *CreateAnimeSeasonTitleRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTitleResponse, error)
	CreateAnimeSeasonTag(ctx context.Context, in *CreateAnimeSeasonTagRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTagResponse, error)
	GetFullAnimeSerie(ctx context.Context, in *GetFullAnimeSerieRequest, opts ...grpc.CallOption) (*GetFullAnimeSerieResponse, error)
	GetAllAnimeSeries(ctx context.Context, in *GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*GetAllAnimeSeriesResponse, error)
	GetFullAnimeSeason(ctx context.Context, in *GetFullAnimeSeasonRequest, opts ...grpc.CallOption) (*GetFullAnimeSeasonResponse, error)
	GetAllAnimeSerieMetas(ctx context.Context, in *GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeSerieMetasResponse, error)
	GetAnimeSerieSeasons(ctx context.Context, in *GetAnimeSerieSeasonsRequest, opts ...grpc.CallOption) (*GetAnimeSerieSeasonsResponse, error)
	GetAnimeSeasonEpisodes(ctx context.Context, in *GetAnimeSeasonEpisodesRequest, opts ...grpc.CallOption) (*GetAnimeSeasonEpisodesResponse, error)
	UpdateAnimeSerie(ctx context.Context, in *UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*UpdateAnimeSerieResponse, error)
	QueryAnimeSeason(ctx context.Context, in *QueryAnimeSeasonRequest, opts ...grpc.CallOption) (*QueryAnimeSeasonResponse, error)
}

type animeSerieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeSerieServiceClient(cc grpc.ClientConnInterface) AnimeSerieServiceClient {
	return &animeSerieServiceClient{cc}
}

func (c *animeSerieServiceClient) CreateAnimeSerie(ctx context.Context, in *CreateAnimeSerieRequest, opts ...grpc.CallOption) (*CreateAnimeSerieResponse, error) {
	out := new(CreateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSerieMetas(ctx context.Context, in *CreateAnimeSerieMetasRequest, opts ...grpc.CallOption) (*CreateAnimeSerieMetasResponse, error) {
	out := new(CreateAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSerieLink(ctx context.Context, in *CreateAnimeSerieLinkRequest, opts ...grpc.CallOption) (*CreateAnimeSerieLinkResponse, error) {
	out := new(CreateAnimeSerieLinkResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSerieLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSerieTrailer(ctx context.Context, in *CreateAnimeSerieTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeSerieTrailerResponse, error) {
	out := new(CreateAnimeSerieTrailerResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSerieTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSerieImage(ctx context.Context, in *CreateAnimeSerieImageRequest, opts ...grpc.CallOption) (*CreateAnimeSerieImageResponse, error) {
	out := new(CreateAnimeSerieImageResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSerieImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonImage(ctx context.Context, in *CreateAnimeSeasonImageRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonImageResponse, error) {
	out := new(CreateAnimeSeasonImageResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonInfo(ctx context.Context, in *CreateAnimeSeasonInfoRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonInfoResponse, error) {
	out := new(CreateAnimeSeasonInfoResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeason(ctx context.Context, in *CreateAnimeSeasonRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonResponse, error) {
	out := new(CreateAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonMetas(ctx context.Context, in *CreateAnimeSeasonMetasRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonMetasResponse, error) {
	out := new(CreateAnimeSeasonMetasResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonResource(ctx context.Context, in *CreateAnimeSeasonResourceRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonResourceResponse, error) {
	out := new(CreateAnimeSeasonResourceResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonTrailer(ctx context.Context, in *CreateAnimeSeasonTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTrailerResponse, error) {
	out := new(CreateAnimeSeasonTrailerResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeEpisode(ctx context.Context, in *CreateAnimeEpisodeRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeResponse, error) {
	out := new(CreateAnimeEpisodeResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeEpisode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeEpisodeMetas(ctx context.Context, in *CreateAnimeEpisodeMetasRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeMetasResponse, error) {
	out := new(CreateAnimeEpisodeMetasResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeEpisodeMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeEpisodeServer(ctx context.Context, in *CreateAnimeEpisodeServerRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeServerResponse, error) {
	out := new(CreateAnimeEpisodeServerResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeEpisodeServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeEpisodeData(ctx context.Context, in *CreateAnimeEpisodeDataRequest, opts ...grpc.CallOption) (*CreateAnimeEpisodeDataResponse, error) {
	out := new(CreateAnimeEpisodeDataResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeEpisodeData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonTitle(ctx context.Context, in *CreateAnimeSeasonTitleRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTitleResponse, error) {
	out := new(CreateAnimeSeasonTitleResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) CreateAnimeSeasonTag(ctx context.Context, in *CreateAnimeSeasonTagRequest, opts ...grpc.CallOption) (*CreateAnimeSeasonTagResponse, error) {
	out := new(CreateAnimeSeasonTagResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_CreateAnimeSeasonTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetFullAnimeSerie(ctx context.Context, in *GetFullAnimeSerieRequest, opts ...grpc.CallOption) (*GetFullAnimeSerieResponse, error) {
	out := new(GetFullAnimeSerieResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetFullAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetAllAnimeSeries(ctx context.Context, in *GetAllAnimeSeriesRequest, opts ...grpc.CallOption) (*GetAllAnimeSeriesResponse, error) {
	out := new(GetAllAnimeSeriesResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetAllAnimeSeries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetFullAnimeSeason(ctx context.Context, in *GetFullAnimeSeasonRequest, opts ...grpc.CallOption) (*GetFullAnimeSeasonResponse, error) {
	out := new(GetFullAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetFullAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetAllAnimeSerieMetas(ctx context.Context, in *GetAllAnimeSerieMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeSerieMetasResponse, error) {
	out := new(GetAllAnimeSerieMetasResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetAllAnimeSerieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetAnimeSerieSeasons(ctx context.Context, in *GetAnimeSerieSeasonsRequest, opts ...grpc.CallOption) (*GetAnimeSerieSeasonsResponse, error) {
	out := new(GetAnimeSerieSeasonsResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetAnimeSerieSeasons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) GetAnimeSeasonEpisodes(ctx context.Context, in *GetAnimeSeasonEpisodesRequest, opts ...grpc.CallOption) (*GetAnimeSeasonEpisodesResponse, error) {
	out := new(GetAnimeSeasonEpisodesResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_GetAnimeSeasonEpisodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) UpdateAnimeSerie(ctx context.Context, in *UpdateAnimeSerieRequest, opts ...grpc.CallOption) (*UpdateAnimeSerieResponse, error) {
	out := new(UpdateAnimeSerieResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_UpdateAnimeSerie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeSerieServiceClient) QueryAnimeSeason(ctx context.Context, in *QueryAnimeSeasonRequest, opts ...grpc.CallOption) (*QueryAnimeSeasonResponse, error) {
	out := new(QueryAnimeSeasonResponse)
	err := c.cc.Invoke(ctx, AnimeSerieService_QueryAnimeSeason_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeSerieServiceServer is the server API for AnimeSerieService service.
// All implementations must embed UnimplementedAnimeSerieServiceServer
// for forward compatibility
type AnimeSerieServiceServer interface {
	CreateAnimeSerie(context.Context, *CreateAnimeSerieRequest) (*CreateAnimeSerieResponse, error)
	CreateAnimeSerieMetas(context.Context, *CreateAnimeSerieMetasRequest) (*CreateAnimeSerieMetasResponse, error)
	CreateAnimeSerieLink(context.Context, *CreateAnimeSerieLinkRequest) (*CreateAnimeSerieLinkResponse, error)
	CreateAnimeSerieTrailer(context.Context, *CreateAnimeSerieTrailerRequest) (*CreateAnimeSerieTrailerResponse, error)
	CreateAnimeSerieImage(context.Context, *CreateAnimeSerieImageRequest) (*CreateAnimeSerieImageResponse, error)
	CreateAnimeSeasonImage(context.Context, *CreateAnimeSeasonImageRequest) (*CreateAnimeSeasonImageResponse, error)
	CreateAnimeSeasonInfo(context.Context, *CreateAnimeSeasonInfoRequest) (*CreateAnimeSeasonInfoResponse, error)
	CreateAnimeSeason(context.Context, *CreateAnimeSeasonRequest) (*CreateAnimeSeasonResponse, error)
	CreateAnimeSeasonMetas(context.Context, *CreateAnimeSeasonMetasRequest) (*CreateAnimeSeasonMetasResponse, error)
	CreateAnimeSeasonResource(context.Context, *CreateAnimeSeasonResourceRequest) (*CreateAnimeSeasonResourceResponse, error)
	CreateAnimeSeasonTrailer(context.Context, *CreateAnimeSeasonTrailerRequest) (*CreateAnimeSeasonTrailerResponse, error)
	CreateAnimeEpisode(context.Context, *CreateAnimeEpisodeRequest) (*CreateAnimeEpisodeResponse, error)
	CreateAnimeEpisodeMetas(context.Context, *CreateAnimeEpisodeMetasRequest) (*CreateAnimeEpisodeMetasResponse, error)
	CreateAnimeEpisodeServer(context.Context, *CreateAnimeEpisodeServerRequest) (*CreateAnimeEpisodeServerResponse, error)
	CreateAnimeEpisodeData(context.Context, *CreateAnimeEpisodeDataRequest) (*CreateAnimeEpisodeDataResponse, error)
	CreateAnimeSeasonTitle(context.Context, *CreateAnimeSeasonTitleRequest) (*CreateAnimeSeasonTitleResponse, error)
	CreateAnimeSeasonTag(context.Context, *CreateAnimeSeasonTagRequest) (*CreateAnimeSeasonTagResponse, error)
	GetFullAnimeSerie(context.Context, *GetFullAnimeSerieRequest) (*GetFullAnimeSerieResponse, error)
	GetAllAnimeSeries(context.Context, *GetAllAnimeSeriesRequest) (*GetAllAnimeSeriesResponse, error)
	GetFullAnimeSeason(context.Context, *GetFullAnimeSeasonRequest) (*GetFullAnimeSeasonResponse, error)
	GetAllAnimeSerieMetas(context.Context, *GetAllAnimeSerieMetasRequest) (*GetAllAnimeSerieMetasResponse, error)
	GetAnimeSerieSeasons(context.Context, *GetAnimeSerieSeasonsRequest) (*GetAnimeSerieSeasonsResponse, error)
	GetAnimeSeasonEpisodes(context.Context, *GetAnimeSeasonEpisodesRequest) (*GetAnimeSeasonEpisodesResponse, error)
	UpdateAnimeSerie(context.Context, *UpdateAnimeSerieRequest) (*UpdateAnimeSerieResponse, error)
	QueryAnimeSeason(context.Context, *QueryAnimeSeasonRequest) (*QueryAnimeSeasonResponse, error)
	mustEmbedUnimplementedAnimeSerieServiceServer()
}

// UnimplementedAnimeSerieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeSerieServiceServer struct {
}

func (UnimplementedAnimeSerieServiceServer) CreateAnimeSerie(context.Context, *CreateAnimeSerieRequest) (*CreateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerie not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSerieMetas(context.Context, *CreateAnimeSerieMetasRequest) (*CreateAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieMetas not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSerieLink(context.Context, *CreateAnimeSerieLinkRequest) (*CreateAnimeSerieLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieLink not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSerieTrailer(context.Context, *CreateAnimeSerieTrailerRequest) (*CreateAnimeSerieTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieTrailer not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSerieImage(context.Context, *CreateAnimeSerieImageRequest) (*CreateAnimeSerieImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSerieImage not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonImage(context.Context, *CreateAnimeSeasonImageRequest) (*CreateAnimeSeasonImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonImage not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonInfo(context.Context, *CreateAnimeSeasonInfoRequest) (*CreateAnimeSeasonInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonInfo not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeason(context.Context, *CreateAnimeSeasonRequest) (*CreateAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeason not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonMetas(context.Context, *CreateAnimeSeasonMetasRequest) (*CreateAnimeSeasonMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonMetas not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonResource(context.Context, *CreateAnimeSeasonResourceRequest) (*CreateAnimeSeasonResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonResource not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonTrailer(context.Context, *CreateAnimeSeasonTrailerRequest) (*CreateAnimeSeasonTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonTrailer not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeEpisode(context.Context, *CreateAnimeEpisodeRequest) (*CreateAnimeEpisodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisode not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeEpisodeMetas(context.Context, *CreateAnimeEpisodeMetasRequest) (*CreateAnimeEpisodeMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisodeMetas not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeEpisodeServer(context.Context, *CreateAnimeEpisodeServerRequest) (*CreateAnimeEpisodeServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisodeServer not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeEpisodeData(context.Context, *CreateAnimeEpisodeDataRequest) (*CreateAnimeEpisodeDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeEpisodeData not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonTitle(context.Context, *CreateAnimeSeasonTitleRequest) (*CreateAnimeSeasonTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonTitle not implemented")
}
func (UnimplementedAnimeSerieServiceServer) CreateAnimeSeasonTag(context.Context, *CreateAnimeSeasonTagRequest) (*CreateAnimeSeasonTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeSeasonTag not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetFullAnimeSerie(context.Context, *GetFullAnimeSerieRequest) (*GetFullAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeSerie not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetAllAnimeSeries(context.Context, *GetAllAnimeSeriesRequest) (*GetAllAnimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSeries not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetFullAnimeSeason(context.Context, *GetFullAnimeSeasonRequest) (*GetFullAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeSeason not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetAllAnimeSerieMetas(context.Context, *GetAllAnimeSerieMetasRequest) (*GetAllAnimeSerieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeSerieMetas not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetAnimeSerieSeasons(context.Context, *GetAnimeSerieSeasonsRequest) (*GetAnimeSerieSeasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeSerieSeasons not implemented")
}
func (UnimplementedAnimeSerieServiceServer) GetAnimeSeasonEpisodes(context.Context, *GetAnimeSeasonEpisodesRequest) (*GetAnimeSeasonEpisodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeSeasonEpisodes not implemented")
}
func (UnimplementedAnimeSerieServiceServer) UpdateAnimeSerie(context.Context, *UpdateAnimeSerieRequest) (*UpdateAnimeSerieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeSerie not implemented")
}
func (UnimplementedAnimeSerieServiceServer) QueryAnimeSeason(context.Context, *QueryAnimeSeasonRequest) (*QueryAnimeSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnimeSeason not implemented")
}
func (UnimplementedAnimeSerieServiceServer) mustEmbedUnimplementedAnimeSerieServiceServer() {}

// UnsafeAnimeSerieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeSerieServiceServer will
// result in compilation errors.
type UnsafeAnimeSerieServiceServer interface {
	mustEmbedUnimplementedAnimeSerieServiceServer()
}

func RegisterAnimeSerieServiceServer(s grpc.ServiceRegistrar, srv AnimeSerieServiceServer) {
	s.RegisterService(&AnimeSerieService_ServiceDesc, srv)
}

func _AnimeSerieService_CreateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerie(ctx, req.(*CreateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieMetas(ctx, req.(*CreateAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSerieLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSerieLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSerieLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieLink(ctx, req.(*CreateAnimeSerieLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSerieTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSerieTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSerieTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieTrailer(ctx, req.(*CreateAnimeSerieTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSerieImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSerieImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSerieImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSerieImage(ctx, req.(*CreateAnimeSerieImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonImage(ctx, req.(*CreateAnimeSeasonImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonInfo(ctx, req.(*CreateAnimeSeasonInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeason(ctx, req.(*CreateAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonMetas(ctx, req.(*CreateAnimeSeasonMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonResource(ctx, req.(*CreateAnimeSeasonResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTrailer(ctx, req.(*CreateAnimeSeasonTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeEpisode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeEpisodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeEpisode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisode(ctx, req.(*CreateAnimeEpisodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeEpisodeMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeEpisodeMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeEpisodeMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeMetas(ctx, req.(*CreateAnimeEpisodeMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeEpisodeServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeEpisodeServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeEpisodeServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeServer(ctx, req.(*CreateAnimeEpisodeServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeEpisodeData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeEpisodeDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeEpisodeData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeEpisodeData(ctx, req.(*CreateAnimeEpisodeDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTitle(ctx, req.(*CreateAnimeSeasonTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_CreateAnimeSeasonTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeSeasonTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_CreateAnimeSeasonTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).CreateAnimeSeasonTag(ctx, req.(*CreateAnimeSeasonTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetFullAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetFullAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetFullAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetFullAnimeSerie(ctx, req.(*GetFullAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetAllAnimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetAllAnimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetAllAnimeSeries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetAllAnimeSeries(ctx, req.(*GetAllAnimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetFullAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetFullAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetFullAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetFullAnimeSeason(ctx, req.(*GetFullAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetAllAnimeSerieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnimeSerieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetAllAnimeSerieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetAllAnimeSerieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetAllAnimeSerieMetas(ctx, req.(*GetAllAnimeSerieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetAnimeSerieSeasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimeSerieSeasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetAnimeSerieSeasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetAnimeSerieSeasons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetAnimeSerieSeasons(ctx, req.(*GetAnimeSerieSeasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_GetAnimeSeasonEpisodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimeSeasonEpisodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).GetAnimeSeasonEpisodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_GetAnimeSeasonEpisodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).GetAnimeSeasonEpisodes(ctx, req.(*GetAnimeSeasonEpisodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_UpdateAnimeSerie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeSerieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).UpdateAnimeSerie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_UpdateAnimeSerie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).UpdateAnimeSerie(ctx, req.(*UpdateAnimeSerieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeSerieService_QueryAnimeSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnimeSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeSerieServiceServer).QueryAnimeSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeSerieService_QueryAnimeSeason_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeSerieServiceServer).QueryAnimeSeason(ctx, req.(*QueryAnimeSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeSerieService_ServiceDesc is the grpc.ServiceDesc for AnimeSerieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeSerieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.aspbv1.AnimeSerieService",
	HandlerType: (*AnimeSerieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnimeSerie",
			Handler:    _AnimeSerieService_CreateAnimeSerie_Handler,
		},
		{
			MethodName: "CreateAnimeSerieMetas",
			Handler:    _AnimeSerieService_CreateAnimeSerieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSerieLink",
			Handler:    _AnimeSerieService_CreateAnimeSerieLink_Handler,
		},
		{
			MethodName: "CreateAnimeSerieTrailer",
			Handler:    _AnimeSerieService_CreateAnimeSerieTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeSerieImage",
			Handler:    _AnimeSerieService_CreateAnimeSerieImage_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonImage",
			Handler:    _AnimeSerieService_CreateAnimeSeasonImage_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonInfo",
			Handler:    _AnimeSerieService_CreateAnimeSeasonInfo_Handler,
		},
		{
			MethodName: "CreateAnimeSeason",
			Handler:    _AnimeSerieService_CreateAnimeSeason_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonMetas",
			Handler:    _AnimeSerieService_CreateAnimeSeasonMetas_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonResource",
			Handler:    _AnimeSerieService_CreateAnimeSeasonResource_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonTrailer",
			Handler:    _AnimeSerieService_CreateAnimeSeasonTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeEpisode",
			Handler:    _AnimeSerieService_CreateAnimeEpisode_Handler,
		},
		{
			MethodName: "CreateAnimeEpisodeMetas",
			Handler:    _AnimeSerieService_CreateAnimeEpisodeMetas_Handler,
		},
		{
			MethodName: "CreateAnimeEpisodeServer",
			Handler:    _AnimeSerieService_CreateAnimeEpisodeServer_Handler,
		},
		{
			MethodName: "CreateAnimeEpisodeData",
			Handler:    _AnimeSerieService_CreateAnimeEpisodeData_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonTitle",
			Handler:    _AnimeSerieService_CreateAnimeSeasonTitle_Handler,
		},
		{
			MethodName: "CreateAnimeSeasonTag",
			Handler:    _AnimeSerieService_CreateAnimeSeasonTag_Handler,
		},
		{
			MethodName: "GetFullAnimeSerie",
			Handler:    _AnimeSerieService_GetFullAnimeSerie_Handler,
		},
		{
			MethodName: "GetAllAnimeSeries",
			Handler:    _AnimeSerieService_GetAllAnimeSeries_Handler,
		},
		{
			MethodName: "GetFullAnimeSeason",
			Handler:    _AnimeSerieService_GetFullAnimeSeason_Handler,
		},
		{
			MethodName: "GetAllAnimeSerieMetas",
			Handler:    _AnimeSerieService_GetAllAnimeSerieMetas_Handler,
		},
		{
			MethodName: "GetAnimeSerieSeasons",
			Handler:    _AnimeSerieService_GetAnimeSerieSeasons_Handler,
		},
		{
			MethodName: "GetAnimeSeasonEpisodes",
			Handler:    _AnimeSerieService_GetAnimeSeasonEpisodes_Handler,
		},
		{
			MethodName: "UpdateAnimeSerie",
			Handler:    _AnimeSerieService_UpdateAnimeSerie_Handler,
		},
		{
			MethodName: "QueryAnimeSeason",
			Handler:    _AnimeSerieService_QueryAnimeSeason_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/aspb/service_anime_serie.proto",
}
