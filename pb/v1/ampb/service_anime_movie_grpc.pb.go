// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: v1/ampb/service_anime_movie.proto

package ampbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnimeMovieService_CreateAnimeMovie_FullMethodName           = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovie"
	AnimeMovieService_CreateAnimeMovieMetas_FullMethodName      = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieMetas"
	AnimeMovieService_CreateAnimeMovieInfo_FullMethodName       = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieInfo"
	AnimeMovieService_CreateAnimeMovieResource_FullMethodName   = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieResource"
	AnimeMovieService_CreateAnimeMovieLink_FullMethodName       = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieLink"
	AnimeMovieService_CreateAnimeMovieImage_FullMethodName      = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieImage"
	AnimeMovieService_CreateAnimeMovieTrailer_FullMethodName    = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieTrailer"
	AnimeMovieService_CreateAnimeMovieTitle_FullMethodName      = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieTitle"
	AnimeMovieService_CreateAnimeMovieServer_FullMethodName     = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieServer"
	AnimeMovieService_CreateAnimeMovieData_FullMethodName       = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieData"
	AnimeMovieService_CreateAnimeMovieTag_FullMethodName        = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieTag"
	AnimeMovieService_CreateAnimeMovieCharacters_FullMethodName = "/v1.ampbv1.AnimeMovieService/CreateAnimeMovieCharacters"
	AnimeMovieService_UpdateAnimeMovie_FullMethodName           = "/v1.ampbv1.AnimeMovieService/UpdateAnimeMovie"
	AnimeMovieService_GetAllAnimeMovies_FullMethodName          = "/v1.ampbv1.AnimeMovieService/GetAllAnimeMovies"
	AnimeMovieService_GetAllAnimeMovieMetas_FullMethodName      = "/v1.ampbv1.AnimeMovieService/GetAllAnimeMovieMetas"
	AnimeMovieService_GetFullAnimeMovie_FullMethodName          = "/v1.ampbv1.AnimeMovieService/GetFullAnimeMovie"
	AnimeMovieService_GetAnimeMovieImages_FullMethodName        = "/v1.ampbv1.AnimeMovieService/GetAnimeMovieImages"
	AnimeMovieService_GetAnimeMovieCharacters_FullMethodName    = "/v1.ampbv1.AnimeMovieService/GetAnimeMovieCharacters"
	AnimeMovieService_QueryAnimeMovie_FullMethodName            = "/v1.ampbv1.AnimeMovieService/QueryAnimeMovie"
)

// AnimeMovieServiceClient is the client API for AnimeMovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeMovieServiceClient interface {
	CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(ctx context.Context, in *CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieInfo(ctx context.Context, in *CreateAnimeMovieInfoRequest, opts ...grpc.CallOption) (*CreateAnimeMovieInfoResponse, error)
	CreateAnimeMovieResource(ctx context.Context, in *CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResourceResponse, error)
	CreateAnimeMovieLink(ctx context.Context, in *CreateAnimeMovieLinkRequest, opts ...grpc.CallOption) (*CreateAnimeMovieLinkResponse, error)
	CreateAnimeMovieImage(ctx context.Context, in *CreateAnimeMovieImageRequest, opts ...grpc.CallOption) (*CreateAnimeMovieImageResponse, error)
	CreateAnimeMovieTrailer(ctx context.Context, in *CreateAnimeMovieTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTrailerResponse, error)
	CreateAnimeMovieTitle(ctx context.Context, in *CreateAnimeMovieTitleRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTitleResponse, error)
	CreateAnimeMovieServer(ctx context.Context, in *CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*CreateAnimeMovieServerResponse, error)
	CreateAnimeMovieData(ctx context.Context, in *CreateAnimeMovieDataRequest, opts ...grpc.CallOption) (*CreateAnimeMovieDataResponse, error)
	CreateAnimeMovieTag(ctx context.Context, in *CreateAnimeMovieTagRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTagResponse, error)
	CreateAnimeMovieCharacters(ctx context.Context, in *CreateAnimeMovieCharactersRequest, opts ...grpc.CallOption) (*CreateAnimeMovieCharactersResponse, error)
	UpdateAnimeMovie(ctx context.Context, in *UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*UpdateAnimeMovieResponse, error)
	GetAllAnimeMovies(ctx context.Context, in *GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(ctx context.Context, in *GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeMovieMetasResponse, error)
	GetFullAnimeMovie(ctx context.Context, in *GetFullAnimeMovieRequest, opts ...grpc.CallOption) (*GetFullAnimeMovieResponse, error)
	GetAnimeMovieImages(ctx context.Context, in *GetAnimeMovieImagesRequest, opts ...grpc.CallOption) (*GetAnimeMovieImagesResponse, error)
	GetAnimeMovieCharacters(ctx context.Context, in *GetAnimeMovieCharactersRequest, opts ...grpc.CallOption) (*GetAnimeMovieCharactersResponse, error)
	QueryAnimeMovie(ctx context.Context, in *QueryAnimeMovieRequest, opts ...grpc.CallOption) (*QueryAnimeMovieResponse, error)
}

type animeMovieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeMovieServiceClient(cc grpc.ClientConnInterface) AnimeMovieServiceClient {
	return &animeMovieServiceClient{cc}
}

func (c *animeMovieServiceClient) CreateAnimeMovie(ctx context.Context, in *CreateAnimeMovieRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResponse, error) {
	out := new(CreateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieMetas(ctx context.Context, in *CreateAnimeMovieMetasRequest, opts ...grpc.CallOption) (*CreateAnimeMovieMetasResponse, error) {
	out := new(CreateAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieInfo(ctx context.Context, in *CreateAnimeMovieInfoRequest, opts ...grpc.CallOption) (*CreateAnimeMovieInfoResponse, error) {
	out := new(CreateAnimeMovieInfoResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieResource(ctx context.Context, in *CreateAnimeMovieResourceRequest, opts ...grpc.CallOption) (*CreateAnimeMovieResourceResponse, error) {
	out := new(CreateAnimeMovieResourceResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieLink(ctx context.Context, in *CreateAnimeMovieLinkRequest, opts ...grpc.CallOption) (*CreateAnimeMovieLinkResponse, error) {
	out := new(CreateAnimeMovieLinkResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieImage(ctx context.Context, in *CreateAnimeMovieImageRequest, opts ...grpc.CallOption) (*CreateAnimeMovieImageResponse, error) {
	out := new(CreateAnimeMovieImageResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieTrailer(ctx context.Context, in *CreateAnimeMovieTrailerRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTrailerResponse, error) {
	out := new(CreateAnimeMovieTrailerResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieTitle(ctx context.Context, in *CreateAnimeMovieTitleRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTitleResponse, error) {
	out := new(CreateAnimeMovieTitleResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieServer(ctx context.Context, in *CreateAnimeMovieServerRequest, opts ...grpc.CallOption) (*CreateAnimeMovieServerResponse, error) {
	out := new(CreateAnimeMovieServerResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieServer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieData(ctx context.Context, in *CreateAnimeMovieDataRequest, opts ...grpc.CallOption) (*CreateAnimeMovieDataResponse, error) {
	out := new(CreateAnimeMovieDataResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieTag(ctx context.Context, in *CreateAnimeMovieTagRequest, opts ...grpc.CallOption) (*CreateAnimeMovieTagResponse, error) {
	out := new(CreateAnimeMovieTagResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) CreateAnimeMovieCharacters(ctx context.Context, in *CreateAnimeMovieCharactersRequest, opts ...grpc.CallOption) (*CreateAnimeMovieCharactersResponse, error) {
	out := new(CreateAnimeMovieCharactersResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_CreateAnimeMovieCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) UpdateAnimeMovie(ctx context.Context, in *UpdateAnimeMovieRequest, opts ...grpc.CallOption) (*UpdateAnimeMovieResponse, error) {
	out := new(UpdateAnimeMovieResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_UpdateAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) GetAllAnimeMovies(ctx context.Context, in *GetAllAnimeMoviesRequest, opts ...grpc.CallOption) (*GetAllAnimeMoviesResponse, error) {
	out := new(GetAllAnimeMoviesResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_GetAllAnimeMovies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) GetAllAnimeMovieMetas(ctx context.Context, in *GetAllAnimeMovieMetasRequest, opts ...grpc.CallOption) (*GetAllAnimeMovieMetasResponse, error) {
	out := new(GetAllAnimeMovieMetasResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_GetAllAnimeMovieMetas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) GetFullAnimeMovie(ctx context.Context, in *GetFullAnimeMovieRequest, opts ...grpc.CallOption) (*GetFullAnimeMovieResponse, error) {
	out := new(GetFullAnimeMovieResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_GetFullAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) GetAnimeMovieImages(ctx context.Context, in *GetAnimeMovieImagesRequest, opts ...grpc.CallOption) (*GetAnimeMovieImagesResponse, error) {
	out := new(GetAnimeMovieImagesResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_GetAnimeMovieImages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) GetAnimeMovieCharacters(ctx context.Context, in *GetAnimeMovieCharactersRequest, opts ...grpc.CallOption) (*GetAnimeMovieCharactersResponse, error) {
	out := new(GetAnimeMovieCharactersResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_GetAnimeMovieCharacters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeMovieServiceClient) QueryAnimeMovie(ctx context.Context, in *QueryAnimeMovieRequest, opts ...grpc.CallOption) (*QueryAnimeMovieResponse, error) {
	out := new(QueryAnimeMovieResponse)
	err := c.cc.Invoke(ctx, AnimeMovieService_QueryAnimeMovie_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeMovieServiceServer is the server API for AnimeMovieService service.
// All implementations must embed UnimplementedAnimeMovieServiceServer
// for forward compatibility
type AnimeMovieServiceServer interface {
	CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error)
	CreateAnimeMovieMetas(context.Context, *CreateAnimeMovieMetasRequest) (*CreateAnimeMovieMetasResponse, error)
	CreateAnimeMovieInfo(context.Context, *CreateAnimeMovieInfoRequest) (*CreateAnimeMovieInfoResponse, error)
	CreateAnimeMovieResource(context.Context, *CreateAnimeMovieResourceRequest) (*CreateAnimeMovieResourceResponse, error)
	CreateAnimeMovieLink(context.Context, *CreateAnimeMovieLinkRequest) (*CreateAnimeMovieLinkResponse, error)
	CreateAnimeMovieImage(context.Context, *CreateAnimeMovieImageRequest) (*CreateAnimeMovieImageResponse, error)
	CreateAnimeMovieTrailer(context.Context, *CreateAnimeMovieTrailerRequest) (*CreateAnimeMovieTrailerResponse, error)
	CreateAnimeMovieTitle(context.Context, *CreateAnimeMovieTitleRequest) (*CreateAnimeMovieTitleResponse, error)
	CreateAnimeMovieServer(context.Context, *CreateAnimeMovieServerRequest) (*CreateAnimeMovieServerResponse, error)
	CreateAnimeMovieData(context.Context, *CreateAnimeMovieDataRequest) (*CreateAnimeMovieDataResponse, error)
	CreateAnimeMovieTag(context.Context, *CreateAnimeMovieTagRequest) (*CreateAnimeMovieTagResponse, error)
	CreateAnimeMovieCharacters(context.Context, *CreateAnimeMovieCharactersRequest) (*CreateAnimeMovieCharactersResponse, error)
	UpdateAnimeMovie(context.Context, *UpdateAnimeMovieRequest) (*UpdateAnimeMovieResponse, error)
	GetAllAnimeMovies(context.Context, *GetAllAnimeMoviesRequest) (*GetAllAnimeMoviesResponse, error)
	GetAllAnimeMovieMetas(context.Context, *GetAllAnimeMovieMetasRequest) (*GetAllAnimeMovieMetasResponse, error)
	GetFullAnimeMovie(context.Context, *GetFullAnimeMovieRequest) (*GetFullAnimeMovieResponse, error)
	GetAnimeMovieImages(context.Context, *GetAnimeMovieImagesRequest) (*GetAnimeMovieImagesResponse, error)
	GetAnimeMovieCharacters(context.Context, *GetAnimeMovieCharactersRequest) (*GetAnimeMovieCharactersResponse, error)
	QueryAnimeMovie(context.Context, *QueryAnimeMovieRequest) (*QueryAnimeMovieResponse, error)
	mustEmbedUnimplementedAnimeMovieServiceServer()
}

// UnimplementedAnimeMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeMovieServiceServer struct {
}

func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovie(context.Context, *CreateAnimeMovieRequest) (*CreateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovie not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieMetas(context.Context, *CreateAnimeMovieMetasRequest) (*CreateAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieMetas not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieInfo(context.Context, *CreateAnimeMovieInfoRequest) (*CreateAnimeMovieInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieInfo not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieResource(context.Context, *CreateAnimeMovieResourceRequest) (*CreateAnimeMovieResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieResource not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieLink(context.Context, *CreateAnimeMovieLinkRequest) (*CreateAnimeMovieLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieLink not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieImage(context.Context, *CreateAnimeMovieImageRequest) (*CreateAnimeMovieImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieImage not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieTrailer(context.Context, *CreateAnimeMovieTrailerRequest) (*CreateAnimeMovieTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieTrailer not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieTitle(context.Context, *CreateAnimeMovieTitleRequest) (*CreateAnimeMovieTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieTitle not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieServer(context.Context, *CreateAnimeMovieServerRequest) (*CreateAnimeMovieServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieServer not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieData(context.Context, *CreateAnimeMovieDataRequest) (*CreateAnimeMovieDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieData not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieTag(context.Context, *CreateAnimeMovieTagRequest) (*CreateAnimeMovieTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieTag not implemented")
}
func (UnimplementedAnimeMovieServiceServer) CreateAnimeMovieCharacters(context.Context, *CreateAnimeMovieCharactersRequest) (*CreateAnimeMovieCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnimeMovieCharacters not implemented")
}
func (UnimplementedAnimeMovieServiceServer) UpdateAnimeMovie(context.Context, *UpdateAnimeMovieRequest) (*UpdateAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeMovie not implemented")
}
func (UnimplementedAnimeMovieServiceServer) GetAllAnimeMovies(context.Context, *GetAllAnimeMoviesRequest) (*GetAllAnimeMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovies not implemented")
}
func (UnimplementedAnimeMovieServiceServer) GetAllAnimeMovieMetas(context.Context, *GetAllAnimeMovieMetasRequest) (*GetAllAnimeMovieMetasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAnimeMovieMetas not implemented")
}
func (UnimplementedAnimeMovieServiceServer) GetFullAnimeMovie(context.Context, *GetFullAnimeMovieRequest) (*GetFullAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullAnimeMovie not implemented")
}
func (UnimplementedAnimeMovieServiceServer) GetAnimeMovieImages(context.Context, *GetAnimeMovieImagesRequest) (*GetAnimeMovieImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeMovieImages not implemented")
}
func (UnimplementedAnimeMovieServiceServer) GetAnimeMovieCharacters(context.Context, *GetAnimeMovieCharactersRequest) (*GetAnimeMovieCharactersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnimeMovieCharacters not implemented")
}
func (UnimplementedAnimeMovieServiceServer) QueryAnimeMovie(context.Context, *QueryAnimeMovieRequest) (*QueryAnimeMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAnimeMovie not implemented")
}
func (UnimplementedAnimeMovieServiceServer) mustEmbedUnimplementedAnimeMovieServiceServer() {}

// UnsafeAnimeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeMovieServiceServer will
// result in compilation errors.
type UnsafeAnimeMovieServiceServer interface {
	mustEmbedUnimplementedAnimeMovieServiceServer()
}

func RegisterAnimeMovieServiceServer(s grpc.ServiceRegistrar, srv AnimeMovieServiceServer) {
	s.RegisterService(&AnimeMovieService_ServiceDesc, srv)
}

func _AnimeMovieService_CreateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovie(ctx, req.(*CreateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieMetas(ctx, req.(*CreateAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieInfo(ctx, req.(*CreateAnimeMovieInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieResource(ctx, req.(*CreateAnimeMovieResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieLink(ctx, req.(*CreateAnimeMovieLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieImage(ctx, req.(*CreateAnimeMovieImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTrailer(ctx, req.(*CreateAnimeMovieTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTitle(ctx, req.(*CreateAnimeMovieTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieServer(ctx, req.(*CreateAnimeMovieServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieData(ctx, req.(*CreateAnimeMovieDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieTag(ctx, req.(*CreateAnimeMovieTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_CreateAnimeMovieCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnimeMovieCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_CreateAnimeMovieCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).CreateAnimeMovieCharacters(ctx, req.(*CreateAnimeMovieCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_UpdateAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).UpdateAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_UpdateAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).UpdateAnimeMovie(ctx, req.(*UpdateAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_GetAllAnimeMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnimeMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).GetAllAnimeMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_GetAllAnimeMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).GetAllAnimeMovies(ctx, req.(*GetAllAnimeMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_GetAllAnimeMovieMetas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllAnimeMovieMetasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).GetAllAnimeMovieMetas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_GetAllAnimeMovieMetas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).GetAllAnimeMovieMetas(ctx, req.(*GetAllAnimeMovieMetasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_GetFullAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).GetFullAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_GetFullAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).GetFullAnimeMovie(ctx, req.(*GetFullAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_GetAnimeMovieImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimeMovieImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).GetAnimeMovieImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_GetAnimeMovieImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).GetAnimeMovieImages(ctx, req.(*GetAnimeMovieImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_GetAnimeMovieCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnimeMovieCharactersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).GetAnimeMovieCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_GetAnimeMovieCharacters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).GetAnimeMovieCharacters(ctx, req.(*GetAnimeMovieCharactersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeMovieService_QueryAnimeMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAnimeMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeMovieServiceServer).QueryAnimeMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeMovieService_QueryAnimeMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeMovieServiceServer).QueryAnimeMovie(ctx, req.(*QueryAnimeMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeMovieService_ServiceDesc is the grpc.ServiceDesc for AnimeMovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeMovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ampbv1.AnimeMovieService",
	HandlerType: (*AnimeMovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAnimeMovie",
			Handler:    _AnimeMovieService_CreateAnimeMovie_Handler,
		},
		{
			MethodName: "CreateAnimeMovieMetas",
			Handler:    _AnimeMovieService_CreateAnimeMovieMetas_Handler,
		},
		{
			MethodName: "CreateAnimeMovieInfo",
			Handler:    _AnimeMovieService_CreateAnimeMovieInfo_Handler,
		},
		{
			MethodName: "CreateAnimeMovieResource",
			Handler:    _AnimeMovieService_CreateAnimeMovieResource_Handler,
		},
		{
			MethodName: "CreateAnimeMovieLink",
			Handler:    _AnimeMovieService_CreateAnimeMovieLink_Handler,
		},
		{
			MethodName: "CreateAnimeMovieImage",
			Handler:    _AnimeMovieService_CreateAnimeMovieImage_Handler,
		},
		{
			MethodName: "CreateAnimeMovieTrailer",
			Handler:    _AnimeMovieService_CreateAnimeMovieTrailer_Handler,
		},
		{
			MethodName: "CreateAnimeMovieTitle",
			Handler:    _AnimeMovieService_CreateAnimeMovieTitle_Handler,
		},
		{
			MethodName: "CreateAnimeMovieServer",
			Handler:    _AnimeMovieService_CreateAnimeMovieServer_Handler,
		},
		{
			MethodName: "CreateAnimeMovieData",
			Handler:    _AnimeMovieService_CreateAnimeMovieData_Handler,
		},
		{
			MethodName: "CreateAnimeMovieTag",
			Handler:    _AnimeMovieService_CreateAnimeMovieTag_Handler,
		},
		{
			MethodName: "CreateAnimeMovieCharacters",
			Handler:    _AnimeMovieService_CreateAnimeMovieCharacters_Handler,
		},
		{
			MethodName: "UpdateAnimeMovie",
			Handler:    _AnimeMovieService_UpdateAnimeMovie_Handler,
		},
		{
			MethodName: "GetAllAnimeMovies",
			Handler:    _AnimeMovieService_GetAllAnimeMovies_Handler,
		},
		{
			MethodName: "GetAllAnimeMovieMetas",
			Handler:    _AnimeMovieService_GetAllAnimeMovieMetas_Handler,
		},
		{
			MethodName: "GetFullAnimeMovie",
			Handler:    _AnimeMovieService_GetFullAnimeMovie_Handler,
		},
		{
			MethodName: "GetAnimeMovieImages",
			Handler:    _AnimeMovieService_GetAnimeMovieImages_Handler,
		},
		{
			MethodName: "GetAnimeMovieCharacters",
			Handler:    _AnimeMovieService_GetAnimeMovieCharacters_Handler,
		},
		{
			MethodName: "QueryAnimeMovie",
			Handler:    _AnimeMovieService_QueryAnimeMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/ampb/service_anime_movie.proto",
}
