// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: v1/ampb/rpc_get_optional_full_anime_movie.proto

package ampbv1

import (
	apb "github.com/dj-yacine-flutter/gojo/pb/v1/apb"
	nfpb "github.com/dj-yacine-flutter/gojo/pb/v1/nfpb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetOptionalFullAnimeMovieRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimeID       int64 `protobuf:"varint,1,opt,name=animeID,proto3" json:"animeID,omitempty"`
	LanguageID    int32 `protobuf:"varint,2,opt,name=languageID,proto3" json:"languageID,omitempty"`
	WithResources *bool `protobuf:"varint,3,opt,name=withResources,proto3,oneof" json:"withResources,omitempty"`
	WithGenres    *bool `protobuf:"varint,4,opt,name=withGenres,proto3,oneof" json:"withGenres,omitempty"`
	WithStudios   *bool `protobuf:"varint,5,opt,name=withStudios,proto3,oneof" json:"withStudios,omitempty"`
	WithLinks     *bool `protobuf:"varint,6,opt,name=withLinks,proto3,oneof" json:"withLinks,omitempty"`
	WithTags      *bool `protobuf:"varint,7,opt,name=withTags,proto3,oneof" json:"withTags,omitempty"`
	WithImages    *bool `protobuf:"varint,8,opt,name=withImages,proto3,oneof" json:"withImages,omitempty"`
	WithTrailer   *bool `protobuf:"varint,9,opt,name=withTrailer,proto3,oneof" json:"withTrailer,omitempty"`
	WithServer    *bool `protobuf:"varint,10,opt,name=withServer,proto3,oneof" json:"withServer,omitempty"`
	WithSub       *bool `protobuf:"varint,11,opt,name=withSub,proto3,oneof" json:"withSub,omitempty"`
	WithDub       *bool `protobuf:"varint,12,opt,name=withDub,proto3,oneof" json:"withDub,omitempty"`
}

func (x *GetOptionalFullAnimeMovieRequest) Reset() {
	*x = GetOptionalFullAnimeMovieRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionalFullAnimeMovieRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionalFullAnimeMovieRequest) ProtoMessage() {}

func (x *GetOptionalFullAnimeMovieRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionalFullAnimeMovieRequest.ProtoReflect.Descriptor instead.
func (*GetOptionalFullAnimeMovieRequest) Descriptor() ([]byte, []int) {
	return file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescGZIP(), []int{0}
}

func (x *GetOptionalFullAnimeMovieRequest) GetAnimeID() int64 {
	if x != nil {
		return x.AnimeID
	}
	return 0
}

func (x *GetOptionalFullAnimeMovieRequest) GetLanguageID() int32 {
	if x != nil {
		return x.LanguageID
	}
	return 0
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithResources() bool {
	if x != nil && x.WithResources != nil {
		return *x.WithResources
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithGenres() bool {
	if x != nil && x.WithGenres != nil {
		return *x.WithGenres
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithStudios() bool {
	if x != nil && x.WithStudios != nil {
		return *x.WithStudios
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithLinks() bool {
	if x != nil && x.WithLinks != nil {
		return *x.WithLinks
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithTags() bool {
	if x != nil && x.WithTags != nil {
		return *x.WithTags
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithImages() bool {
	if x != nil && x.WithImages != nil {
		return *x.WithImages
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithTrailer() bool {
	if x != nil && x.WithTrailer != nil {
		return *x.WithTrailer
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithServer() bool {
	if x != nil && x.WithServer != nil {
		return *x.WithServer
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithSub() bool {
	if x != nil && x.WithSub != nil {
		return *x.WithSub
	}
	return false
}

func (x *GetOptionalFullAnimeMovieRequest) GetWithDub() bool {
	if x != nil && x.WithDub != nil {
		return *x.WithDub
	}
	return false
}

type GetOptionalFullAnimeMovieResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnimeMovie     *AnimeMovieResponse         `protobuf:"bytes,1,opt,name=animeMovie,proto3" json:"animeMovie,omitempty"`
	AnimeMeta      *nfpb.AnimeMetaResponse     `protobuf:"bytes,2,opt,name=animeMeta,proto3" json:"animeMeta,omitempty"`
	AnimeResources *apb.AnimeResourceResponse  `protobuf:"bytes,3,opt,name=animeResources,proto3,oneof" json:"animeResources,omitempty"`
	AnimeGenres    []*nfpb.Genre               `protobuf:"bytes,4,rep,name=animeGenres,proto3" json:"animeGenres,omitempty"`
	AnimeStudios   []*nfpb.Studio              `protobuf:"bytes,5,rep,name=animeStudios,proto3" json:"animeStudios,omitempty"`
	AnimeLinks     *apb.AnimeLinkResponse      `protobuf:"bytes,6,opt,name=animeLinks,proto3,oneof" json:"animeLinks,omitempty"`
	AnimeTags      []*apb.AnimeTag             `protobuf:"bytes,7,rep,name=animeTags,proto3" json:"animeTags,omitempty"`
	AnimeImages    *apb.AnimeImageResponse     `protobuf:"bytes,8,opt,name=animeImages,proto3,oneof" json:"animeImages,omitempty"`
	AnimeTrailers  []*apb.AnimeTrailerResponse `protobuf:"bytes,9,rep,name=animeTrailers,proto3" json:"animeTrailers,omitempty"`
	ServerID       *int64                      `protobuf:"varint,10,opt,name=serverID,proto3,oneof" json:"serverID,omitempty"`
	Sub            *apb.AnimeSubDataResponse   `protobuf:"bytes,11,opt,name=sub,proto3,oneof" json:"sub,omitempty"`
	Dub            *apb.AnimeDubDataResponse   `protobuf:"bytes,12,opt,name=dub,proto3,oneof" json:"dub,omitempty"`
}

func (x *GetOptionalFullAnimeMovieResponse) Reset() {
	*x = GetOptionalFullAnimeMovieResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOptionalFullAnimeMovieResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOptionalFullAnimeMovieResponse) ProtoMessage() {}

func (x *GetOptionalFullAnimeMovieResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOptionalFullAnimeMovieResponse.ProtoReflect.Descriptor instead.
func (*GetOptionalFullAnimeMovieResponse) Descriptor() ([]byte, []int) {
	return file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescGZIP(), []int{1}
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeMovie() *AnimeMovieResponse {
	if x != nil {
		return x.AnimeMovie
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeMeta() *nfpb.AnimeMetaResponse {
	if x != nil {
		return x.AnimeMeta
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeResources() *apb.AnimeResourceResponse {
	if x != nil {
		return x.AnimeResources
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeGenres() []*nfpb.Genre {
	if x != nil {
		return x.AnimeGenres
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeStudios() []*nfpb.Studio {
	if x != nil {
		return x.AnimeStudios
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeLinks() *apb.AnimeLinkResponse {
	if x != nil {
		return x.AnimeLinks
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeTags() []*apb.AnimeTag {
	if x != nil {
		return x.AnimeTags
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeImages() *apb.AnimeImageResponse {
	if x != nil {
		return x.AnimeImages
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetAnimeTrailers() []*apb.AnimeTrailerResponse {
	if x != nil {
		return x.AnimeTrailers
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetServerID() int64 {
	if x != nil && x.ServerID != nil {
		return *x.ServerID
	}
	return 0
}

func (x *GetOptionalFullAnimeMovieResponse) GetSub() *apb.AnimeSubDataResponse {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *GetOptionalFullAnimeMovieResponse) GetDub() *apb.AnimeDubDataResponse {
	if x != nil {
		return x.Dub
	}
	return nil
}

var File_v1_ampb_rpc_get_optional_full_anime_movie_proto protoreflect.FileDescriptor

var file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x76, 0x31, 0x2e, 0x61, 0x6d, 0x70, 0x62, 0x76, 0x31, 0x1a, 0x1d, 0x76, 0x31,
	0x2f, 0x61, 0x6d, 0x70, 0x62, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x6f, 0x76, 0x69, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x62, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x70, 0x62, 0x2f,
	0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x31, 0x2f, 0x6e, 0x66, 0x70, 0x62, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x76, 0x31, 0x2f, 0x6e, 0x66, 0x70, 0x62,
	0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x62, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x62, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x62, 0x2f, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x62, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x62, 0x2f, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x04, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x6f,
	0x76, 0x69, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x77,
	0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x77,
	0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x07, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x77, 0x69, 0x74, 0x68, 0x44, 0x75, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x09, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x44, 0x75, 0x62, 0x88, 0x01, 0x01, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x53, 0x75, 0x62, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x44, 0x75, 0x62,
	0x22, 0xb4, 0x06, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x75, 0x6c, 0x6c, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4d,
	0x6f, 0x76, 0x69, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x6d, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x6f, 0x76, 0x69,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x6e, 0x69, 0x6d, 0x65,
	0x4d, 0x6f, 0x76, 0x69, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x4c, 0x0a, 0x0e, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x31, 0x2e, 0x6e, 0x66, 0x70, 0x62, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x47, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x75, 0x64,
	0x69, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x6e,
	0x66, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x52, 0x0c, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x75, 0x64, 0x69, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x61, 0x6e,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x01, 0x52, 0x0a, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65,
	0x54, 0x61, 0x67, 0x52, 0x09, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x43,
	0x0a, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x02, 0x52, 0x0b, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0d, 0x61, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x61, 0x6e, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x03, 0x73, 0x75,
	0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x62,
	0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x04, 0x52, 0x03, 0x73, 0x75, 0x62, 0x88, 0x01,
	0x01, 0x12, 0x35, 0x0a, 0x03, 0x64, 0x75, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x70, 0x62, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x69, 0x6d, 0x65, 0x44,
	0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x05,
	0x52, 0x03, 0x64, 0x75, 0x62, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x6e, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x61, 0x6e, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61,
	0x6e, 0x69, 0x6d, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x75, 0x62, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x64, 0x75, 0x62, 0x42, 0x35, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x6a, 0x2d, 0x79, 0x61, 0x63, 0x69, 0x6e, 0x65, 0x2d,
	0x66, 0x6c, 0x75, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x6f, 0x6a, 0x6f, 0x2f, 0x70, 0x62, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x6d, 0x70, 0x62, 0x3b, 0x61, 0x6d, 0x70, 0x62, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescOnce sync.Once
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescData = file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDesc
)

func file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescGZIP() []byte {
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescOnce.Do(func() {
		file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescData)
	})
	return file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDescData
}

var file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_v1_ampb_rpc_get_optional_full_anime_movie_proto_goTypes = []interface{}{
	(*GetOptionalFullAnimeMovieRequest)(nil),  // 0: v1.ampbv1.GetOptionalFullAnimeMovieRequest
	(*GetOptionalFullAnimeMovieResponse)(nil), // 1: v1.ampbv1.GetOptionalFullAnimeMovieResponse
	(*AnimeMovieResponse)(nil),                // 2: v1.ampbv1.AnimeMovieResponse
	(*nfpb.AnimeMetaResponse)(nil),            // 3: v1.nfpbv1.AnimeMetaResponse
	(*apb.AnimeResourceResponse)(nil),         // 4: v1.apbv1.AnimeResourceResponse
	(*nfpb.Genre)(nil),                        // 5: v1.nfpbv1.Genre
	(*nfpb.Studio)(nil),                       // 6: v1.nfpbv1.Studio
	(*apb.AnimeLinkResponse)(nil),             // 7: v1.apbv1.AnimeLinkResponse
	(*apb.AnimeTag)(nil),                      // 8: v1.apbv1.AnimeTag
	(*apb.AnimeImageResponse)(nil),            // 9: v1.apbv1.AnimeImageResponse
	(*apb.AnimeTrailerResponse)(nil),          // 10: v1.apbv1.AnimeTrailerResponse
	(*apb.AnimeSubDataResponse)(nil),          // 11: v1.apbv1.AnimeSubDataResponse
	(*apb.AnimeDubDataResponse)(nil),          // 12: v1.apbv1.AnimeDubDataResponse
}
var file_v1_ampb_rpc_get_optional_full_anime_movie_proto_depIdxs = []int32{
	2,  // 0: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeMovie:type_name -> v1.ampbv1.AnimeMovieResponse
	3,  // 1: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeMeta:type_name -> v1.nfpbv1.AnimeMetaResponse
	4,  // 2: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeResources:type_name -> v1.apbv1.AnimeResourceResponse
	5,  // 3: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeGenres:type_name -> v1.nfpbv1.Genre
	6,  // 4: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeStudios:type_name -> v1.nfpbv1.Studio
	7,  // 5: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeLinks:type_name -> v1.apbv1.AnimeLinkResponse
	8,  // 6: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeTags:type_name -> v1.apbv1.AnimeTag
	9,  // 7: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeImages:type_name -> v1.apbv1.AnimeImageResponse
	10, // 8: v1.ampbv1.GetOptionalFullAnimeMovieResponse.animeTrailers:type_name -> v1.apbv1.AnimeTrailerResponse
	11, // 9: v1.ampbv1.GetOptionalFullAnimeMovieResponse.sub:type_name -> v1.apbv1.AnimeSubDataResponse
	12, // 10: v1.ampbv1.GetOptionalFullAnimeMovieResponse.dub:type_name -> v1.apbv1.AnimeDubDataResponse
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_v1_ampb_rpc_get_optional_full_anime_movie_proto_init() }
func file_v1_ampb_rpc_get_optional_full_anime_movie_proto_init() {
	if File_v1_ampb_rpc_get_optional_full_anime_movie_proto != nil {
		return
	}
	file_v1_ampb_msg_anime_movie_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionalFullAnimeMovieRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOptionalFullAnimeMovieResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_ampb_rpc_get_optional_full_anime_movie_proto_goTypes,
		DependencyIndexes: file_v1_ampb_rpc_get_optional_full_anime_movie_proto_depIdxs,
		MessageInfos:      file_v1_ampb_rpc_get_optional_full_anime_movie_proto_msgTypes,
	}.Build()
	File_v1_ampb_rpc_get_optional_full_anime_movie_proto = out.File
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_rawDesc = nil
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_goTypes = nil
	file_v1_ampb_rpc_get_optional_full_anime_movie_proto_depIdxs = nil
}
