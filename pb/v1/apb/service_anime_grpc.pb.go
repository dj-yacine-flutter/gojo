// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: v1/apb/service_anime.proto

package apbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnimeService_UpdateAnimeCharacter_FullMethodName = "/v1.apbv1.AnimeService/UpdateAnimeCharacter"
	AnimeService_UpdateAnimeLink_FullMethodName      = "/v1.apbv1.AnimeService/UpdateAnimeLink"
	AnimeService_UpdateAnimeResource_FullMethodName  = "/v1.apbv1.AnimeService/UpdateAnimeResource"
	AnimeService_UpdateAnimeVideo_FullMethodName     = "/v1.apbv1.AnimeService/UpdateAnimeVideo"
	AnimeService_UpdateAnimeTorrent_FullMethodName   = "/v1.apbv1.AnimeService/UpdateAnimeTorrent"
	AnimeService_UpdateAnimeTitle_FullMethodName     = "/v1.apbv1.AnimeService/UpdateAnimeTitle"
	AnimeService_UpdateAnimeTag_FullMethodName       = "/v1.apbv1.AnimeService/UpdateAnimeTag"
	AnimeService_UpdateAnimeTrailer_FullMethodName   = "/v1.apbv1.AnimeService/UpdateAnimeTrailer"
	AnimeService_UpdateAnimeImage_FullMethodName     = "/v1.apbv1.AnimeService/UpdateAnimeImage"
)

// AnimeServiceClient is the client API for AnimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnimeServiceClient interface {
	UpdateAnimeCharacter(ctx context.Context, in *UpdateAnimeCharacterRequest, opts ...grpc.CallOption) (*UpdateAnimeCharacterResponse, error)
	UpdateAnimeLink(ctx context.Context, in *UpdateAnimeLinkRequest, opts ...grpc.CallOption) (*UpdateAnimeLinkResponse, error)
	UpdateAnimeResource(ctx context.Context, in *UpdateAnimeResourceRequest, opts ...grpc.CallOption) (*UpdateAnimeResourceResponse, error)
	UpdateAnimeVideo(ctx context.Context, in *UpdateAnimeVideoRequest, opts ...grpc.CallOption) (*UpdateAnimeVideoResponse, error)
	UpdateAnimeTorrent(ctx context.Context, in *UpdateAnimeTorrentRequest, opts ...grpc.CallOption) (*UpdateAnimeTorrentResponse, error)
	UpdateAnimeTitle(ctx context.Context, in *UpdateAnimeTitleRequest, opts ...grpc.CallOption) (*UpdateAnimeTitleResponse, error)
	UpdateAnimeTag(ctx context.Context, in *UpdateAnimeTagRequest, opts ...grpc.CallOption) (*UpdateAnimeTagResponse, error)
	UpdateAnimeTrailer(ctx context.Context, in *UpdateAnimeTrailerRequest, opts ...grpc.CallOption) (*UpdateAnimeTrailerResponse, error)
	UpdateAnimeImage(ctx context.Context, in *UpdateAnimeImageRequest, opts ...grpc.CallOption) (*UpdateAnimeImageResponse, error)
}

type animeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnimeServiceClient(cc grpc.ClientConnInterface) AnimeServiceClient {
	return &animeServiceClient{cc}
}

func (c *animeServiceClient) UpdateAnimeCharacter(ctx context.Context, in *UpdateAnimeCharacterRequest, opts ...grpc.CallOption) (*UpdateAnimeCharacterResponse, error) {
	out := new(UpdateAnimeCharacterResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeCharacter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeLink(ctx context.Context, in *UpdateAnimeLinkRequest, opts ...grpc.CallOption) (*UpdateAnimeLinkResponse, error) {
	out := new(UpdateAnimeLinkResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeResource(ctx context.Context, in *UpdateAnimeResourceRequest, opts ...grpc.CallOption) (*UpdateAnimeResourceResponse, error) {
	out := new(UpdateAnimeResourceResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeVideo(ctx context.Context, in *UpdateAnimeVideoRequest, opts ...grpc.CallOption) (*UpdateAnimeVideoResponse, error) {
	out := new(UpdateAnimeVideoResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeTorrent(ctx context.Context, in *UpdateAnimeTorrentRequest, opts ...grpc.CallOption) (*UpdateAnimeTorrentResponse, error) {
	out := new(UpdateAnimeTorrentResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeTorrent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeTitle(ctx context.Context, in *UpdateAnimeTitleRequest, opts ...grpc.CallOption) (*UpdateAnimeTitleResponse, error) {
	out := new(UpdateAnimeTitleResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeTag(ctx context.Context, in *UpdateAnimeTagRequest, opts ...grpc.CallOption) (*UpdateAnimeTagResponse, error) {
	out := new(UpdateAnimeTagResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeTrailer(ctx context.Context, in *UpdateAnimeTrailerRequest, opts ...grpc.CallOption) (*UpdateAnimeTrailerResponse, error) {
	out := new(UpdateAnimeTrailerResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeTrailer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *animeServiceClient) UpdateAnimeImage(ctx context.Context, in *UpdateAnimeImageRequest, opts ...grpc.CallOption) (*UpdateAnimeImageResponse, error) {
	out := new(UpdateAnimeImageResponse)
	err := c.cc.Invoke(ctx, AnimeService_UpdateAnimeImage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnimeServiceServer is the server API for AnimeService service.
// All implementations must embed UnimplementedAnimeServiceServer
// for forward compatibility
type AnimeServiceServer interface {
	UpdateAnimeCharacter(context.Context, *UpdateAnimeCharacterRequest) (*UpdateAnimeCharacterResponse, error)
	UpdateAnimeLink(context.Context, *UpdateAnimeLinkRequest) (*UpdateAnimeLinkResponse, error)
	UpdateAnimeResource(context.Context, *UpdateAnimeResourceRequest) (*UpdateAnimeResourceResponse, error)
	UpdateAnimeVideo(context.Context, *UpdateAnimeVideoRequest) (*UpdateAnimeVideoResponse, error)
	UpdateAnimeTorrent(context.Context, *UpdateAnimeTorrentRequest) (*UpdateAnimeTorrentResponse, error)
	UpdateAnimeTitle(context.Context, *UpdateAnimeTitleRequest) (*UpdateAnimeTitleResponse, error)
	UpdateAnimeTag(context.Context, *UpdateAnimeTagRequest) (*UpdateAnimeTagResponse, error)
	UpdateAnimeTrailer(context.Context, *UpdateAnimeTrailerRequest) (*UpdateAnimeTrailerResponse, error)
	UpdateAnimeImage(context.Context, *UpdateAnimeImageRequest) (*UpdateAnimeImageResponse, error)
	mustEmbedUnimplementedAnimeServiceServer()
}

// UnimplementedAnimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnimeServiceServer struct {
}

func (UnimplementedAnimeServiceServer) UpdateAnimeCharacter(context.Context, *UpdateAnimeCharacterRequest) (*UpdateAnimeCharacterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeCharacter not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeLink(context.Context, *UpdateAnimeLinkRequest) (*UpdateAnimeLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeLink not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeResource(context.Context, *UpdateAnimeResourceRequest) (*UpdateAnimeResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeResource not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeVideo(context.Context, *UpdateAnimeVideoRequest) (*UpdateAnimeVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeVideo not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeTorrent(context.Context, *UpdateAnimeTorrentRequest) (*UpdateAnimeTorrentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeTorrent not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeTitle(context.Context, *UpdateAnimeTitleRequest) (*UpdateAnimeTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeTitle not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeTag(context.Context, *UpdateAnimeTagRequest) (*UpdateAnimeTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeTag not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeTrailer(context.Context, *UpdateAnimeTrailerRequest) (*UpdateAnimeTrailerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeTrailer not implemented")
}
func (UnimplementedAnimeServiceServer) UpdateAnimeImage(context.Context, *UpdateAnimeImageRequest) (*UpdateAnimeImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnimeImage not implemented")
}
func (UnimplementedAnimeServiceServer) mustEmbedUnimplementedAnimeServiceServer() {}

// UnsafeAnimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnimeServiceServer will
// result in compilation errors.
type UnsafeAnimeServiceServer interface {
	mustEmbedUnimplementedAnimeServiceServer()
}

func RegisterAnimeServiceServer(s grpc.ServiceRegistrar, srv AnimeServiceServer) {
	s.RegisterService(&AnimeService_ServiceDesc, srv)
}

func _AnimeService_UpdateAnimeCharacter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeCharacterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeCharacter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeCharacter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeCharacter(ctx, req.(*UpdateAnimeCharacterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeLink(ctx, req.(*UpdateAnimeLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeResource(ctx, req.(*UpdateAnimeResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeVideo(ctx, req.(*UpdateAnimeVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeTorrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeTorrentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeTorrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeTorrent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeTorrent(ctx, req.(*UpdateAnimeTorrentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeTitle(ctx, req.(*UpdateAnimeTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeTag(ctx, req.(*UpdateAnimeTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeTrailer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeTrailerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeTrailer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeTrailer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeTrailer(ctx, req.(*UpdateAnimeTrailerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnimeService_UpdateAnimeImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnimeImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnimeServiceServer).UpdateAnimeImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnimeService_UpdateAnimeImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnimeServiceServer).UpdateAnimeImage(ctx, req.(*UpdateAnimeImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnimeService_ServiceDesc is the grpc.ServiceDesc for AnimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.apbv1.AnimeService",
	HandlerType: (*AnimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAnimeCharacter",
			Handler:    _AnimeService_UpdateAnimeCharacter_Handler,
		},
		{
			MethodName: "UpdateAnimeLink",
			Handler:    _AnimeService_UpdateAnimeLink_Handler,
		},
		{
			MethodName: "UpdateAnimeResource",
			Handler:    _AnimeService_UpdateAnimeResource_Handler,
		},
		{
			MethodName: "UpdateAnimeVideo",
			Handler:    _AnimeService_UpdateAnimeVideo_Handler,
		},
		{
			MethodName: "UpdateAnimeTorrent",
			Handler:    _AnimeService_UpdateAnimeTorrent_Handler,
		},
		{
			MethodName: "UpdateAnimeTitle",
			Handler:    _AnimeService_UpdateAnimeTitle_Handler,
		},
		{
			MethodName: "UpdateAnimeTag",
			Handler:    _AnimeService_UpdateAnimeTag_Handler,
		},
		{
			MethodName: "UpdateAnimeTrailer",
			Handler:    _AnimeService_UpdateAnimeTrailer_Handler,
		},
		{
			MethodName: "UpdateAnimeImage",
			Handler:    _AnimeService_UpdateAnimeImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/apb/service_anime.proto",
}
