syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "rpc_create_anime_movie.proto";
import "rpc_create_genres.proto";
import "rpc_create_studios.proto";
import "rpc_create_languages.proto";
import "rpc_create_anime_movie_meta.proto";

import "rpc_create_user.proto";
import "rpc_login_user.proto";
import "rpc_update_user.proto";
import "rpc_verify_email.proto";
import "rpc_renew_token.proto";

import "rpc_get_all_genres.proto";
import "rpc_get_all_studios.proto";
import "rpc_get_all_languages.proto";
import "rpc_get_all_anime_metas.proto";

import "rpc_add_info_anime_movie.proto";

option go_package = "github.com/dj-yacine-flutter/gojo/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Gojoj API";
    version : "1.3";
    contact : {
      name: "Dj Yacine";
      url:  "https://github.com/dj-yacine-flutter";
    };
  };
};

service Gojo {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post : "/v1/user/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new user";
      summary:  "Create new user";
    };
  }
  rpc LoginUser(LoginUserRequest) returns (LoginUserResponse) {
    option (google.api.http) = {
      post : "/v1/user/login"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to login user and get access token & refresh token";
      summary:  "Login user";
    };
  }
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch : "/v1/user/update"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to update user email or fullName or password using the username";
      summary: "Update user";
    };
  }
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      get : "/v1/verify_email"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to verify user's email address";
      summary:  "Verify email";
    };
  }
  rpc RenewToken(RenewTokenRequest) returns (RenewTokenResponse) {
    option (google.api.http) = {
      post : "/v1/renew_token"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to renew user's access token";
      summary:  "Renew access token";
    };
  }
  rpc GetAllGenres(GetAllGenresRequest) returns (GetAllGenresResponse) {
    option (google.api.http) = {
      get : "/v1/anime/genre"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime genres";
      summary:  "Get all anime genres";
    };
  }
  rpc GetAllStudios(GetAllStudiosRequest) returns (GetAllStudiosResponse) {
    option (google.api.http) = {
      get : "/v1/anime/studio"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime studios";
      summary:  "Get all anime studios";
    };
  }
  rpc GetAllLanguages(GetAllLanguagesRequest) returns (GetAllLanguagesResponse) {
    option (google.api.http) = {
      get : "/v1/language"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all app languages";
      summary:  "Get all app languages";
    };
  }
  rpc GetAllAnimeMetas(GetAllAnimeMetasRequest) returns (GetAllAnimeMetasResponse) {
    option (google.api.http) = {
      get : "/v1/anime/meta"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime metas";
      summary:  "Get all anime metas";
    };
  }
  rpc CreateAnimeMovie(CreateAnimeMovieRequest) returns (CreateAnimeMovieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/movie/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime movie";
      summary:  "Create new anime movie";
    };
  }
  rpc CreateGenres(CreateGenresRequest) returns (CreateGenresResponse) {
    option (google.api.http) = {
      post : "/v1/anime/genre/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new genres";
      summary:  "Create new genres";
    };
  }
  rpc CreateStudios(CreateStudiosRequest) returns (CreateStudiosResponse) {
    option (google.api.http) = {
      post : "/v1/anime/studio/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new studios";
      summary:  "Create new studios";
    };
  }
  rpc CreateLanguages(CreateLanguagesRequest) returns (CreateLanguagesResponse) {
    option (google.api.http) = {
      post : "/v1/anime/language/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new languages";
      summary:  "Create new languages";
    };
  }
  rpc CreateAnimeMovieMeta(CreateAnimeMovieMetaRequest) returns (CreateAnimeMovieMetaResponse) {
    option (google.api.http) = {
      post : "/v1/anime/movie/meta/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime meta";
      summary:  "Create new anime meta";
    };
  }
  rpc AddInfoToAnimeMovie(AddInfoAnimeMovieRequest) returns (AddInfoAnimeMovieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/info"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to add info to anime movie like studios and genres";
      summary:  "add info to anime movie";
    };
  }
}