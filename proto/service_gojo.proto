syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "nfpb/rpc_create_genres.proto";
import "nfpb/rpc_create_studios.proto";
import "nfpb/rpc_create_languages.proto";
import "nfpb/rpc_get_all_genres.proto";
import "nfpb/rpc_get_all_studios.proto";
import "nfpb/rpc_get_all_languages.proto";


import "ampb/rpc_create_anime_movie.proto";
import "ampb/rpc_create_anime_movie_metas.proto";
import "ampb/rpc_get_all_anime_movie_metas.proto";
import "ampb/rpc_get_all_anime_movies.proto";
import "ampb/rpc_add_info_anime_movie.proto";
import "ampb/rpc_update_anime_movie.proto";


import "aspb/rpc_create_anime_serie.proto";
import "aspb/rpc_create_anime_serie_metas.proto";
import "aspb/rpc_get_all_anime_serie_metas.proto";
import "aspb/rpc_get_all_anime_series.proto";
import "aspb/rpc_add_info_anime_serie.proto";
import "aspb/rpc_update_anime_serie.proto";


import "uspb/rpc_create_user.proto";
import "uspb/rpc_login_user.proto";
import "uspb/rpc_update_user.proto";
import "uspb/rpc_verify_email.proto";
import "uspb/rpc_renew_tokens.proto";


option go_package = "github.com/dj-yacine-flutter/gojo/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {
    title : "Gojo API";
    version : "1.4";
    contact : {
      name: "Dj Yacine";
      url:  "https://github.com/dj-yacine-flutter/gojo";
    };
  };
};

service Gojo {
  rpc CreateUser(uspb.CreateUserRequest) returns (uspb.CreateUserResponse) {
    option (google.api.http) = {
      post : "/v1/user/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new user";
      summary:  "Create new user";
    };
  }
  rpc LoginUser(uspb.LoginUserRequest) returns (uspb.LoginUserResponse) {
    option (google.api.http) = {
      post : "/v1/user/login"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to login user and get access token & refresh token";
      summary:  "Login user";
    };
  }
  rpc UpdateUser(uspb.UpdateUserRequest) returns (uspb.UpdateUserResponse) {
    option (google.api.http) = {
      patch : "/v1/user/update"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to update user email or fullName or password using the username";
      summary: "Update user";
    };
  }
  rpc VerifyEmail(uspb.VerifyEmailRequest) returns (uspb.VerifyEmailResponse) {
    option (google.api.http) = {
      get : "/v1/verify_email"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to verify user's email address";
      summary:  "Verify email";
    };
  }
  rpc RenewTokens(uspb.RenewTokensRequest) returns (uspb.RenewTokensResponse) {
    option (google.api.http) = {
      post : "/v1/renew_tokens"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to renew user's access token & refresh token";
      summary:  "Renew access token & refresh token";
    };
  }










  rpc CreateGenres(nfpb.CreateGenresRequest) returns (nfpb.CreateGenresResponse) {
    option (google.api.http) = {
      post : "/v1/anime/genre/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new genres";
      summary:  "Create new genres";
    };
  }
  rpc CreateStudios(nfpb.CreateStudiosRequest) returns (nfpb.CreateStudiosResponse) {
    option (google.api.http) = {
      post : "/v1/anime/studio/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new studios";
      summary:  "Create new studios";
    };
  }
  rpc CreateLanguages(nfpb.CreateLanguagesRequest) returns (nfpb.CreateLanguagesResponse) {
    option (google.api.http) = {
      post : "/v1/anime/language/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new languages";
      summary:  "Create new languages";
    };
  }
  rpc GetAllGenres(nfpb.GetAllGenresRequest) returns (nfpb.GetAllGenresResponse) {
    option (google.api.http) = {
      get : "/v1/anime/genre"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime genres";
      summary:  "Get all anime genres";
    };
  }
  rpc GetAllStudios(nfpb.GetAllStudiosRequest) returns (nfpb.GetAllStudiosResponse) {
    option (google.api.http) = {
      get : "/v1/anime/studio"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime studios";
      summary:  "Get all anime studios";
    };
  }
  rpc GetAllLanguages(nfpb.GetAllLanguagesRequest) returns (nfpb.GetAllLanguagesResponse) {
    option (google.api.http) = {
      get : "/v1/language"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all app languages";
      summary:  "Get all app languages";
    };
  }









  rpc CreateAnimeMovie(ampb.CreateAnimeMovieRequest) returns (ampb.CreateAnimeMovieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/movie/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime movie";
      summary:  "Create new anime movie";
    };
  }
  rpc CreateAnimeMovieMetas(ampb.CreateAnimeMovieMetasRequest) returns (ampb.CreateAnimeMovieMetasResponse) {
    option (google.api.http) = {
      post : "/v1/anime/movie/meta/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime movie meta";
      summary:  "Create new anime movie meta";
    };
  }
  rpc GetAllAnimeMovies(ampb.GetAllAnimeMoviesRequest) returns (ampb.GetAllAnimeMoviesResponse) {
    option (google.api.http) = {
      get : "/v1/anime/movie"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime movies or by year";
      summary:  "list anime movies";
    };
  }
  rpc GetAllAnimeMovieMetas(ampb.GetAllAnimeMovieMetasRequest) returns (ampb.GetAllAnimeMovieMetasResponse) {
    option (google.api.http) = {
      get : "/v1/anime/movie/meta"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime movie metas";
      summary:  "Get all anime movie metas";
    };
  }
  rpc AddInfoToAnimeMovie(ampb.AddInfoAnimeMovieRequest) returns (ampb.AddInfoAnimeMovieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/movie/info"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to add info to anime movie like studios and genres";
      summary:  "add info to anime movie";
    };
  }
  rpc UpdateAnimeMovie(ampb.UpdateAnimeMovieRequest) returns (ampb.UpdateAnimeMovieResponse) {
    option (google.api.http) = {
      patch : "/v1/movie/update"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to update all anime movie fields using the ID";
      summary: "Update anime movie";
    };
  }









  rpc CreateAnimeSerie(aspb.CreateAnimeSerieRequest) returns (aspb.CreateAnimeSerieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/serie/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime serie";
      summary:  "Create new anime serie";
    };
  }
  rpc CreateAnimeSerieMetas(aspb.CreateAnimeSerieMetasRequest) returns (aspb.CreateAnimeSerieMetasResponse) {
    option (google.api.http) = {
      post : "/v1/anime/serie/meta/create"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to create a new anime serie meta";
      summary:  "Create new anime serie meta";
    };
  }
  rpc GetAllAnimeSeries(aspb.GetAllAnimeSeriesRequest) returns (aspb.GetAllAnimeSeriesResponse) {
    option (google.api.http) = {
      get : "/v1/anime/serie"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime series or by year";
      summary:  "list anime series";
    };
  }
  rpc GetAllAnimeSerieMetas(aspb.GetAllAnimeSerieMetasRequest) returns (aspb.GetAllAnimeSerieMetasResponse) {
    option (google.api.http) = {
      get : "/v1/anime/serie/meta"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to get all anime serie metas";
      summary:  "Get all anime serie metas";
    };
  }
  rpc AddInfoToAnimeSerie(aspb.AddInfoAnimeSerieRequest) returns (aspb.AddInfoAnimeSerieResponse) {
    option (google.api.http) = {
      post : "/v1/anime/serie/info"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to add info to anime serie like studios and genres";
      summary:  "add info to anime serie";
    };
  }
  rpc UpdateAnimeSerie(aspb.UpdateAnimeSerieRequest) returns (aspb.UpdateAnimeSerieResponse) {
    option (google.api.http) = {
      patch : "/v1/serie/update"
      body : "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description : "Use this API to update all anime serie fields using the ID";
      summary: "Update anime serie";
    };
  }
}