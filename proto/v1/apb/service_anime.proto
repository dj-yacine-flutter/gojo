syntax = "proto3";

package v1.apbv1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "v1/apb/rpc_update_anime_character.proto";
import "v1/apb/rpc_update_anime_link.proto";
import "v1/apb/rpc_update_anime_resource.proto";
import "v1/apb/rpc_update_anime_video.proto";
import "v1/apb/rpc_update_anime_torrent.proto";
import "v1/apb/rpc_update_anime_title.proto";
import "v1/apb/rpc_update_anime_tag.proto";

option go_package = "github.com/dj-yacine-flutter/gojo/pb/v1/apb;apbv1";

service AnimeService {
  rpc UpdateAnimeCharacter(UpdateAnimeCharacterRequest) returns (UpdateAnimeCharacterResponse) {
    option (google.api.http) = {
      patch: "/anime/character/{characterID}/update"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update a anime character";
  };
}
rpc UpdateAnimeLink(UpdateAnimeLinkRequest) returns (UpdateAnimeLinkResponse) {
  option (google.api.http) = {
    patch: "/anime/link/{linkID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime link";
};
}
rpc UpdateAnimeResource(UpdateAnimeResourceRequest) returns (UpdateAnimeResourceResponse) {
  option (google.api.http) = {
    patch: "/anime/resource/{resourceID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime resource";
};
}
rpc UpdateAnimeVideo(UpdateAnimeVideoRequest) returns (UpdateAnimeVideoResponse) {
  option (google.api.http) = {
    patch: "/anime/video/{videoID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime video";
};
}
rpc UpdateAnimeTorrent(UpdateAnimeTorrentRequest) returns (UpdateAnimeTorrentResponse) {
  option (google.api.http) = {
    patch: "/anime/torrent/{torrentID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime torrent";
};
}
rpc UpdateAnimeTitle(UpdateAnimeTitleRequest) returns (UpdateAnimeTitleResponse) {
  option (google.api.http) = {
    patch: "/anime/title/{titleID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime title";
};
}
rpc UpdateAnimeTag(UpdateAnimeTagRequest) returns (UpdateAnimeTagResponse) {
  option (google.api.http) = {
    patch: "/anime/tag/{tagID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a anime tag";
};
}
}