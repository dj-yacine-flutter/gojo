syntax = "proto3";

package v1.nfpbv1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

import "v1/nfpb/rpc_create_genres.proto";
import "v1/nfpb/rpc_create_studios.proto";
import "v1/nfpb/rpc_create_languages.proto";
import "v1/nfpb/rpc_create_actors.proto";
import "v1/nfpb/rpc_get_all_genres.proto";
import "v1/nfpb/rpc_get_all_studios.proto";
import "v1/nfpb/rpc_get_all_languages.proto";
import "v1/nfpb/rpc_get_all_actors.proto";
import "v1/nfpb/rpc_update_language.proto";
import "v1/nfpb/rpc_update_genre.proto";
import "v1/nfpb/rpc_update_studio.proto";
import "v1/nfpb/rpc_update_actor.proto";

option go_package = "github.com/dj-yacine-flutter/gojo/pb/v1/nfpb;nfpbv1";

service InfoService {
  rpc CreateGenres(CreateGenresRequest) returns (CreateGenresResponse) {
    option (google.api.http) = {
      post: "/anime/genre/create"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new genres";
  };
}
rpc CreateStudios(CreateStudiosRequest) returns (CreateStudiosResponse) {
  option (google.api.http) = {
    post: "/anime/studio/create"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to create a new studios";
};
}
rpc CreateLanguages(CreateLanguagesRequest) returns (CreateLanguagesResponse) {
  option (google.api.http) = {
    post: "/language/create"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to create a new languages";
};
}
rpc CreateActors(CreateActorsRequest) returns (CreateActorsResponse) {
  option (google.api.http) = {
    post: "/actor/create"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to create a new actor";
};
}
rpc GetAllGenres(GetAllGenresRequest) returns (GetAllGenresResponse) {
  option (google.api.http) = {
    get: "/anime/genre"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to get all anime genres";
};
}
rpc GetAllStudios(GetAllStudiosRequest) returns (GetAllStudiosResponse) {
  option (google.api.http) = {
    get: "/anime/studio"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to get all anime studios";
};
}
rpc GetAllLanguages(GetAllLanguagesRequest) returns (GetAllLanguagesResponse) {
  option (google.api.http) = {
    get: "/language"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to get all app languages";
};
}
rpc GetAllActors(GetAllActorsRequest) returns (GetAllActorsResponse) {
  option (google.api.http) = {
    get: "/actor"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to get all actors";
};
}
rpc UpdateLanguage(UpdateLanguageRequest) returns (UpdateLanguageResponse) {
  option (google.api.http) = {
    patch: "/language/{languageID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a language";
};
}
rpc UpdateGenre(UpdateGenreRequest) returns (UpdateGenreResponse) {
  option (google.api.http) = {
    patch: "/genre/{genreID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a genre";
};
}
rpc UpdateStudio(UpdateStudioRequest) returns (UpdateStudioResponse) {
  option (google.api.http) = {
    patch: "/studio/{studioID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a studio";
};
}
rpc UpdateActor(UpdateActorRequest) returns (UpdateActorResponse) {
  option (google.api.http) = {
    patch: "/actor/{actorID}/update"
    body: "*"
  };
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
    description: "Use this API to update a actor";
};
}
}