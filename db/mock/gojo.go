// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dj-yacine-flutter/gojo/db/database (interfaces: Gojo)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/dj-yacine-flutter/gojo/db/database"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGojo is a mock of Gojo interface.
type MockGojo struct {
	ctrl     *gomock.Controller
	recorder *MockGojoMockRecorder
}

// MockGojoMockRecorder is the mock recorder for MockGojo.
type MockGojoMockRecorder struct {
	mock *MockGojo
}

// NewMockGojo creates a new mock instance.
func NewMockGojo(ctrl *gomock.Controller) *MockGojo {
	mock := &MockGojo{ctrl: ctrl}
	mock.recorder = &MockGojoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGojo) EXPECT() *MockGojoMockRecorder {
	return m.recorder
}

// AddAnimeMovieDataTx mocks base method.
func (m *MockGojo) AddAnimeMovieDataTx(arg0 context.Context, arg1 db.AddAnimeMovieDataTxParams) (db.AddAnimeMovieDataTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeMovieDataTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeMovieDataTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeMovieDataTx indicates an expected call of AddAnimeMovieDataTx.
func (mr *MockGojoMockRecorder) AddAnimeMovieDataTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeMovieDataTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeMovieDataTx), arg0, arg1)
}

// AddAnimeMovieInfoTx mocks base method.
func (m *MockGojo) AddAnimeMovieInfoTx(arg0 context.Context, arg1 db.AddAnimeMovieInfoTxParams) (db.AddAnimeMovieInfoTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeMovieInfoTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeMovieInfoTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeMovieInfoTx indicates an expected call of AddAnimeMovieInfoTx.
func (mr *MockGojoMockRecorder) AddAnimeMovieInfoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeMovieInfoTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeMovieInfoTx), arg0, arg1)
}

// AddAnimeSerieDataTx mocks base method.
func (m *MockGojo) AddAnimeSerieDataTx(arg0 context.Context, arg1 db.AddAnimeSerieDataTxParams) (db.AddAnimeSerieDataTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeSerieDataTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeSerieDataTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeSerieDataTx indicates an expected call of AddAnimeSerieDataTx.
func (mr *MockGojoMockRecorder) AddAnimeSerieDataTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeSerieDataTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeSerieDataTx), arg0, arg1)
}

// AddAnimeSerieEpisodeMetasTx mocks base method.
func (m *MockGojo) AddAnimeSerieEpisodeMetasTx(arg0 context.Context, arg1 db.AddAnimeSerieEpisodeMetasTxParams) (db.AddAnimeSerieEpisodeMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeSerieEpisodeMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeSerieEpisodeMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeSerieEpisodeMetasTx indicates an expected call of AddAnimeSerieEpisodeMetasTx.
func (mr *MockGojoMockRecorder) AddAnimeSerieEpisodeMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeSerieEpisodeMetasTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeSerieEpisodeMetasTx), arg0, arg1)
}

// AddAnimeSerieInfoTx mocks base method.
func (m *MockGojo) AddAnimeSerieInfoTx(arg0 context.Context, arg1 db.AddAnimeSerieInfoTxParams) (db.AddAnimeSerieInfoTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeSerieInfoTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeSerieInfoTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeSerieInfoTx indicates an expected call of AddAnimeSerieInfoTx.
func (mr *MockGojoMockRecorder) AddAnimeSerieInfoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeSerieInfoTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeSerieInfoTx), arg0, arg1)
}

// AddAnimeSerieSeasonMetasTx mocks base method.
func (m *MockGojo) AddAnimeSerieSeasonMetasTx(arg0 context.Context, arg1 db.AddAnimeSerieSeasonMetasTxParams) (db.AddAnimeSerieSeasonMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAnimeSerieSeasonMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.AddAnimeSerieSeasonMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAnimeSerieSeasonMetasTx indicates an expected call of AddAnimeSerieSeasonMetasTx.
func (mr *MockGojoMockRecorder) AddAnimeSerieSeasonMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAnimeSerieSeasonMetasTx", reflect.TypeOf((*MockGojo)(nil).AddAnimeSerieSeasonMetasTx), arg0, arg1)
}

// CreateAnimeImage mocks base method.
func (m *MockGojo) CreateAnimeImage(arg0 context.Context, arg1 db.CreateAnimeImageParams) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeImage indicates an expected call of CreateAnimeImage.
func (mr *MockGojoMockRecorder) CreateAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeImage), arg0, arg1)
}

// CreateAnimeLink mocks base method.
func (m *MockGojo) CreateAnimeLink(arg0 context.Context, arg1 db.CreateAnimeLinkParams) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeLink indicates an expected call of CreateAnimeLink.
func (mr *MockGojoMockRecorder) CreateAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeLink), arg0, arg1)
}

// CreateAnimeMovie mocks base method.
func (m *MockGojo) CreateAnimeMovie(arg0 context.Context, arg1 db.CreateAnimeMovieParams) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovie indicates an expected call of CreateAnimeMovie.
func (mr *MockGojoMockRecorder) CreateAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovie", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovie), arg0, arg1)
}

// CreateAnimeMovieGenre mocks base method.
func (m *MockGojo) CreateAnimeMovieGenre(arg0 context.Context, arg1 db.CreateAnimeMovieGenreParams) (db.AnimeMovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieGenre indicates an expected call of CreateAnimeMovieGenre.
func (mr *MockGojoMockRecorder) CreateAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieGenre), arg0, arg1)
}

// CreateAnimeMovieImage mocks base method.
func (m *MockGojo) CreateAnimeMovieImage(arg0 context.Context, arg1 db.CreateAnimeMovieImageParams) (db.AnimeMovieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieImage indicates an expected call of CreateAnimeMovieImage.
func (mr *MockGojoMockRecorder) CreateAnimeMovieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieImage), arg0, arg1)
}

// CreateAnimeMovieLink mocks base method.
func (m *MockGojo) CreateAnimeMovieLink(arg0 context.Context, arg1 db.CreateAnimeMovieLinkParams) (db.AnimeMovieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieLink indicates an expected call of CreateAnimeMovieLink.
func (mr *MockGojoMockRecorder) CreateAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieLink), arg0, arg1)
}

// CreateAnimeMovieMeta mocks base method.
func (m *MockGojo) CreateAnimeMovieMeta(arg0 context.Context, arg1 db.CreateAnimeMovieMetaParams) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieMeta indicates an expected call of CreateAnimeMovieMeta.
func (mr *MockGojoMockRecorder) CreateAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieMeta), arg0, arg1)
}

// CreateAnimeMovieMetasTx mocks base method.
func (m *MockGojo) CreateAnimeMovieMetasTx(arg0 context.Context, arg1 db.CreateAnimeMovieMetasTxParams) (db.CreateAnimeMovieMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieMetasTx indicates an expected call of CreateAnimeMovieMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieMetasTx), arg0, arg1)
}

// CreateAnimeMovieResource mocks base method.
func (m *MockGojo) CreateAnimeMovieResource(arg0 context.Context, arg1 db.CreateAnimeMovieResourceParams) (db.AnimeMovieResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieResource indicates an expected call of CreateAnimeMovieResource.
func (mr *MockGojoMockRecorder) CreateAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieResource), arg0, arg1)
}

// CreateAnimeMovieResourceTx mocks base method.
func (m *MockGojo) CreateAnimeMovieResourceTx(arg0 context.Context, arg1 db.CreateAnimeMovieResourceTxParams) (db.CreateAnimeMovieResourceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieResourceTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieResourceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieResourceTx indicates an expected call of CreateAnimeMovieResourceTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieResourceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieResourceTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieResourceTx), arg0, arg1)
}

// CreateAnimeMovieServer mocks base method.
func (m *MockGojo) CreateAnimeMovieServer(arg0 context.Context, arg1 int64) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServer indicates an expected call of CreateAnimeMovieServer.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServer), arg0, arg1)
}

// CreateAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieServerDubTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieServerDubTorrentParams) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerDubTorrent indicates an expected call of CreateAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerDubTorrent), arg0, arg1)
}

// CreateAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieServerDubVideo(arg0 context.Context, arg1 db.CreateAnimeMovieServerDubVideoParams) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerDubVideo indicates an expected call of CreateAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerDubVideo), arg0, arg1)
}

// CreateAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieServerSubTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieServerSubTorrentParams) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerSubTorrent indicates an expected call of CreateAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerSubTorrent), arg0, arg1)
}

// CreateAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieServerSubVideo(arg0 context.Context, arg1 db.CreateAnimeMovieServerSubVideoParams) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerSubVideo indicates an expected call of CreateAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerSubVideo), arg0, arg1)
}

// CreateAnimeMovieStudio mocks base method.
func (m *MockGojo) CreateAnimeMovieStudio(arg0 context.Context, arg1 db.CreateAnimeMovieStudioParams) (db.AnimeMovieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieStudio indicates an expected call of CreateAnimeMovieStudio.
func (mr *MockGojoMockRecorder) CreateAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieStudio), arg0, arg1)
}

// CreateAnimeMovieTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieTorrentParams) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTorrent indicates an expected call of CreateAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTorrent), arg0, arg1)
}

// CreateAnimeMovieTx mocks base method.
func (m *MockGojo) CreateAnimeMovieTx(arg0 context.Context, arg1 db.CreateAnimeMovieTxParams) (db.CreateAnimeMovieTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTx indicates an expected call of CreateAnimeMovieTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTx), arg0, arg1)
}

// CreateAnimeMovieVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieVideo(arg0 context.Context, arg1 db.CreateAnimeMovieVideoParams) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieVideo indicates an expected call of CreateAnimeMovieVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieVideo), arg0, arg1)
}

// CreateAnimeResource mocks base method.
func (m *MockGojo) CreateAnimeResource(arg0 context.Context, arg1 db.CreateAnimeResourceParams) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeResource indicates an expected call of CreateAnimeResource.
func (mr *MockGojoMockRecorder) CreateAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeResource), arg0, arg1)
}

// CreateAnimeSeasonResource mocks base method.
func (m *MockGojo) CreateAnimeSeasonResource(arg0 context.Context, arg1 db.CreateAnimeSeasonResourceParams) (db.AnimeSeasonResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonResource indicates an expected call of CreateAnimeSeasonResource.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonResource), arg0, arg1)
}

// CreateAnimeSeasonResourceTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonResourceTx(arg0 context.Context, arg1 db.CreateAnimeSeasonResourceTxParams) (db.CreateAnimeSeasonResourceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonResourceTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonResourceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonResourceTx indicates an expected call of CreateAnimeSeasonResourceTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonResourceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonResourceTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonResourceTx), arg0, arg1)
}

// CreateAnimeSerie mocks base method.
func (m *MockGojo) CreateAnimeSerie(arg0 context.Context, arg1 db.CreateAnimeSerieParams) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerie indicates an expected call of CreateAnimeSerie.
func (mr *MockGojoMockRecorder) CreateAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerie", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerie), arg0, arg1)
}

// CreateAnimeSerieEpisode mocks base method.
func (m *MockGojo) CreateAnimeSerieEpisode(arg0 context.Context, arg1 db.CreateAnimeSerieEpisodeParams) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieEpisode indicates an expected call of CreateAnimeSerieEpisode.
func (mr *MockGojoMockRecorder) CreateAnimeSerieEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieEpisode", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieEpisode), arg0, arg1)
}

// CreateAnimeSerieEpisodeMeta mocks base method.
func (m *MockGojo) CreateAnimeSerieEpisodeMeta(arg0 context.Context, arg1 db.CreateAnimeSerieEpisodeMetaParams) (db.AnimeSerieEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieEpisodeMeta indicates an expected call of CreateAnimeSerieEpisodeMeta.
func (mr *MockGojoMockRecorder) CreateAnimeSerieEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieEpisodeMeta), arg0, arg1)
}

// CreateAnimeSerieEpisodeServer mocks base method.
func (m *MockGojo) CreateAnimeSerieEpisodeServer(arg0 context.Context, arg1 db.CreateAnimeSerieEpisodeServerParams) (db.AnimeSerieEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieEpisodeServer indicates an expected call of CreateAnimeSerieEpisodeServer.
func (mr *MockGojoMockRecorder) CreateAnimeSerieEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieEpisodeServer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieEpisodeServer), arg0, arg1)
}

// CreateAnimeSerieEpisodeTx mocks base method.
func (m *MockGojo) CreateAnimeSerieEpisodeTx(arg0 context.Context, arg1 db.CreateAnimeSerieEpisodeTxParams) (db.CreateAnimeSerieEpisodeTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieEpisodeTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieEpisodeTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieEpisodeTx indicates an expected call of CreateAnimeSerieEpisodeTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieEpisodeTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieEpisodeTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieEpisodeTx), arg0, arg1)
}

// CreateAnimeSerieGenre mocks base method.
func (m *MockGojo) CreateAnimeSerieGenre(arg0 context.Context, arg1 db.CreateAnimeSerieGenreParams) (db.AnimeSerieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieGenre indicates an expected call of CreateAnimeSerieGenre.
func (mr *MockGojoMockRecorder) CreateAnimeSerieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieGenre", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieGenre), arg0, arg1)
}

// CreateAnimeSerieImage mocks base method.
func (m *MockGojo) CreateAnimeSerieImage(arg0 context.Context, arg1 db.CreateAnimeSerieImageParams) (db.AnimeSerieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieImage indicates an expected call of CreateAnimeSerieImage.
func (mr *MockGojoMockRecorder) CreateAnimeSerieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieImage), arg0, arg1)
}

// CreateAnimeSerieLink mocks base method.
func (m *MockGojo) CreateAnimeSerieLink(arg0 context.Context, arg1 db.CreateAnimeSerieLinkParams) (db.AnimeSerieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieLink indicates an expected call of CreateAnimeSerieLink.
func (mr *MockGojoMockRecorder) CreateAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieLink), arg0, arg1)
}

// CreateAnimeSerieMeta mocks base method.
func (m *MockGojo) CreateAnimeSerieMeta(arg0 context.Context, arg1 db.CreateAnimeSerieMetaParams) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieMeta indicates an expected call of CreateAnimeSerieMeta.
func (mr *MockGojoMockRecorder) CreateAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieMeta), arg0, arg1)
}

// CreateAnimeSerieMetasTx mocks base method.
func (m *MockGojo) CreateAnimeSerieMetasTx(arg0 context.Context, arg1 db.CreateAnimeSerieMetasTxParams) (db.CreateAnimeSerieMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieMetasTx indicates an expected call of CreateAnimeSerieMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieMetasTx), arg0, arg1)
}

// CreateAnimeSerieSeason mocks base method.
func (m *MockGojo) CreateAnimeSerieSeason(arg0 context.Context, arg1 db.CreateAnimeSerieSeasonParams) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieSeason indicates an expected call of CreateAnimeSerieSeason.
func (mr *MockGojoMockRecorder) CreateAnimeSerieSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieSeason", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieSeason), arg0, arg1)
}

// CreateAnimeSerieSeasonEpisode mocks base method.
func (m *MockGojo) CreateAnimeSerieSeasonEpisode(arg0 context.Context, arg1 db.CreateAnimeSerieSeasonEpisodeParams) (db.AnimeSerieSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieSeasonEpisode indicates an expected call of CreateAnimeSerieSeasonEpisode.
func (mr *MockGojoMockRecorder) CreateAnimeSerieSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieSeasonEpisode), arg0, arg1)
}

// CreateAnimeSerieSeasonMeta mocks base method.
func (m *MockGojo) CreateAnimeSerieSeasonMeta(arg0 context.Context, arg1 db.CreateAnimeSerieSeasonMetaParams) (db.AnimeSerieSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieSeasonMeta indicates an expected call of CreateAnimeSerieSeasonMeta.
func (mr *MockGojoMockRecorder) CreateAnimeSerieSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieSeasonMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieSeasonMeta), arg0, arg1)
}

// CreateAnimeSerieSeasonTx mocks base method.
func (m *MockGojo) CreateAnimeSerieSeasonTx(arg0 context.Context, arg1 db.CreateAnimeSerieSeasonTxParams) (db.CreateAnimeSerieSeasonTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieSeasonTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieSeasonTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieSeasonTx indicates an expected call of CreateAnimeSerieSeasonTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieSeasonTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieSeasonTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieSeasonTx), arg0, arg1)
}

// CreateAnimeSerieServer mocks base method.
func (m *MockGojo) CreateAnimeSerieServer(arg0 context.Context, arg1 int64) (db.AnimeSerieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieServer indicates an expected call of CreateAnimeSerieServer.
func (mr *MockGojoMockRecorder) CreateAnimeSerieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieServer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieServer), arg0, arg1)
}

// CreateAnimeSerieServerDubTorrent mocks base method.
func (m *MockGojo) CreateAnimeSerieServerDubTorrent(arg0 context.Context, arg1 db.CreateAnimeSerieServerDubTorrentParams) (db.AnimeSerieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieServerDubTorrent indicates an expected call of CreateAnimeSerieServerDubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeSerieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieServerDubTorrent), arg0, arg1)
}

// CreateAnimeSerieServerDubVideo mocks base method.
func (m *MockGojo) CreateAnimeSerieServerDubVideo(arg0 context.Context, arg1 db.CreateAnimeSerieServerDubVideoParams) (db.AnimeSerieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieServerDubVideo indicates an expected call of CreateAnimeSerieServerDubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeSerieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieServerDubVideo), arg0, arg1)
}

// CreateAnimeSerieServerSubTorrent mocks base method.
func (m *MockGojo) CreateAnimeSerieServerSubTorrent(arg0 context.Context, arg1 db.CreateAnimeSerieServerSubTorrentParams) (db.AnimeSerieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieServerSubTorrent indicates an expected call of CreateAnimeSerieServerSubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeSerieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieServerSubTorrent), arg0, arg1)
}

// CreateAnimeSerieServerSubVideo mocks base method.
func (m *MockGojo) CreateAnimeSerieServerSubVideo(arg0 context.Context, arg1 db.CreateAnimeSerieServerSubVideoParams) (db.AnimeSerieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieServerSubVideo indicates an expected call of CreateAnimeSerieServerSubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeSerieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieServerSubVideo), arg0, arg1)
}

// CreateAnimeSerieStudio mocks base method.
func (m *MockGojo) CreateAnimeSerieStudio(arg0 context.Context, arg1 db.CreateAnimeSerieStudioParams) (db.AnimeSerieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieStudio indicates an expected call of CreateAnimeSerieStudio.
func (mr *MockGojoMockRecorder) CreateAnimeSerieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieStudio", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieStudio), arg0, arg1)
}

// CreateAnimeSerieTorrent mocks base method.
func (m *MockGojo) CreateAnimeSerieTorrent(arg0 context.Context, arg1 db.CreateAnimeSerieTorrentParams) (db.AnimeSerieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieTorrent indicates an expected call of CreateAnimeSerieTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeSerieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieTorrent), arg0, arg1)
}

// CreateAnimeSerieTx mocks base method.
func (m *MockGojo) CreateAnimeSerieTx(arg0 context.Context, arg1 db.CreateAnimeSerieTxParams) (db.CreateAnimeSerieTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieTx indicates an expected call of CreateAnimeSerieTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieTx), arg0, arg1)
}

// CreateAnimeSerieVideo mocks base method.
func (m *MockGojo) CreateAnimeSerieVideo(arg0 context.Context, arg1 db.CreateAnimeSerieVideoParams) (db.AnimeSerieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieVideo indicates an expected call of CreateAnimeSerieVideo.
func (mr *MockGojoMockRecorder) CreateAnimeSerieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieVideo), arg0, arg1)
}

// CreateGenre mocks base method.
func (m *MockGojo) CreateGenre(arg0 context.Context, arg1 string) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockGojoMockRecorder) CreateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockGojo)(nil).CreateGenre), arg0, arg1)
}

// CreateGenresTx mocks base method.
func (m *MockGojo) CreateGenresTx(arg0 context.Context, arg1 db.CreateGenresTxParams) (db.CreateGenresTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenresTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateGenresTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenresTx indicates an expected call of CreateGenresTx.
func (mr *MockGojoMockRecorder) CreateGenresTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenresTx", reflect.TypeOf((*MockGojo)(nil).CreateGenresTx), arg0, arg1)
}

// CreateLanguage mocks base method.
func (m *MockGojo) CreateLanguage(arg0 context.Context, arg1 db.CreateLanguageParams) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLanguage indicates an expected call of CreateLanguage.
func (mr *MockGojoMockRecorder) CreateLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLanguage", reflect.TypeOf((*MockGojo)(nil).CreateLanguage), arg0, arg1)
}

// CreateLanguagesTx mocks base method.
func (m *MockGojo) CreateLanguagesTx(arg0 context.Context, arg1 db.CreateLanguagesTxParams) (db.CreateLanguagesTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLanguagesTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateLanguagesTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLanguagesTx indicates an expected call of CreateLanguagesTx.
func (mr *MockGojoMockRecorder) CreateLanguagesTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLanguagesTx", reflect.TypeOf((*MockGojo)(nil).CreateLanguagesTx), arg0, arg1)
}

// CreateMeta mocks base method.
func (m *MockGojo) CreateMeta(arg0 context.Context, arg1 db.CreateMetaParams) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeta indicates an expected call of CreateMeta.
func (mr *MockGojoMockRecorder) CreateMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeta", reflect.TypeOf((*MockGojo)(nil).CreateMeta), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockGojo) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGojoMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGojo)(nil).CreateSession), arg0, arg1)
}

// CreateStudio mocks base method.
func (m *MockGojo) CreateStudio(arg0 context.Context, arg1 string) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudio indicates an expected call of CreateStudio.
func (mr *MockGojoMockRecorder) CreateStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudio", reflect.TypeOf((*MockGojo)(nil).CreateStudio), arg0, arg1)
}

// CreateStudiosTx mocks base method.
func (m *MockGojo) CreateStudiosTx(arg0 context.Context, arg1 db.CreateStudiosTxParams) (db.CreateStudiosTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudiosTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateStudiosTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudiosTx indicates an expected call of CreateStudiosTx.
func (mr *MockGojoMockRecorder) CreateStudiosTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudiosTx", reflect.TypeOf((*MockGojo)(nil).CreateStudiosTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockGojo) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGojoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGojo)(nil).CreateUser), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockGojo) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockGojoMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockGojo)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockGojo) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockGojoMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockGojo)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteAnimeImage mocks base method.
func (m *MockGojo) DeleteAnimeImage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeImage indicates an expected call of DeleteAnimeImage.
func (mr *MockGojoMockRecorder) DeleteAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeImage), arg0, arg1)
}

// DeleteAnimeLink mocks base method.
func (m *MockGojo) DeleteAnimeLink(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeLink indicates an expected call of DeleteAnimeLink.
func (mr *MockGojoMockRecorder) DeleteAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeLink), arg0, arg1)
}

// DeleteAnimeMovie mocks base method.
func (m *MockGojo) DeleteAnimeMovie(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovie indicates an expected call of DeleteAnimeMovie.
func (mr *MockGojoMockRecorder) DeleteAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovie", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovie), arg0, arg1)
}

// DeleteAnimeMovieGenre mocks base method.
func (m *MockGojo) DeleteAnimeMovieGenre(arg0 context.Context, arg1 db.DeleteAnimeMovieGenreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieGenre indicates an expected call of DeleteAnimeMovieGenre.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieGenre), arg0, arg1)
}

// DeleteAnimeMovieImage mocks base method.
func (m *MockGojo) DeleteAnimeMovieImage(arg0 context.Context, arg1 db.DeleteAnimeMovieImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieImage indicates an expected call of DeleteAnimeMovieImage.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieImage), arg0, arg1)
}

// DeleteAnimeMovieLink mocks base method.
func (m *MockGojo) DeleteAnimeMovieLink(arg0 context.Context, arg1 db.DeleteAnimeMovieLinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieLink indicates an expected call of DeleteAnimeMovieLink.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieLink), arg0, arg1)
}

// DeleteAnimeMovieMeta mocks base method.
func (m *MockGojo) DeleteAnimeMovieMeta(arg0 context.Context, arg1 db.DeleteAnimeMovieMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieMeta indicates an expected call of DeleteAnimeMovieMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieMeta), arg0, arg1)
}

// DeleteAnimeMovieResource mocks base method.
func (m *MockGojo) DeleteAnimeMovieResource(arg0 context.Context, arg1 db.DeleteAnimeMovieResourceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieResource indicates an expected call of DeleteAnimeMovieResource.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieResource), arg0, arg1)
}

// DeleteAnimeMovieServer mocks base method.
func (m *MockGojo) DeleteAnimeMovieServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServer indicates an expected call of DeleteAnimeMovieServer.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServer), arg0, arg1)
}

// DeleteAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerDubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerDubTorrent indicates an expected call of DeleteAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerDubTorrent), arg0, arg1)
}

// DeleteAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerDubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerDubVideo indicates an expected call of DeleteAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerDubVideo), arg0, arg1)
}

// DeleteAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerSubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerSubTorrent indicates an expected call of DeleteAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerSubTorrent), arg0, arg1)
}

// DeleteAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerSubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerSubVideo indicates an expected call of DeleteAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerSubVideo), arg0, arg1)
}

// DeleteAnimeMovieStudio mocks base method.
func (m *MockGojo) DeleteAnimeMovieStudio(arg0 context.Context, arg1 db.DeleteAnimeMovieStudioParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieStudio indicates an expected call of DeleteAnimeMovieStudio.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieStudio), arg0, arg1)
}

// DeleteAnimeMovieTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieTorrent indicates an expected call of DeleteAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieTorrent), arg0, arg1)
}

// DeleteAnimeMovieVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieVideo indicates an expected call of DeleteAnimeMovieVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieVideo), arg0, arg1)
}

// DeleteAnimeResource mocks base method.
func (m *MockGojo) DeleteAnimeResource(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeResource indicates an expected call of DeleteAnimeResource.
func (mr *MockGojoMockRecorder) DeleteAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeResource), arg0, arg1)
}

// DeleteAnimeSeasonResource mocks base method.
func (m *MockGojo) DeleteAnimeSeasonResource(arg0 context.Context, arg1 db.DeleteAnimeSeasonResourceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonResource indicates an expected call of DeleteAnimeSeasonResource.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonResource), arg0, arg1)
}

// DeleteAnimeSerie mocks base method.
func (m *MockGojo) DeleteAnimeSerie(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerie indicates an expected call of DeleteAnimeSerie.
func (mr *MockGojoMockRecorder) DeleteAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerie", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerie), arg0, arg1)
}

// DeleteAnimeSerieEpisode mocks base method.
func (m *MockGojo) DeleteAnimeSerieEpisode(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieEpisode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieEpisode indicates an expected call of DeleteAnimeSerieEpisode.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieEpisode", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieEpisode), arg0, arg1)
}

// DeleteAnimeSerieEpisodeMeta mocks base method.
func (m *MockGojo) DeleteAnimeSerieEpisodeMeta(arg0 context.Context, arg1 db.DeleteAnimeSerieEpisodeMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieEpisodeMeta indicates an expected call of DeleteAnimeSerieEpisodeMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieEpisodeMeta), arg0, arg1)
}

// DeleteAnimeSerieEpisodeServer mocks base method.
func (m *MockGojo) DeleteAnimeSerieEpisodeServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieEpisodeServer indicates an expected call of DeleteAnimeSerieEpisodeServer.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieEpisodeServer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieEpisodeServer), arg0, arg1)
}

// DeleteAnimeSerieGenre mocks base method.
func (m *MockGojo) DeleteAnimeSerieGenre(arg0 context.Context, arg1 db.DeleteAnimeSerieGenreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieGenre indicates an expected call of DeleteAnimeSerieGenre.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieGenre", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieGenre), arg0, arg1)
}

// DeleteAnimeSerieImage mocks base method.
func (m *MockGojo) DeleteAnimeSerieImage(arg0 context.Context, arg1 db.DeleteAnimeSerieImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieImage indicates an expected call of DeleteAnimeSerieImage.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieImage), arg0, arg1)
}

// DeleteAnimeSerieLink mocks base method.
func (m *MockGojo) DeleteAnimeSerieLink(arg0 context.Context, arg1 db.DeleteAnimeSerieLinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieLink indicates an expected call of DeleteAnimeSerieLink.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieLink), arg0, arg1)
}

// DeleteAnimeSerieMeta mocks base method.
func (m *MockGojo) DeleteAnimeSerieMeta(arg0 context.Context, arg1 db.DeleteAnimeSerieMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieMeta indicates an expected call of DeleteAnimeSerieMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieMeta), arg0, arg1)
}

// DeleteAnimeSerieSeason mocks base method.
func (m *MockGojo) DeleteAnimeSerieSeason(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieSeason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieSeason indicates an expected call of DeleteAnimeSerieSeason.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieSeason", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieSeason), arg0, arg1)
}

// DeleteAnimeSerieSeasonEpisode mocks base method.
func (m *MockGojo) DeleteAnimeSerieSeasonEpisode(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieSeasonEpisode indicates an expected call of DeleteAnimeSerieSeasonEpisode.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieSeasonEpisode), arg0, arg1)
}

// DeleteAnimeSerieSeasonMeta mocks base method.
func (m *MockGojo) DeleteAnimeSerieSeasonMeta(arg0 context.Context, arg1 db.DeleteAnimeSerieSeasonMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieSeasonMeta indicates an expected call of DeleteAnimeSerieSeasonMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieSeasonMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieSeasonMeta), arg0, arg1)
}

// DeleteAnimeSerieServer mocks base method.
func (m *MockGojo) DeleteAnimeSerieServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieServer indicates an expected call of DeleteAnimeSerieServer.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieServer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieServer), arg0, arg1)
}

// DeleteAnimeSerieServerDubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeSerieServerDubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieServerDubTorrent indicates an expected call of DeleteAnimeSerieServerDubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieServerDubTorrent), arg0, arg1)
}

// DeleteAnimeSerieServerDubVideo mocks base method.
func (m *MockGojo) DeleteAnimeSerieServerDubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieServerDubVideo indicates an expected call of DeleteAnimeSerieServerDubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieServerDubVideo), arg0, arg1)
}

// DeleteAnimeSerieServerSubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeSerieServerSubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieServerSubTorrent indicates an expected call of DeleteAnimeSerieServerSubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieServerSubTorrent), arg0, arg1)
}

// DeleteAnimeSerieServerSubVideo mocks base method.
func (m *MockGojo) DeleteAnimeSerieServerSubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieServerSubVideo indicates an expected call of DeleteAnimeSerieServerSubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieServerSubVideo), arg0, arg1)
}

// DeleteAnimeSerieStudio mocks base method.
func (m *MockGojo) DeleteAnimeSerieStudio(arg0 context.Context, arg1 db.DeleteAnimeSerieStudioParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieStudio indicates an expected call of DeleteAnimeSerieStudio.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieStudio", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieStudio), arg0, arg1)
}

// DeleteAnimeSerieTorrent mocks base method.
func (m *MockGojo) DeleteAnimeSerieTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieTorrent indicates an expected call of DeleteAnimeSerieTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieTorrent), arg0, arg1)
}

// DeleteAnimeSerieVideo mocks base method.
func (m *MockGojo) DeleteAnimeSerieVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieVideo indicates an expected call of DeleteAnimeSerieVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieVideo), arg0, arg1)
}

// DeleteGenre mocks base method.
func (m *MockGojo) DeleteGenre(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockGojoMockRecorder) DeleteGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockGojo)(nil).DeleteGenre), arg0, arg1)
}

// DeleteLanguage mocks base method.
func (m *MockGojo) DeleteLanguage(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLanguage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLanguage indicates an expected call of DeleteLanguage.
func (mr *MockGojoMockRecorder) DeleteLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLanguage", reflect.TypeOf((*MockGojo)(nil).DeleteLanguage), arg0, arg1)
}

// DeleteMeta mocks base method.
func (m *MockGojo) DeleteMeta(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeta indicates an expected call of DeleteMeta.
func (mr *MockGojoMockRecorder) DeleteMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeta", reflect.TypeOf((*MockGojo)(nil).DeleteMeta), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockGojo) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockGojoMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockGojo)(nil).DeleteSession), arg0, arg1)
}

// DeleteStudio mocks base method.
func (m *MockGojo) DeleteStudio(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudio indicates an expected call of DeleteStudio.
func (mr *MockGojoMockRecorder) DeleteStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudio", reflect.TypeOf((*MockGojo)(nil).DeleteStudio), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockGojo) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockGojoMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGojo)(nil).DeleteUser), arg0, arg1)
}

// GetAnimeImage mocks base method.
func (m *MockGojo) GetAnimeImage(arg0 context.Context, arg1 int64) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeImage indicates an expected call of GetAnimeImage.
func (mr *MockGojoMockRecorder) GetAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeImage", reflect.TypeOf((*MockGojo)(nil).GetAnimeImage), arg0, arg1)
}

// GetAnimeLink mocks base method.
func (m *MockGojo) GetAnimeLink(arg0 context.Context, arg1 int64) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeLink indicates an expected call of GetAnimeLink.
func (mr *MockGojoMockRecorder) GetAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeLink), arg0, arg1)
}

// GetAnimeMovie mocks base method.
func (m *MockGojo) GetAnimeMovie(arg0 context.Context, arg1 int64) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovie indicates an expected call of GetAnimeMovie.
func (mr *MockGojoMockRecorder) GetAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovie", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovie), arg0, arg1)
}

// GetAnimeMovieGenre mocks base method.
func (m *MockGojo) GetAnimeMovieGenre(arg0 context.Context, arg1 db.GetAnimeMovieGenreParams) (db.AnimeMovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieGenre indicates an expected call of GetAnimeMovieGenre.
func (mr *MockGojoMockRecorder) GetAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieGenre), arg0, arg1)
}

// GetAnimeMovieImage mocks base method.
func (m *MockGojo) GetAnimeMovieImage(arg0 context.Context, arg1 int64) (db.AnimeMovieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieImage indicates an expected call of GetAnimeMovieImage.
func (mr *MockGojoMockRecorder) GetAnimeMovieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieImage", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieImage), arg0, arg1)
}

// GetAnimeMovieImageByAnimeID mocks base method.
func (m *MockGojo) GetAnimeMovieImageByAnimeID(arg0 context.Context, arg1 int64) (db.AnimeMovieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieImageByAnimeID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieImageByAnimeID indicates an expected call of GetAnimeMovieImageByAnimeID.
func (mr *MockGojoMockRecorder) GetAnimeMovieImageByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieImageByAnimeID", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieImageByAnimeID), arg0, arg1)
}

// GetAnimeMovieLink mocks base method.
func (m *MockGojo) GetAnimeMovieLink(arg0 context.Context, arg1 int64) (db.AnimeMovieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieLink indicates an expected call of GetAnimeMovieLink.
func (mr *MockGojoMockRecorder) GetAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieLink), arg0, arg1)
}

// GetAnimeMovieMeta mocks base method.
func (m *MockGojo) GetAnimeMovieMeta(arg0 context.Context, arg1 db.GetAnimeMovieMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieMeta indicates an expected call of GetAnimeMovieMeta.
func (mr *MockGojoMockRecorder) GetAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieMeta), arg0, arg1)
}

// GetAnimeMovieMetaByID mocks base method.
func (m *MockGojo) GetAnimeMovieMetaByID(arg0 context.Context, arg1 int64) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieMetaByID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieMetaByID indicates an expected call of GetAnimeMovieMetaByID.
func (mr *MockGojoMockRecorder) GetAnimeMovieMetaByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieMetaByID", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieMetaByID), arg0, arg1)
}

// GetAnimeMovieResource mocks base method.
func (m *MockGojo) GetAnimeMovieResource(arg0 context.Context, arg1 int64) (db.AnimeMovieResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieResource indicates an expected call of GetAnimeMovieResource.
func (mr *MockGojoMockRecorder) GetAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieResource), arg0, arg1)
}

// GetAnimeMovieServer mocks base method.
func (m *MockGojo) GetAnimeMovieServer(arg0 context.Context, arg1 int64) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServer indicates an expected call of GetAnimeMovieServer.
func (mr *MockGojoMockRecorder) GetAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServer), arg0, arg1)
}

// GetAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieServerDubTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerDubTorrent indicates an expected call of GetAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerDubTorrent), arg0, arg1)
}

// GetAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) GetAnimeMovieServerDubVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerDubVideo indicates an expected call of GetAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerDubVideo), arg0, arg1)
}

// GetAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieServerSubTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerSubTorrent indicates an expected call of GetAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerSubTorrent), arg0, arg1)
}

// GetAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) GetAnimeMovieServerSubVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerSubVideo indicates an expected call of GetAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerSubVideo), arg0, arg1)
}

// GetAnimeMovieStudio mocks base method.
func (m *MockGojo) GetAnimeMovieStudio(arg0 context.Context, arg1 db.GetAnimeMovieStudioParams) (db.AnimeMovieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieStudio indicates an expected call of GetAnimeMovieStudio.
func (mr *MockGojoMockRecorder) GetAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieStudio), arg0, arg1)
}

// GetAnimeMovieTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieTorrent indicates an expected call of GetAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieTorrent), arg0, arg1)
}

// GetAnimeMovieVideo mocks base method.
func (m *MockGojo) GetAnimeMovieVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieVideo indicates an expected call of GetAnimeMovieVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieVideo), arg0, arg1)
}

// GetAnimeResource mocks base method.
func (m *MockGojo) GetAnimeResource(arg0 context.Context, arg1 int64) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeResource indicates an expected call of GetAnimeResource.
func (mr *MockGojoMockRecorder) GetAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeResource), arg0, arg1)
}

// GetAnimeSeasonResource mocks base method.
func (m *MockGojo) GetAnimeSeasonResource(arg0 context.Context, arg1 int64) (db.AnimeSeasonResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonResource indicates an expected call of GetAnimeSeasonResource.
func (mr *MockGojoMockRecorder) GetAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonResource), arg0, arg1)
}

// GetAnimeSerie mocks base method.
func (m *MockGojo) GetAnimeSerie(arg0 context.Context, arg1 int64) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerie indicates an expected call of GetAnimeSerie.
func (mr *MockGojoMockRecorder) GetAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerie", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerie), arg0, arg1)
}

// GetAnimeSerieEpisodeByEpisodeID mocks base method.
func (m *MockGojo) GetAnimeSerieEpisodeByEpisodeID(arg0 context.Context, arg1 int64) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieEpisodeByEpisodeID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieEpisodeByEpisodeID indicates an expected call of GetAnimeSerieEpisodeByEpisodeID.
func (mr *MockGojoMockRecorder) GetAnimeSerieEpisodeByEpisodeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieEpisodeByEpisodeID", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieEpisodeByEpisodeID), arg0, arg1)
}

// GetAnimeSerieEpisodeMeta mocks base method.
func (m *MockGojo) GetAnimeSerieEpisodeMeta(arg0 context.Context, arg1 db.GetAnimeSerieEpisodeMetaParams) (db.AnimeSerieEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieEpisodeMeta indicates an expected call of GetAnimeSerieEpisodeMeta.
func (mr *MockGojoMockRecorder) GetAnimeSerieEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieEpisodeMeta), arg0, arg1)
}

// GetAnimeSerieEpisodeServer mocks base method.
func (m *MockGojo) GetAnimeSerieEpisodeServer(arg0 context.Context, arg1 int64) (db.AnimeSerieEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieEpisodeServer indicates an expected call of GetAnimeSerieEpisodeServer.
func (mr *MockGojoMockRecorder) GetAnimeSerieEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieEpisodeServer", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieEpisodeServer), arg0, arg1)
}

// GetAnimeSerieGenre mocks base method.
func (m *MockGojo) GetAnimeSerieGenre(arg0 context.Context, arg1 db.GetAnimeSerieGenreParams) (db.AnimeSerieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieGenre indicates an expected call of GetAnimeSerieGenre.
func (mr *MockGojoMockRecorder) GetAnimeSerieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieGenre", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieGenre), arg0, arg1)
}

// GetAnimeSerieImage mocks base method.
func (m *MockGojo) GetAnimeSerieImage(arg0 context.Context, arg1 int64) (db.AnimeSerieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieImage indicates an expected call of GetAnimeSerieImage.
func (mr *MockGojoMockRecorder) GetAnimeSerieImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieImage", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieImage), arg0, arg1)
}

// GetAnimeSerieImageByAnimeID mocks base method.
func (m *MockGojo) GetAnimeSerieImageByAnimeID(arg0 context.Context, arg1 int64) (db.AnimeSerieImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieImageByAnimeID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieImageByAnimeID indicates an expected call of GetAnimeSerieImageByAnimeID.
func (mr *MockGojoMockRecorder) GetAnimeSerieImageByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieImageByAnimeID", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieImageByAnimeID), arg0, arg1)
}

// GetAnimeSerieLink mocks base method.
func (m *MockGojo) GetAnimeSerieLink(arg0 context.Context, arg1 int64) (db.AnimeSerieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieLink indicates an expected call of GetAnimeSerieLink.
func (mr *MockGojoMockRecorder) GetAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieLink), arg0, arg1)
}

// GetAnimeSerieMeta mocks base method.
func (m *MockGojo) GetAnimeSerieMeta(arg0 context.Context, arg1 db.GetAnimeSerieMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieMeta indicates an expected call of GetAnimeSerieMeta.
func (mr *MockGojoMockRecorder) GetAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieMeta), arg0, arg1)
}

// GetAnimeSerieMetaByID mocks base method.
func (m *MockGojo) GetAnimeSerieMetaByID(arg0 context.Context, arg1 int64) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieMetaByID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieMetaByID indicates an expected call of GetAnimeSerieMetaByID.
func (mr *MockGojoMockRecorder) GetAnimeSerieMetaByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieMetaByID", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieMetaByID), arg0, arg1)
}

// GetAnimeSerieSeason mocks base method.
func (m *MockGojo) GetAnimeSerieSeason(arg0 context.Context, arg1 int64) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieSeason indicates an expected call of GetAnimeSerieSeason.
func (mr *MockGojoMockRecorder) GetAnimeSerieSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieSeason", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieSeason), arg0, arg1)
}

// GetAnimeSerieSeasonEpisode mocks base method.
func (m *MockGojo) GetAnimeSerieSeasonEpisode(arg0 context.Context, arg1 int64) (db.AnimeSerieSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieSeasonEpisode indicates an expected call of GetAnimeSerieSeasonEpisode.
func (mr *MockGojoMockRecorder) GetAnimeSerieSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieSeasonEpisode), arg0, arg1)
}

// GetAnimeSerieSeasonMeta mocks base method.
func (m *MockGojo) GetAnimeSerieSeasonMeta(arg0 context.Context, arg1 db.GetAnimeSerieSeasonMetaParams) (db.AnimeSerieSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieSeasonMeta indicates an expected call of GetAnimeSerieSeasonMeta.
func (mr *MockGojoMockRecorder) GetAnimeSerieSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieSeasonMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieSeasonMeta), arg0, arg1)
}

// GetAnimeSerieServer mocks base method.
func (m *MockGojo) GetAnimeSerieServer(arg0 context.Context, arg1 int64) (db.AnimeSerieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieServer indicates an expected call of GetAnimeSerieServer.
func (mr *MockGojoMockRecorder) GetAnimeSerieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieServer", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieServer), arg0, arg1)
}

// GetAnimeSerieServerDubTorrent mocks base method.
func (m *MockGojo) GetAnimeSerieServerDubTorrent(arg0 context.Context, arg1 int64) (db.AnimeSerieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieServerDubTorrent indicates an expected call of GetAnimeSerieServerDubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeSerieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieServerDubTorrent), arg0, arg1)
}

// GetAnimeSerieServerDubVideo mocks base method.
func (m *MockGojo) GetAnimeSerieServerDubVideo(arg0 context.Context, arg1 int64) (db.AnimeSerieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieServerDubVideo indicates an expected call of GetAnimeSerieServerDubVideo.
func (mr *MockGojoMockRecorder) GetAnimeSerieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieServerDubVideo), arg0, arg1)
}

// GetAnimeSerieServerSubTorrent mocks base method.
func (m *MockGojo) GetAnimeSerieServerSubTorrent(arg0 context.Context, arg1 int64) (db.AnimeSerieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieServerSubTorrent indicates an expected call of GetAnimeSerieServerSubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeSerieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieServerSubTorrent), arg0, arg1)
}

// GetAnimeSerieServerSubVideo mocks base method.
func (m *MockGojo) GetAnimeSerieServerSubVideo(arg0 context.Context, arg1 int64) (db.AnimeSerieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieServerSubVideo indicates an expected call of GetAnimeSerieServerSubVideo.
func (mr *MockGojoMockRecorder) GetAnimeSerieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieServerSubVideo), arg0, arg1)
}

// GetAnimeSerieStudio mocks base method.
func (m *MockGojo) GetAnimeSerieStudio(arg0 context.Context, arg1 db.GetAnimeSerieStudioParams) (db.AnimeSerieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieStudio indicates an expected call of GetAnimeSerieStudio.
func (mr *MockGojoMockRecorder) GetAnimeSerieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieStudio", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieStudio), arg0, arg1)
}

// GetAnimeSerieTorrent mocks base method.
func (m *MockGojo) GetAnimeSerieTorrent(arg0 context.Context, arg1 int64) (db.AnimeSerieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieTorrent indicates an expected call of GetAnimeSerieTorrent.
func (mr *MockGojoMockRecorder) GetAnimeSerieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieTorrent), arg0, arg1)
}

// GetAnimeSerieVideo mocks base method.
func (m *MockGojo) GetAnimeSerieVideo(arg0 context.Context, arg1 int64) (db.AnimeSerieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieVideo indicates an expected call of GetAnimeSerieVideo.
func (mr *MockGojoMockRecorder) GetAnimeSerieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieVideo), arg0, arg1)
}

// GetGenre mocks base method.
func (m *MockGojo) GetGenre(arg0 context.Context, arg1 int32) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenre indicates an expected call of GetGenre.
func (mr *MockGojoMockRecorder) GetGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenre", reflect.TypeOf((*MockGojo)(nil).GetGenre), arg0, arg1)
}

// GetLanguage mocks base method.
func (m *MockGojo) GetLanguage(arg0 context.Context, arg1 int32) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockGojoMockRecorder) GetLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockGojo)(nil).GetLanguage), arg0, arg1)
}

// GetMeta mocks base method.
func (m *MockGojo) GetMeta(arg0 context.Context, arg1 int64) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockGojoMockRecorder) GetMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockGojo)(nil).GetMeta), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockGojo) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockGojoMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockGojo)(nil).GetSession), arg0, arg1)
}

// GetStudio mocks base method.
func (m *MockGojo) GetStudio(arg0 context.Context, arg1 int32) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudio indicates an expected call of GetStudio.
func (mr *MockGojoMockRecorder) GetStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudio", reflect.TypeOf((*MockGojo)(nil).GetStudio), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockGojo) GetUserByID(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockGojoMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGojo)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockGojo) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockGojoMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockGojo)(nil).GetUserByUsername), arg0, arg1)
}

// ListAnimeMovieGenres mocks base method.
func (m *MockGojo) ListAnimeMovieGenres(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieGenres", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieGenres indicates an expected call of ListAnimeMovieGenres.
func (mr *MockGojoMockRecorder) ListAnimeMovieGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieGenres", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieGenres), arg0, arg1)
}

// ListAnimeMovieImages mocks base method.
func (m *MockGojo) ListAnimeMovieImages(arg0 context.Context, arg1 db.ListAnimeMovieImagesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieImages indicates an expected call of ListAnimeMovieImages.
func (mr *MockGojoMockRecorder) ListAnimeMovieImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieImages), arg0, arg1)
}

// ListAnimeMovieLinksByAnimeID mocks base method.
func (m *MockGojo) ListAnimeMovieLinksByAnimeID(arg0 context.Context, arg1 int64) ([]db.AnimeMovieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieLinksByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieLinksByAnimeID indicates an expected call of ListAnimeMovieLinksByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeMovieLinksByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieLinksByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieLinksByAnimeID), arg0, arg1)
}

// ListAnimeMovieMetas mocks base method.
func (m *MockGojo) ListAnimeMovieMetas(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieMetas", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieMetas indicates an expected call of ListAnimeMovieMetas.
func (mr *MockGojoMockRecorder) ListAnimeMovieMetas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieMetas", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieMetas), arg0, arg1)
}

// ListAnimeMovieResourcesByAnimeID mocks base method.
func (m *MockGojo) ListAnimeMovieResourcesByAnimeID(arg0 context.Context, arg1 int64) ([]db.AnimeMovieResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieResourcesByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieResourcesByAnimeID indicates an expected call of ListAnimeMovieResourcesByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeMovieResourcesByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieResourcesByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieResourcesByAnimeID), arg0, arg1)
}

// ListAnimeMovieServerDubTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieServerDubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerDubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerDubTorrents indicates an expected call of ListAnimeMovieServerDubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerDubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerDubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerDubTorrents), arg0, arg1)
}

// ListAnimeMovieServerDubVideos mocks base method.
func (m *MockGojo) ListAnimeMovieServerDubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerDubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerDubVideos indicates an expected call of ListAnimeMovieServerDubVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerDubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerDubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerDubVideos), arg0, arg1)
}

// ListAnimeMovieServerSubTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieServerSubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerSubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerSubTorrents indicates an expected call of ListAnimeMovieServerSubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerSubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerSubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerSubTorrents), arg0, arg1)
}

// ListAnimeMovieServerSubVideos mocks base method.
func (m *MockGojo) ListAnimeMovieServerSubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerSubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerSubVideos indicates an expected call of ListAnimeMovieServerSubVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerSubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerSubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerSubVideos), arg0, arg1)
}

// ListAnimeMovieServers mocks base method.
func (m *MockGojo) ListAnimeMovieServers(arg0 context.Context, arg1 db.ListAnimeMovieServersParams) ([]db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServers indicates an expected call of ListAnimeMovieServers.
func (mr *MockGojoMockRecorder) ListAnimeMovieServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServers", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServers), arg0, arg1)
}

// ListAnimeMovieStudios mocks base method.
func (m *MockGojo) ListAnimeMovieStudios(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieStudios", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieStudios indicates an expected call of ListAnimeMovieStudios.
func (mr *MockGojoMockRecorder) ListAnimeMovieStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieStudios", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieStudios), arg0, arg1)
}

// ListAnimeMovieTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieTorrents(arg0 context.Context, arg1 db.ListAnimeMovieTorrentsParams) ([]db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieTorrents indicates an expected call of ListAnimeMovieTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieTorrents), arg0, arg1)
}

// ListAnimeMovieVideos mocks base method.
func (m *MockGojo) ListAnimeMovieVideos(arg0 context.Context, arg1 db.ListAnimeMovieVideosParams) ([]db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieVideos indicates an expected call of ListAnimeMovieVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieVideos), arg0, arg1)
}

// ListAnimeMovies mocks base method.
func (m *MockGojo) ListAnimeMovies(arg0 context.Context, arg1 db.ListAnimeMoviesParams) ([]db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovies", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovies indicates an expected call of ListAnimeMovies.
func (mr *MockGojoMockRecorder) ListAnimeMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovies", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovies), arg0, arg1)
}

// ListAnimeSeasonResourcesByAnimeID mocks base method.
func (m *MockGojo) ListAnimeSeasonResourcesByAnimeID(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonResourcesByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonResourcesByAnimeID indicates an expected call of ListAnimeSeasonResourcesByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeSeasonResourcesByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonResourcesByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonResourcesByAnimeID), arg0, arg1)
}

// ListAnimeSerieEpisodeMetasByEpisode mocks base method.
func (m *MockGojo) ListAnimeSerieEpisodeMetasByEpisode(arg0 context.Context, arg1 db.ListAnimeSerieEpisodeMetasByEpisodeParams) ([]db.AnimeSerieEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieEpisodeMetasByEpisode", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieEpisodeMetasByEpisode indicates an expected call of ListAnimeSerieEpisodeMetasByEpisode.
func (mr *MockGojoMockRecorder) ListAnimeSerieEpisodeMetasByEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieEpisodeMetasByEpisode", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieEpisodeMetasByEpisode), arg0, arg1)
}

// ListAnimeSerieEpisodeServersByEpisode mocks base method.
func (m *MockGojo) ListAnimeSerieEpisodeServersByEpisode(arg0 context.Context, arg1 db.ListAnimeSerieEpisodeServersByEpisodeParams) ([]db.AnimeSerieEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieEpisodeServersByEpisode", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieEpisodeServersByEpisode indicates an expected call of ListAnimeSerieEpisodeServersByEpisode.
func (mr *MockGojoMockRecorder) ListAnimeSerieEpisodeServersByEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieEpisodeServersByEpisode", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieEpisodeServersByEpisode), arg0, arg1)
}

// ListAnimeSerieEpisodesBySeasonID mocks base method.
func (m *MockGojo) ListAnimeSerieEpisodesBySeasonID(arg0 context.Context, arg1 db.ListAnimeSerieEpisodesBySeasonIDParams) ([]db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieEpisodesBySeasonID", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieEpisodesBySeasonID indicates an expected call of ListAnimeSerieEpisodesBySeasonID.
func (mr *MockGojoMockRecorder) ListAnimeSerieEpisodesBySeasonID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieEpisodesBySeasonID", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieEpisodesBySeasonID), arg0, arg1)
}

// ListAnimeSerieGenres mocks base method.
func (m *MockGojo) ListAnimeSerieGenres(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieGenres", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieGenres indicates an expected call of ListAnimeSerieGenres.
func (mr *MockGojoMockRecorder) ListAnimeSerieGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieGenres", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieGenres), arg0, arg1)
}

// ListAnimeSerieImages mocks base method.
func (m *MockGojo) ListAnimeSerieImages(arg0 context.Context, arg1 db.ListAnimeSerieImagesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieImages indicates an expected call of ListAnimeSerieImages.
func (mr *MockGojoMockRecorder) ListAnimeSerieImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieImages), arg0, arg1)
}

// ListAnimeSerieLinksByAnimeID mocks base method.
func (m *MockGojo) ListAnimeSerieLinksByAnimeID(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieLinksByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieLinksByAnimeID indicates an expected call of ListAnimeSerieLinksByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeSerieLinksByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieLinksByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieLinksByAnimeID), arg0, arg1)
}

// ListAnimeSerieMetas mocks base method.
func (m *MockGojo) ListAnimeSerieMetas(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieMetas", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieMetas indicates an expected call of ListAnimeSerieMetas.
func (mr *MockGojoMockRecorder) ListAnimeSerieMetas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieMetas", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieMetas), arg0, arg1)
}

// ListAnimeSerieSeasonEpisodesBySeason mocks base method.
func (m *MockGojo) ListAnimeSerieSeasonEpisodesBySeason(arg0 context.Context, arg1 db.ListAnimeSerieSeasonEpisodesBySeasonParams) ([]db.AnimeSerieSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieSeasonEpisodesBySeason", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieSeasonEpisodesBySeason indicates an expected call of ListAnimeSerieSeasonEpisodesBySeason.
func (mr *MockGojoMockRecorder) ListAnimeSerieSeasonEpisodesBySeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieSeasonEpisodesBySeason", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieSeasonEpisodesBySeason), arg0, arg1)
}

// ListAnimeSerieSeasonMetasBySeason mocks base method.
func (m *MockGojo) ListAnimeSerieSeasonMetasBySeason(arg0 context.Context, arg1 db.ListAnimeSerieSeasonMetasBySeasonParams) ([]db.AnimeSerieSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieSeasonMetasBySeason", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieSeasonMetasBySeason indicates an expected call of ListAnimeSerieSeasonMetasBySeason.
func (mr *MockGojoMockRecorder) ListAnimeSerieSeasonMetasBySeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieSeasonMetasBySeason", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieSeasonMetasBySeason), arg0, arg1)
}

// ListAnimeSerieSeasonsByAnimeID mocks base method.
func (m *MockGojo) ListAnimeSerieSeasonsByAnimeID(arg0 context.Context, arg1 db.ListAnimeSerieSeasonsByAnimeIDParams) ([]db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieSeasonsByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieSeasonsByAnimeID indicates an expected call of ListAnimeSerieSeasonsByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeSerieSeasonsByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieSeasonsByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieSeasonsByAnimeID), arg0, arg1)
}

// ListAnimeSerieServerDubTorrents mocks base method.
func (m *MockGojo) ListAnimeSerieServerDubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeSerieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieServerDubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieServerDubTorrents indicates an expected call of ListAnimeSerieServerDubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeSerieServerDubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieServerDubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieServerDubTorrents), arg0, arg1)
}

// ListAnimeSerieServerDubVideos mocks base method.
func (m *MockGojo) ListAnimeSerieServerDubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeSerieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieServerDubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieServerDubVideos indicates an expected call of ListAnimeSerieServerDubVideos.
func (mr *MockGojoMockRecorder) ListAnimeSerieServerDubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieServerDubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieServerDubVideos), arg0, arg1)
}

// ListAnimeSerieServerSubTorrents mocks base method.
func (m *MockGojo) ListAnimeSerieServerSubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeSerieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieServerSubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieServerSubTorrents indicates an expected call of ListAnimeSerieServerSubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeSerieServerSubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieServerSubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieServerSubTorrents), arg0, arg1)
}

// ListAnimeSerieServerSubVideos mocks base method.
func (m *MockGojo) ListAnimeSerieServerSubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeSerieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieServerSubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieServerSubVideos indicates an expected call of ListAnimeSerieServerSubVideos.
func (mr *MockGojoMockRecorder) ListAnimeSerieServerSubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieServerSubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieServerSubVideos), arg0, arg1)
}

// ListAnimeSerieServers mocks base method.
func (m *MockGojo) ListAnimeSerieServers(arg0 context.Context, arg1 db.ListAnimeSerieServersParams) ([]db.AnimeSerieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieServers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieServers indicates an expected call of ListAnimeSerieServers.
func (mr *MockGojoMockRecorder) ListAnimeSerieServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieServers", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieServers), arg0, arg1)
}

// ListAnimeSerieStudios mocks base method.
func (m *MockGojo) ListAnimeSerieStudios(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieStudios", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieStudios indicates an expected call of ListAnimeSerieStudios.
func (mr *MockGojoMockRecorder) ListAnimeSerieStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieStudios", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieStudios), arg0, arg1)
}

// ListAnimeSerieTorrents mocks base method.
func (m *MockGojo) ListAnimeSerieTorrents(arg0 context.Context, arg1 db.ListAnimeSerieTorrentsParams) ([]db.AnimeSerieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieTorrents indicates an expected call of ListAnimeSerieTorrents.
func (mr *MockGojoMockRecorder) ListAnimeSerieTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieTorrents), arg0, arg1)
}

// ListAnimeSerieVideos mocks base method.
func (m *MockGojo) ListAnimeSerieVideos(arg0 context.Context, arg1 db.ListAnimeSerieVideosParams) ([]db.AnimeSerieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieVideos indicates an expected call of ListAnimeSerieVideos.
func (mr *MockGojoMockRecorder) ListAnimeSerieVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieVideos), arg0, arg1)
}

// ListAnimeSeries mocks base method.
func (m *MockGojo) ListAnimeSeries(arg0 context.Context, arg1 db.ListAnimeSeriesParams) ([]db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeries", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeries indicates an expected call of ListAnimeSeries.
func (mr *MockGojoMockRecorder) ListAnimeSeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeries", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeries), arg0, arg1)
}

// ListGenres mocks base method.
func (m *MockGojo) ListGenres(arg0 context.Context, arg1 db.ListGenresParams) ([]db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGenres", arg0, arg1)
	ret0, _ := ret[0].([]db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenres indicates an expected call of ListGenres.
func (mr *MockGojoMockRecorder) ListGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenres", reflect.TypeOf((*MockGojo)(nil).ListGenres), arg0, arg1)
}

// ListLanguages mocks base method.
func (m *MockGojo) ListLanguages(arg0 context.Context, arg1 db.ListLanguagesParams) ([]db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", arg0, arg1)
	ret0, _ := ret[0].([]db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguages indicates an expected call of ListLanguages.
func (mr *MockGojoMockRecorder) ListLanguages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockGojo)(nil).ListLanguages), arg0, arg1)
}

// ListStudios mocks base method.
func (m *MockGojo) ListStudios(arg0 context.Context, arg1 db.ListStudiosParams) ([]db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudios", arg0, arg1)
	ret0, _ := ret[0].([]db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudios indicates an expected call of ListStudios.
func (mr *MockGojoMockRecorder) ListStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudios", reflect.TypeOf((*MockGojo)(nil).ListStudios), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockGojo) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGojoMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGojo)(nil).ListUsers), arg0, arg1)
}

// RefreshSessions mocks base method.
func (m *MockGojo) RefreshSessions(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSessions indicates an expected call of RefreshSessions.
func (mr *MockGojoMockRecorder) RefreshSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSessions", reflect.TypeOf((*MockGojo)(nil).RefreshSessions), arg0, arg1)
}

// RenewSessionTx mocks base method.
func (m *MockGojo) RenewSessionTx(arg0 context.Context, arg1 db.RenewSessionTxParams) (db.RenewSessionTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewSessionTx", arg0, arg1)
	ret0, _ := ret[0].(db.RenewSessionTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewSessionTx indicates an expected call of RenewSessionTx.
func (mr *MockGojoMockRecorder) RenewSessionTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewSessionTx", reflect.TypeOf((*MockGojo)(nil).RenewSessionTx), arg0, arg1)
}

// UpdateAnimeImage mocks base method.
func (m *MockGojo) UpdateAnimeImage(arg0 context.Context, arg1 db.UpdateAnimeImageParams) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeImage indicates an expected call of UpdateAnimeImage.
func (mr *MockGojoMockRecorder) UpdateAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeImage", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeImage), arg0, arg1)
}

// UpdateAnimeLink mocks base method.
func (m *MockGojo) UpdateAnimeLink(arg0 context.Context, arg1 db.UpdateAnimeLinkParams) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeLink indicates an expected call of UpdateAnimeLink.
func (mr *MockGojoMockRecorder) UpdateAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeLink", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeLink), arg0, arg1)
}

// UpdateAnimeMovie mocks base method.
func (m *MockGojo) UpdateAnimeMovie(arg0 context.Context, arg1 db.UpdateAnimeMovieParams) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovie indicates an expected call of UpdateAnimeMovie.
func (mr *MockGojoMockRecorder) UpdateAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovie", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovie), arg0, arg1)
}

// UpdateAnimeMovieMeta mocks base method.
func (m *MockGojo) UpdateAnimeMovieMeta(arg0 context.Context, arg1 db.UpdateAnimeMovieMetaParams) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieMeta indicates an expected call of UpdateAnimeMovieMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieMeta), arg0, arg1)
}

// UpdateAnimeMovieServer mocks base method.
func (m *MockGojo) UpdateAnimeMovieServer(arg0 context.Context, arg1 db.UpdateAnimeMovieServerParams) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServer indicates an expected call of UpdateAnimeMovieServer.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServer), arg0, arg1)
}

// UpdateAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerDubTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieServerDubTorrentParams) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerDubTorrent indicates an expected call of UpdateAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerDubTorrent), arg0, arg1)
}

// UpdateAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerDubVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieServerDubVideoParams) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerDubVideo indicates an expected call of UpdateAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerDubVideo), arg0, arg1)
}

// UpdateAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerSubTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieServerSubTorrentParams) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerSubTorrent indicates an expected call of UpdateAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerSubTorrent), arg0, arg1)
}

// UpdateAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerSubVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieServerSubVideoParams) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerSubVideo indicates an expected call of UpdateAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerSubVideo), arg0, arg1)
}

// UpdateAnimeMovieTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieTorrentParams) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieTorrent indicates an expected call of UpdateAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieTorrent), arg0, arg1)
}

// UpdateAnimeMovieVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieVideoParams) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieVideo indicates an expected call of UpdateAnimeMovieVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieVideo), arg0, arg1)
}

// UpdateAnimeResource mocks base method.
func (m *MockGojo) UpdateAnimeResource(arg0 context.Context, arg1 db.UpdateAnimeResourceParams) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeResource indicates an expected call of UpdateAnimeResource.
func (mr *MockGojoMockRecorder) UpdateAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeResource", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeResource), arg0, arg1)
}

// UpdateAnimeSerie mocks base method.
func (m *MockGojo) UpdateAnimeSerie(arg0 context.Context, arg1 db.UpdateAnimeSerieParams) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerie indicates an expected call of UpdateAnimeSerie.
func (mr *MockGojoMockRecorder) UpdateAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerie", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerie), arg0, arg1)
}

// UpdateAnimeSerieEpisode mocks base method.
func (m *MockGojo) UpdateAnimeSerieEpisode(arg0 context.Context, arg1 db.UpdateAnimeSerieEpisodeParams) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieEpisode indicates an expected call of UpdateAnimeSerieEpisode.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieEpisode", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieEpisode), arg0, arg1)
}

// UpdateAnimeSerieEpisodeMeta mocks base method.
func (m *MockGojo) UpdateAnimeSerieEpisodeMeta(arg0 context.Context, arg1 db.UpdateAnimeSerieEpisodeMetaParams) (db.AnimeSerieEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieEpisodeMeta indicates an expected call of UpdateAnimeSerieEpisodeMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieEpisodeMeta), arg0, arg1)
}

// UpdateAnimeSerieEpisodeServer mocks base method.
func (m *MockGojo) UpdateAnimeSerieEpisodeServer(arg0 context.Context, arg1 db.UpdateAnimeSerieEpisodeServerParams) (db.AnimeSerieEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieEpisodeServer indicates an expected call of UpdateAnimeSerieEpisodeServer.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieEpisodeServer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieEpisodeServer), arg0, arg1)
}

// UpdateAnimeSerieMeta mocks base method.
func (m *MockGojo) UpdateAnimeSerieMeta(arg0 context.Context, arg1 db.UpdateAnimeSerieMetaParams) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieMeta indicates an expected call of UpdateAnimeSerieMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieMeta), arg0, arg1)
}

// UpdateAnimeSerieSeason mocks base method.
func (m *MockGojo) UpdateAnimeSerieSeason(arg0 context.Context, arg1 db.UpdateAnimeSerieSeasonParams) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieSeason indicates an expected call of UpdateAnimeSerieSeason.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieSeason", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieSeason), arg0, arg1)
}

// UpdateAnimeSerieSeasonEpisode mocks base method.
func (m *MockGojo) UpdateAnimeSerieSeasonEpisode(arg0 context.Context, arg1 db.UpdateAnimeSerieSeasonEpisodeParams) (db.AnimeSerieSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieSeasonEpisode indicates an expected call of UpdateAnimeSerieSeasonEpisode.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieSeasonEpisode), arg0, arg1)
}

// UpdateAnimeSerieSeasonMeta mocks base method.
func (m *MockGojo) UpdateAnimeSerieSeasonMeta(arg0 context.Context, arg1 db.UpdateAnimeSerieSeasonMetaParams) (db.AnimeSerieSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieSeasonMeta indicates an expected call of UpdateAnimeSerieSeasonMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieSeasonMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieSeasonMeta), arg0, arg1)
}

// UpdateAnimeSerieServer mocks base method.
func (m *MockGojo) UpdateAnimeSerieServer(arg0 context.Context, arg1 db.UpdateAnimeSerieServerParams) (db.AnimeSerieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieServer indicates an expected call of UpdateAnimeSerieServer.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieServer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieServer), arg0, arg1)
}

// UpdateAnimeSerieServerDubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeSerieServerDubTorrent(arg0 context.Context, arg1 db.UpdateAnimeSerieServerDubTorrentParams) (db.AnimeSerieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieServerDubTorrent indicates an expected call of UpdateAnimeSerieServerDubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieServerDubTorrent), arg0, arg1)
}

// UpdateAnimeSerieServerDubVideo mocks base method.
func (m *MockGojo) UpdateAnimeSerieServerDubVideo(arg0 context.Context, arg1 db.UpdateAnimeSerieServerDubVideoParams) (db.AnimeSerieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieServerDubVideo indicates an expected call of UpdateAnimeSerieServerDubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieServerDubVideo), arg0, arg1)
}

// UpdateAnimeSerieServerSubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeSerieServerSubTorrent(arg0 context.Context, arg1 db.UpdateAnimeSerieServerSubTorrentParams) (db.AnimeSerieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieServerSubTorrent indicates an expected call of UpdateAnimeSerieServerSubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieServerSubTorrent), arg0, arg1)
}

// UpdateAnimeSerieServerSubVideo mocks base method.
func (m *MockGojo) UpdateAnimeSerieServerSubVideo(arg0 context.Context, arg1 db.UpdateAnimeSerieServerSubVideoParams) (db.AnimeSerieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieServerSubVideo indicates an expected call of UpdateAnimeSerieServerSubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieServerSubVideo), arg0, arg1)
}

// UpdateAnimeSerieTorrent mocks base method.
func (m *MockGojo) UpdateAnimeSerieTorrent(arg0 context.Context, arg1 db.UpdateAnimeSerieTorrentParams) (db.AnimeSerieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieTorrent indicates an expected call of UpdateAnimeSerieTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieTorrent), arg0, arg1)
}

// UpdateAnimeSerieVideo mocks base method.
func (m *MockGojo) UpdateAnimeSerieVideo(arg0 context.Context, arg1 db.UpdateAnimeSerieVideoParams) (db.AnimeSerieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieVideo indicates an expected call of UpdateAnimeSerieVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieVideo), arg0, arg1)
}

// UpdateGenre mocks base method.
func (m *MockGojo) UpdateGenre(arg0 context.Context, arg1 db.UpdateGenreParams) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockGojoMockRecorder) UpdateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockGojo)(nil).UpdateGenre), arg0, arg1)
}

// UpdateLanguage mocks base method.
func (m *MockGojo) UpdateLanguage(arg0 context.Context, arg1 db.UpdateLanguageParams) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLanguage indicates an expected call of UpdateLanguage.
func (mr *MockGojoMockRecorder) UpdateLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLanguage", reflect.TypeOf((*MockGojo)(nil).UpdateLanguage), arg0, arg1)
}

// UpdateMeta mocks base method.
func (m *MockGojo) UpdateMeta(arg0 context.Context, arg1 db.UpdateMetaParams) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeta indicates an expected call of UpdateMeta.
func (mr *MockGojoMockRecorder) UpdateMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockGojo)(nil).UpdateMeta), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockGojo) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockGojoMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockGojo)(nil).UpdateSession), arg0, arg1)
}

// UpdateStudio mocks base method.
func (m *MockGojo) UpdateStudio(arg0 context.Context, arg1 db.UpdateStudioParams) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudio indicates an expected call of UpdateStudio.
func (mr *MockGojoMockRecorder) UpdateStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudio", reflect.TypeOf((*MockGojo)(nil).UpdateStudio), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockGojo) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockGojoMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGojo)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockGojo) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockGojoMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockGojo)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockGojo) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockGojoMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockGojo)(nil).VerifyEmailTx), arg0, arg1)
}
