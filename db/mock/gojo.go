// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dj-yacine-flutter/gojo/db/database (interfaces: Gojo)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/dj-yacine-flutter/gojo/db/database"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGojo is a mock of Gojo interface.
type MockGojo struct {
	ctrl     *gomock.Controller
	recorder *MockGojoMockRecorder
}

// MockGojoMockRecorder is the mock recorder for MockGojo.
type MockGojoMockRecorder struct {
	mock *MockGojo
}

// NewMockGojo creates a new mock instance.
func NewMockGojo(ctrl *gomock.Controller) *MockGojo {
	mock := &MockGojo{ctrl: ctrl}
	mock.recorder = &MockGojoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGojo) EXPECT() *MockGojoMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockGojo) CreateActor(arg0 context.Context, arg1 db.CreateActorParams) (db.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", arg0, arg1)
	ret0, _ := ret[0].(db.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockGojoMockRecorder) CreateActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockGojo)(nil).CreateActor), arg0, arg1)
}

// CreateActorsTx mocks base method.
func (m *MockGojo) CreateActorsTx(arg0 context.Context, arg1 db.CreateActorsTxParams) (db.CreateActorsTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActorsTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateActorsTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActorsTx indicates an expected call of CreateActorsTx.
func (mr *MockGojoMockRecorder) CreateActorsTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActorsTx", reflect.TypeOf((*MockGojo)(nil).CreateActorsTx), arg0, arg1)
}

// CreateAnimeCharacter mocks base method.
func (m *MockGojo) CreateAnimeCharacter(arg0 context.Context, arg1 db.CreateAnimeCharacterParams) (db.AnimeCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeCharacter indicates an expected call of CreateAnimeCharacter.
func (mr *MockGojoMockRecorder) CreateAnimeCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeCharacter", reflect.TypeOf((*MockGojo)(nil).CreateAnimeCharacter), arg0, arg1)
}

// CreateAnimeEpisode mocks base method.
func (m *MockGojo) CreateAnimeEpisode(arg0 context.Context, arg1 db.CreateAnimeEpisodeParams) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisode indicates an expected call of CreateAnimeEpisode.
func (mr *MockGojoMockRecorder) CreateAnimeEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisode", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisode), arg0, arg1)
}

// CreateAnimeEpisodeDataTx mocks base method.
func (m *MockGojo) CreateAnimeEpisodeDataTx(arg0 context.Context, arg1 db.CreateAnimeEpisodeDataTxParams) (db.CreateAnimeEpisodeDataTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeDataTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeEpisodeDataTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeDataTx indicates an expected call of CreateAnimeEpisodeDataTx.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeDataTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeDataTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeDataTx), arg0, arg1)
}

// CreateAnimeEpisodeMeta mocks base method.
func (m *MockGojo) CreateAnimeEpisodeMeta(arg0 context.Context, arg1 db.CreateAnimeEpisodeMetaParams) (db.AnimeEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeMeta indicates an expected call of CreateAnimeEpisodeMeta.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeMeta), arg0, arg1)
}

// CreateAnimeEpisodeMetasTx mocks base method.
func (m *MockGojo) CreateAnimeEpisodeMetasTx(arg0 context.Context, arg1 db.CreateAnimeEpisodeMetasTxParams) (db.CreateAnimeEpisodeMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeEpisodeMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeMetasTx indicates an expected call of CreateAnimeEpisodeMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeMetasTx), arg0, arg1)
}

// CreateAnimeEpisodeServer mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServer(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServer indicates an expected call of CreateAnimeEpisodeServer.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServer), arg0, arg1)
}

// CreateAnimeEpisodeServerDubTorrent mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServerDubTorrent(arg0 context.Context, arg1 db.CreateAnimeEpisodeServerDubTorrentParams) (db.AnimeEpisodeServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServerDubTorrent indicates an expected call of CreateAnimeEpisodeServerDubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServerDubTorrent), arg0, arg1)
}

// CreateAnimeEpisodeServerDubVideo mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServerDubVideo(arg0 context.Context, arg1 db.CreateAnimeEpisodeServerDubVideoParams) (db.AnimeEpisodeServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServerDubVideo indicates an expected call of CreateAnimeEpisodeServerDubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServerDubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServerDubVideo), arg0, arg1)
}

// CreateAnimeEpisodeServerSubTorrent mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServerSubTorrent(arg0 context.Context, arg1 db.CreateAnimeEpisodeServerSubTorrentParams) (db.AnimeEpisodeServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServerSubTorrent indicates an expected call of CreateAnimeEpisodeServerSubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServerSubTorrent), arg0, arg1)
}

// CreateAnimeEpisodeServerSubVideo mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServerSubVideo(arg0 context.Context, arg1 db.CreateAnimeEpisodeServerSubVideoParams) (db.AnimeEpisodeServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServerSubVideo indicates an expected call of CreateAnimeEpisodeServerSubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServerSubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServerSubVideo), arg0, arg1)
}

// CreateAnimeEpisodeServerTx mocks base method.
func (m *MockGojo) CreateAnimeEpisodeServerTx(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeServerTx", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeServerTx indicates an expected call of CreateAnimeEpisodeServerTx.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeServerTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeServerTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeServerTx), arg0, arg1)
}

// CreateAnimeEpisodeTorrent mocks base method.
func (m *MockGojo) CreateAnimeEpisodeTorrent(arg0 context.Context, arg1 db.CreateAnimeEpisodeTorrentParams) (db.AnimeEpisodeTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeTorrent indicates an expected call of CreateAnimeEpisodeTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeTorrent), arg0, arg1)
}

// CreateAnimeEpisodeTx mocks base method.
func (m *MockGojo) CreateAnimeEpisodeTx(arg0 context.Context, arg1 db.CreateAnimeEpisodeTxParams) (db.CreateAnimeEpisodeTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeEpisodeTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeTx indicates an expected call of CreateAnimeEpisodeTx.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeTx), arg0, arg1)
}

// CreateAnimeEpisodeVideo mocks base method.
func (m *MockGojo) CreateAnimeEpisodeVideo(arg0 context.Context, arg1 db.CreateAnimeEpisodeVideoParams) (db.AnimeEpisodeVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeEpisodeVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeEpisodeVideo indicates an expected call of CreateAnimeEpisodeVideo.
func (mr *MockGojoMockRecorder) CreateAnimeEpisodeVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeEpisodeVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeEpisodeVideo), arg0, arg1)
}

// CreateAnimeImage mocks base method.
func (m *MockGojo) CreateAnimeImage(arg0 context.Context, arg1 db.CreateAnimeImageParams) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeImage indicates an expected call of CreateAnimeImage.
func (mr *MockGojoMockRecorder) CreateAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeImage), arg0, arg1)
}

// CreateAnimeLink mocks base method.
func (m *MockGojo) CreateAnimeLink(arg0 context.Context, arg1 db.CreateAnimeLinkParams) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeLink indicates an expected call of CreateAnimeLink.
func (mr *MockGojoMockRecorder) CreateAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeLink), arg0, arg1)
}

// CreateAnimeMovie mocks base method.
func (m *MockGojo) CreateAnimeMovie(arg0 context.Context, arg1 db.CreateAnimeMovieParams) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovie indicates an expected call of CreateAnimeMovie.
func (mr *MockGojoMockRecorder) CreateAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovie", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovie), arg0, arg1)
}

// CreateAnimeMovieBackdropImage mocks base method.
func (m *MockGojo) CreateAnimeMovieBackdropImage(arg0 context.Context, arg1 db.CreateAnimeMovieBackdropImageParams) (db.AnimeMovieBackdropImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieBackdropImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieBackdropImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieBackdropImage indicates an expected call of CreateAnimeMovieBackdropImage.
func (mr *MockGojoMockRecorder) CreateAnimeMovieBackdropImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieBackdropImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieBackdropImage), arg0, arg1)
}

// CreateAnimeMovieCharacter mocks base method.
func (m *MockGojo) CreateAnimeMovieCharacter(arg0 context.Context, arg1 db.CreateAnimeMovieCharacterParams) (db.AnimeMovieCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieCharacter indicates an expected call of CreateAnimeMovieCharacter.
func (mr *MockGojoMockRecorder) CreateAnimeMovieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieCharacter", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieCharacter), arg0, arg1)
}

// CreateAnimeMovieDataTx mocks base method.
func (m *MockGojo) CreateAnimeMovieDataTx(arg0 context.Context, arg1 db.CreateAnimeMovieDataTxParams) (db.CreateAnimeMovieDataTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieDataTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieDataTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieDataTx indicates an expected call of CreateAnimeMovieDataTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieDataTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieDataTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieDataTx), arg0, arg1)
}

// CreateAnimeMovieGenre mocks base method.
func (m *MockGojo) CreateAnimeMovieGenre(arg0 context.Context, arg1 db.CreateAnimeMovieGenreParams) (db.AnimeMovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieGenre indicates an expected call of CreateAnimeMovieGenre.
func (mr *MockGojoMockRecorder) CreateAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieGenre), arg0, arg1)
}

// CreateAnimeMovieImageTx mocks base method.
func (m *MockGojo) CreateAnimeMovieImageTx(arg0 context.Context, arg1 db.CreateAnimeMovieImageTxParams) (db.CreateAnimeMovieImageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieImageTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieImageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieImageTx indicates an expected call of CreateAnimeMovieImageTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieImageTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieImageTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieImageTx), arg0, arg1)
}

// CreateAnimeMovieInfoTx mocks base method.
func (m *MockGojo) CreateAnimeMovieInfoTx(arg0 context.Context, arg1 db.CreateAnimeMovieInfoTxParams) (db.CreateAnimeMovieInfoTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieInfoTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieInfoTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieInfoTx indicates an expected call of CreateAnimeMovieInfoTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieInfoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieInfoTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieInfoTx), arg0, arg1)
}

// CreateAnimeMovieLink mocks base method.
func (m *MockGojo) CreateAnimeMovieLink(arg0 context.Context, arg1 db.CreateAnimeMovieLinkParams) (db.AnimeMovieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieLink indicates an expected call of CreateAnimeMovieLink.
func (mr *MockGojoMockRecorder) CreateAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieLink), arg0, arg1)
}

// CreateAnimeMovieLinkTx mocks base method.
func (m *MockGojo) CreateAnimeMovieLinkTx(arg0 context.Context, arg1 db.CreateAnimeMovieLinkTxParams) (db.CreateAnimeMovieLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieLinkTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieLinkTx indicates an expected call of CreateAnimeMovieLinkTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieLinkTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieLinkTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieLinkTx), arg0, arg1)
}

// CreateAnimeMovieLogoImage mocks base method.
func (m *MockGojo) CreateAnimeMovieLogoImage(arg0 context.Context, arg1 db.CreateAnimeMovieLogoImageParams) (db.AnimeMovieLogoImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieLogoImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieLogoImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieLogoImage indicates an expected call of CreateAnimeMovieLogoImage.
func (mr *MockGojoMockRecorder) CreateAnimeMovieLogoImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieLogoImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieLogoImage), arg0, arg1)
}

// CreateAnimeMovieMeta mocks base method.
func (m *MockGojo) CreateAnimeMovieMeta(arg0 context.Context, arg1 db.CreateAnimeMovieMetaParams) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieMeta indicates an expected call of CreateAnimeMovieMeta.
func (mr *MockGojoMockRecorder) CreateAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieMeta), arg0, arg1)
}

// CreateAnimeMovieMetasTx mocks base method.
func (m *MockGojo) CreateAnimeMovieMetasTx(arg0 context.Context, arg1 db.CreateAnimeMovieMetasTxParams) (db.CreateAnimeMovieMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieMetasTx indicates an expected call of CreateAnimeMovieMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieMetasTx), arg0, arg1)
}

// CreateAnimeMovieOfficialTitle mocks base method.
func (m *MockGojo) CreateAnimeMovieOfficialTitle(arg0 context.Context, arg1 db.CreateAnimeMovieOfficialTitleParams) (db.AnimeMovieOfficialTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieOfficialTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieOfficialTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieOfficialTitle indicates an expected call of CreateAnimeMovieOfficialTitle.
func (mr *MockGojoMockRecorder) CreateAnimeMovieOfficialTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieOfficialTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieOfficialTitle), arg0, arg1)
}

// CreateAnimeMovieOtherTitle mocks base method.
func (m *MockGojo) CreateAnimeMovieOtherTitle(arg0 context.Context, arg1 db.CreateAnimeMovieOtherTitleParams) (db.AnimeMovieOtherTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieOtherTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieOtherTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieOtherTitle indicates an expected call of CreateAnimeMovieOtherTitle.
func (mr *MockGojoMockRecorder) CreateAnimeMovieOtherTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieOtherTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieOtherTitle), arg0, arg1)
}

// CreateAnimeMoviePosterImage mocks base method.
func (m *MockGojo) CreateAnimeMoviePosterImage(arg0 context.Context, arg1 db.CreateAnimeMoviePosterImageParams) (db.AnimeMoviePosterImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMoviePosterImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMoviePosterImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMoviePosterImage indicates an expected call of CreateAnimeMoviePosterImage.
func (mr *MockGojoMockRecorder) CreateAnimeMoviePosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMoviePosterImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMoviePosterImage), arg0, arg1)
}

// CreateAnimeMovieResource mocks base method.
func (m *MockGojo) CreateAnimeMovieResource(arg0 context.Context, arg1 db.CreateAnimeMovieResourceParams) (db.AnimeMovieResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieResource indicates an expected call of CreateAnimeMovieResource.
func (mr *MockGojoMockRecorder) CreateAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieResource), arg0, arg1)
}

// CreateAnimeMovieResourceTx mocks base method.
func (m *MockGojo) CreateAnimeMovieResourceTx(arg0 context.Context, arg1 db.CreateAnimeMovieResourceTxParams) (db.CreateAnimeMovieResourceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieResourceTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieResourceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieResourceTx indicates an expected call of CreateAnimeMovieResourceTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieResourceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieResourceTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieResourceTx), arg0, arg1)
}

// CreateAnimeMovieServer mocks base method.
func (m *MockGojo) CreateAnimeMovieServer(arg0 context.Context, arg1 int64) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServer indicates an expected call of CreateAnimeMovieServer.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServer), arg0, arg1)
}

// CreateAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieServerDubTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieServerDubTorrentParams) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerDubTorrent indicates an expected call of CreateAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerDubTorrent), arg0, arg1)
}

// CreateAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieServerDubVideo(arg0 context.Context, arg1 db.CreateAnimeMovieServerDubVideoParams) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerDubVideo indicates an expected call of CreateAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerDubVideo), arg0, arg1)
}

// CreateAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieServerSubTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieServerSubTorrentParams) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerSubTorrent indicates an expected call of CreateAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerSubTorrent), arg0, arg1)
}

// CreateAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieServerSubVideo(arg0 context.Context, arg1 db.CreateAnimeMovieServerSubVideoParams) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieServerSubVideo indicates an expected call of CreateAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieServerSubVideo), arg0, arg1)
}

// CreateAnimeMovieShortTitle mocks base method.
func (m *MockGojo) CreateAnimeMovieShortTitle(arg0 context.Context, arg1 db.CreateAnimeMovieShortTitleParams) (db.AnimeMovieShortTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieShortTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieShortTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieShortTitle indicates an expected call of CreateAnimeMovieShortTitle.
func (mr *MockGojoMockRecorder) CreateAnimeMovieShortTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieShortTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieShortTitle), arg0, arg1)
}

// CreateAnimeMovieStudio mocks base method.
func (m *MockGojo) CreateAnimeMovieStudio(arg0 context.Context, arg1 db.CreateAnimeMovieStudioParams) (db.AnimeMovieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieStudio indicates an expected call of CreateAnimeMovieStudio.
func (mr *MockGojoMockRecorder) CreateAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieStudio), arg0, arg1)
}

// CreateAnimeMovieTag mocks base method.
func (m *MockGojo) CreateAnimeMovieTag(arg0 context.Context, arg1 db.CreateAnimeMovieTagParams) (db.AnimeMovieTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTag indicates an expected call of CreateAnimeMovieTag.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTag", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTag), arg0, arg1)
}

// CreateAnimeMovieTagTx mocks base method.
func (m *MockGojo) CreateAnimeMovieTagTx(arg0 context.Context, arg1 db.CreateAnimeMovieTagTxParams) (db.CreateAnimeMovieTagTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTagTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieTagTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTagTx indicates an expected call of CreateAnimeMovieTagTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTagTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTagTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTagTx), arg0, arg1)
}

// CreateAnimeMovieTitleTx mocks base method.
func (m *MockGojo) CreateAnimeMovieTitleTx(arg0 context.Context, arg1 db.CreateAnimeMovieTitleTxParams) (db.CreateAnimeMovieTitleTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTitleTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieTitleTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTitleTx indicates an expected call of CreateAnimeMovieTitleTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTitleTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTitleTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTitleTx), arg0, arg1)
}

// CreateAnimeMovieTorrent mocks base method.
func (m *MockGojo) CreateAnimeMovieTorrent(arg0 context.Context, arg1 db.CreateAnimeMovieTorrentParams) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTorrent indicates an expected call of CreateAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTorrent), arg0, arg1)
}

// CreateAnimeMovieTrailer mocks base method.
func (m *MockGojo) CreateAnimeMovieTrailer(arg0 context.Context, arg1 db.CreateAnimeMovieTrailerParams) (db.AnimeMovieTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTrailer indicates an expected call of CreateAnimeMovieTrailer.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTrailer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTrailer), arg0, arg1)
}

// CreateAnimeMovieTrailerTx mocks base method.
func (m *MockGojo) CreateAnimeMovieTrailerTx(arg0 context.Context, arg1 db.CreateAnimeMovieTrailerTxParams) (db.CreateAnimeMovieTrailerTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTrailerTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieTrailerTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTrailerTx indicates an expected call of CreateAnimeMovieTrailerTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTrailerTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTrailerTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTrailerTx), arg0, arg1)
}

// CreateAnimeMovieTranslationTitle mocks base method.
func (m *MockGojo) CreateAnimeMovieTranslationTitle(arg0 context.Context, arg1 db.CreateAnimeMovieTranslationTitleParams) (db.AnimeMovieTranslationTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTranslationTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTranslationTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTranslationTitle indicates an expected call of CreateAnimeMovieTranslationTitle.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTranslationTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTranslationTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTranslationTitle), arg0, arg1)
}

// CreateAnimeMovieTx mocks base method.
func (m *MockGojo) CreateAnimeMovieTx(arg0 context.Context, arg1 db.CreateAnimeMovieTxParams) (db.CreateAnimeMovieTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeMovieTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieTx indicates an expected call of CreateAnimeMovieTx.
func (mr *MockGojoMockRecorder) CreateAnimeMovieTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieTx), arg0, arg1)
}

// CreateAnimeMovieVideo mocks base method.
func (m *MockGojo) CreateAnimeMovieVideo(arg0 context.Context, arg1 db.CreateAnimeMovieVideoParams) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeMovieVideo indicates an expected call of CreateAnimeMovieVideo.
func (mr *MockGojoMockRecorder) CreateAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).CreateAnimeMovieVideo), arg0, arg1)
}

// CreateAnimeResource mocks base method.
func (m *MockGojo) CreateAnimeResource(arg0 context.Context, arg1 db.CreateAnimeResourceParams) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeResource indicates an expected call of CreateAnimeResource.
func (mr *MockGojoMockRecorder) CreateAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeResource), arg0, arg1)
}

// CreateAnimeSeason mocks base method.
func (m *MockGojo) CreateAnimeSeason(arg0 context.Context, arg1 db.CreateAnimeSeasonParams) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeason indicates an expected call of CreateAnimeSeason.
func (mr *MockGojoMockRecorder) CreateAnimeSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeason", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeason), arg0, arg1)
}

// CreateAnimeSeasonEpisode mocks base method.
func (m *MockGojo) CreateAnimeSeasonEpisode(arg0 context.Context, arg1 db.CreateAnimeSeasonEpisodeParams) (db.AnimeSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonEpisode indicates an expected call of CreateAnimeSeasonEpisode.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonEpisode), arg0, arg1)
}

// CreateAnimeSeasonGenre mocks base method.
func (m *MockGojo) CreateAnimeSeasonGenre(arg0 context.Context, arg1 db.CreateAnimeSeasonGenreParams) (db.AnimeSeasonGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonGenre indicates an expected call of CreateAnimeSeasonGenre.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonGenre", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonGenre), arg0, arg1)
}

// CreateAnimeSeasonImageTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonImageTx(arg0 context.Context, arg1 db.CreateAnimeSeasonImageTxParams) (db.CreateAnimeSeasonImageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonImageTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonImageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonImageTx indicates an expected call of CreateAnimeSeasonImageTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonImageTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonImageTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonImageTx), arg0, arg1)
}

// CreateAnimeSeasonInfoTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonInfoTx(arg0 context.Context, arg1 db.CreateAnimeSeasonInfoTxParams) (db.CreateAnimeSeasonInfoTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonInfoTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonInfoTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonInfoTx indicates an expected call of CreateAnimeSeasonInfoTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonInfoTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonInfoTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonInfoTx), arg0, arg1)
}

// CreateAnimeSeasonMeta mocks base method.
func (m *MockGojo) CreateAnimeSeasonMeta(arg0 context.Context, arg1 db.CreateAnimeSeasonMetaParams) (db.AnimeSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonMeta indicates an expected call of CreateAnimeSeasonMeta.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonMeta), arg0, arg1)
}

// CreateAnimeSeasonMetasTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonMetasTx(arg0 context.Context, arg1 db.CreateAnimeSeasonMetasTxParams) (db.CreateAnimeSeasonMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonMetasTx indicates an expected call of CreateAnimeSeasonMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonMetasTx), arg0, arg1)
}

// CreateAnimeSeasonOfficialTitle mocks base method.
func (m *MockGojo) CreateAnimeSeasonOfficialTitle(arg0 context.Context, arg1 db.CreateAnimeSeasonOfficialTitleParams) (db.AnimeSeasonOfficialTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonOfficialTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonOfficialTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonOfficialTitle indicates an expected call of CreateAnimeSeasonOfficialTitle.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonOfficialTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonOfficialTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonOfficialTitle), arg0, arg1)
}

// CreateAnimeSeasonOtherTitle mocks base method.
func (m *MockGojo) CreateAnimeSeasonOtherTitle(arg0 context.Context, arg1 db.CreateAnimeSeasonOtherTitleParams) (db.AnimeSeasonOtherTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonOtherTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonOtherTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonOtherTitle indicates an expected call of CreateAnimeSeasonOtherTitle.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonOtherTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonOtherTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonOtherTitle), arg0, arg1)
}

// CreateAnimeSeasonPosterImage mocks base method.
func (m *MockGojo) CreateAnimeSeasonPosterImage(arg0 context.Context, arg1 db.CreateAnimeSeasonPosterImageParams) (db.AnimeSeasonPosterImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonPosterImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonPosterImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonPosterImage indicates an expected call of CreateAnimeSeasonPosterImage.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonPosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonPosterImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonPosterImage), arg0, arg1)
}

// CreateAnimeSeasonResource mocks base method.
func (m *MockGojo) CreateAnimeSeasonResource(arg0 context.Context, arg1 db.CreateAnimeSeasonResourceParams) (db.AnimeSeasonResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonResource indicates an expected call of CreateAnimeSeasonResource.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonResource), arg0, arg1)
}

// CreateAnimeSeasonResourceTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonResourceTx(arg0 context.Context, arg1 db.CreateAnimeSeasonResourceTxParams) (db.CreateAnimeSeasonResourceTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonResourceTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonResourceTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonResourceTx indicates an expected call of CreateAnimeSeasonResourceTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonResourceTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonResourceTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonResourceTx), arg0, arg1)
}

// CreateAnimeSeasonShortTitle mocks base method.
func (m *MockGojo) CreateAnimeSeasonShortTitle(arg0 context.Context, arg1 db.CreateAnimeSeasonShortTitleParams) (db.AnimeSeasonShortTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonShortTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonShortTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonShortTitle indicates an expected call of CreateAnimeSeasonShortTitle.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonShortTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonShortTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonShortTitle), arg0, arg1)
}

// CreateAnimeSeasonStudio mocks base method.
func (m *MockGojo) CreateAnimeSeasonStudio(arg0 context.Context, arg1 db.CreateAnimeSeasonStudioParams) (db.AnimeSeasonStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonStudio indicates an expected call of CreateAnimeSeasonStudio.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonStudio", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonStudio), arg0, arg1)
}

// CreateAnimeSeasonTag mocks base method.
func (m *MockGojo) CreateAnimeSeasonTag(arg0 context.Context, arg1 db.CreateAnimeSeasonTagParams) (db.AnimeSeasonTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTag indicates an expected call of CreateAnimeSeasonTag.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTag", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTag), arg0, arg1)
}

// CreateAnimeSeasonTagTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonTagTx(arg0 context.Context, arg1 db.CreateAnimeSeasonTagTxParams) (db.CreateAnimeSeasonTagTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTagTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonTagTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTagTx indicates an expected call of CreateAnimeSeasonTagTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTagTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTagTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTagTx), arg0, arg1)
}

// CreateAnimeSeasonTitleTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonTitleTx(arg0 context.Context, arg1 db.CreateAnimeSeasonTitleTxParams) (db.CreateAnimeSeasonTitleTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTitleTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonTitleTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTitleTx indicates an expected call of CreateAnimeSeasonTitleTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTitleTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTitleTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTitleTx), arg0, arg1)
}

// CreateAnimeSeasonTrailer mocks base method.
func (m *MockGojo) CreateAnimeSeasonTrailer(arg0 context.Context, arg1 db.CreateAnimeSeasonTrailerParams) (db.AnimeSeasonTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTrailer indicates an expected call of CreateAnimeSeasonTrailer.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTrailer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTrailer), arg0, arg1)
}

// CreateAnimeSeasonTrailerTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonTrailerTx(arg0 context.Context, arg1 db.CreateAnimeSeasonTrailerTxParams) (db.CreateAnimeSeasonTrailerTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTrailerTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonTrailerTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTrailerTx indicates an expected call of CreateAnimeSeasonTrailerTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTrailerTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTrailerTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTrailerTx), arg0, arg1)
}

// CreateAnimeSeasonTranslationTitle mocks base method.
func (m *MockGojo) CreateAnimeSeasonTranslationTitle(arg0 context.Context, arg1 db.CreateAnimeSeasonTranslationTitleParams) (db.AnimeSeasonTranslationTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTranslationTitle", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonTranslationTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTranslationTitle indicates an expected call of CreateAnimeSeasonTranslationTitle.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTranslationTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTranslationTitle", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTranslationTitle), arg0, arg1)
}

// CreateAnimeSeasonTx mocks base method.
func (m *MockGojo) CreateAnimeSeasonTx(arg0 context.Context, arg1 db.CreateAnimeSeasonTxParams) (db.CreateAnimeSeasonTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeasonTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSeasonTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeasonTx indicates an expected call of CreateAnimeSeasonTx.
func (mr *MockGojoMockRecorder) CreateAnimeSeasonTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeasonTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeasonTx), arg0, arg1)
}

// CreateAnimeSerie mocks base method.
func (m *MockGojo) CreateAnimeSerie(arg0 context.Context, arg1 db.CreateAnimeSerieParams) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerie indicates an expected call of CreateAnimeSerie.
func (mr *MockGojoMockRecorder) CreateAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerie", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerie), arg0, arg1)
}

// CreateAnimeSerieBackdropImage mocks base method.
func (m *MockGojo) CreateAnimeSerieBackdropImage(arg0 context.Context, arg1 db.CreateAnimeSerieBackdropImageParams) (db.AnimeSerieBackdropImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieBackdropImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieBackdropImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieBackdropImage indicates an expected call of CreateAnimeSerieBackdropImage.
func (mr *MockGojoMockRecorder) CreateAnimeSerieBackdropImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieBackdropImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieBackdropImage), arg0, arg1)
}

// CreateAnimeSerieCharacter mocks base method.
func (m *MockGojo) CreateAnimeSerieCharacter(arg0 context.Context, arg1 db.CreateAnimeSerieCharacterParams) (db.AnimeSerieCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieCharacter indicates an expected call of CreateAnimeSerieCharacter.
func (mr *MockGojoMockRecorder) CreateAnimeSerieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieCharacter", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieCharacter), arg0, arg1)
}

// CreateAnimeSerieImageTx mocks base method.
func (m *MockGojo) CreateAnimeSerieImageTx(arg0 context.Context, arg1 db.CreateAnimeSerieImageTxParams) (db.CreateAnimeSerieImageTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieImageTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieImageTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieImageTx indicates an expected call of CreateAnimeSerieImageTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieImageTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieImageTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieImageTx), arg0, arg1)
}

// CreateAnimeSerieLink mocks base method.
func (m *MockGojo) CreateAnimeSerieLink(arg0 context.Context, arg1 db.CreateAnimeSerieLinkParams) (db.AnimeSerieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieLink indicates an expected call of CreateAnimeSerieLink.
func (mr *MockGojoMockRecorder) CreateAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieLink), arg0, arg1)
}

// CreateAnimeSerieLinkTx mocks base method.
func (m *MockGojo) CreateAnimeSerieLinkTx(arg0 context.Context, arg1 db.CreateAnimeSerieLinkTxParams) (db.CreateAnimeSerieLinkTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieLinkTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieLinkTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieLinkTx indicates an expected call of CreateAnimeSerieLinkTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieLinkTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieLinkTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieLinkTx), arg0, arg1)
}

// CreateAnimeSerieLogoImage mocks base method.
func (m *MockGojo) CreateAnimeSerieLogoImage(arg0 context.Context, arg1 db.CreateAnimeSerieLogoImageParams) (db.AnimeSerieLogoImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieLogoImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieLogoImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieLogoImage indicates an expected call of CreateAnimeSerieLogoImage.
func (mr *MockGojoMockRecorder) CreateAnimeSerieLogoImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieLogoImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieLogoImage), arg0, arg1)
}

// CreateAnimeSerieMeta mocks base method.
func (m *MockGojo) CreateAnimeSerieMeta(arg0 context.Context, arg1 db.CreateAnimeSerieMetaParams) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieMeta indicates an expected call of CreateAnimeSerieMeta.
func (mr *MockGojoMockRecorder) CreateAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieMeta), arg0, arg1)
}

// CreateAnimeSerieMetasTx mocks base method.
func (m *MockGojo) CreateAnimeSerieMetasTx(arg0 context.Context, arg1 db.CreateAnimeSerieMetasTxParams) (db.CreateAnimeSerieMetasTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieMetasTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieMetasTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieMetasTx indicates an expected call of CreateAnimeSerieMetasTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieMetasTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieMetasTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieMetasTx), arg0, arg1)
}

// CreateAnimeSeriePosterImage mocks base method.
func (m *MockGojo) CreateAnimeSeriePosterImage(arg0 context.Context, arg1 db.CreateAnimeSeriePosterImageParams) (db.AnimeSeriePosterImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSeriePosterImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeriePosterImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSeriePosterImage indicates an expected call of CreateAnimeSeriePosterImage.
func (mr *MockGojoMockRecorder) CreateAnimeSeriePosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSeriePosterImage", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSeriePosterImage), arg0, arg1)
}

// CreateAnimeSerieTrailer mocks base method.
func (m *MockGojo) CreateAnimeSerieTrailer(arg0 context.Context, arg1 db.CreateAnimeSerieTrailerParams) (db.AnimeSerieTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieTrailer indicates an expected call of CreateAnimeSerieTrailer.
func (mr *MockGojoMockRecorder) CreateAnimeSerieTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieTrailer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieTrailer), arg0, arg1)
}

// CreateAnimeSerieTrailerTx mocks base method.
func (m *MockGojo) CreateAnimeSerieTrailerTx(arg0 context.Context, arg1 db.CreateAnimeSerieTrailerTxParams) (db.CreateAnimeSerieTrailerTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieTrailerTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieTrailerTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieTrailerTx indicates an expected call of CreateAnimeSerieTrailerTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieTrailerTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieTrailerTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieTrailerTx), arg0, arg1)
}

// CreateAnimeSerieTx mocks base method.
func (m *MockGojo) CreateAnimeSerieTx(arg0 context.Context, arg1 db.CreateAnimeSerieTxParams) (db.CreateAnimeSerieTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeSerieTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateAnimeSerieTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeSerieTx indicates an expected call of CreateAnimeSerieTx.
func (mr *MockGojoMockRecorder) CreateAnimeSerieTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeSerieTx", reflect.TypeOf((*MockGojo)(nil).CreateAnimeSerieTx), arg0, arg1)
}

// CreateAnimeTag mocks base method.
func (m *MockGojo) CreateAnimeTag(arg0 context.Context, arg1 string) (db.AnimeTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeTag indicates an expected call of CreateAnimeTag.
func (mr *MockGojoMockRecorder) CreateAnimeTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeTag", reflect.TypeOf((*MockGojo)(nil).CreateAnimeTag), arg0, arg1)
}

// CreateAnimeTrailer mocks base method.
func (m *MockGojo) CreateAnimeTrailer(arg0 context.Context, arg1 db.CreateAnimeTrailerParams) (db.AnimeTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnimeTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnimeTrailer indicates an expected call of CreateAnimeTrailer.
func (mr *MockGojoMockRecorder) CreateAnimeTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnimeTrailer", reflect.TypeOf((*MockGojo)(nil).CreateAnimeTrailer), arg0, arg1)
}

// CreateDevice mocks base method.
func (m *MockGojo) CreateDevice(arg0 context.Context, arg1 db.CreateDeviceParams) (db.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", arg0, arg1)
	ret0, _ := ret[0].(db.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockGojoMockRecorder) CreateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockGojo)(nil).CreateDevice), arg0, arg1)
}

// CreateGenre mocks base method.
func (m *MockGojo) CreateGenre(arg0 context.Context, arg1 string) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockGojoMockRecorder) CreateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockGojo)(nil).CreateGenre), arg0, arg1)
}

// CreateGenresTx mocks base method.
func (m *MockGojo) CreateGenresTx(arg0 context.Context, arg1 db.CreateGenresTxParams) (db.CreateGenresTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenresTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateGenresTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenresTx indicates an expected call of CreateGenresTx.
func (mr *MockGojoMockRecorder) CreateGenresTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenresTx", reflect.TypeOf((*MockGojo)(nil).CreateGenresTx), arg0, arg1)
}

// CreateLanguage mocks base method.
func (m *MockGojo) CreateLanguage(arg0 context.Context, arg1 db.CreateLanguageParams) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLanguage indicates an expected call of CreateLanguage.
func (mr *MockGojoMockRecorder) CreateLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLanguage", reflect.TypeOf((*MockGojo)(nil).CreateLanguage), arg0, arg1)
}

// CreateLanguagesTx mocks base method.
func (m *MockGojo) CreateLanguagesTx(arg0 context.Context, arg1 db.CreateLanguagesTxParams) (db.CreateLanguagesTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLanguagesTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateLanguagesTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLanguagesTx indicates an expected call of CreateLanguagesTx.
func (mr *MockGojoMockRecorder) CreateLanguagesTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLanguagesTx", reflect.TypeOf((*MockGojo)(nil).CreateLanguagesTx), arg0, arg1)
}

// CreateMeta mocks base method.
func (m *MockGojo) CreateMeta(arg0 context.Context, arg1 db.CreateMetaParams) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMeta indicates an expected call of CreateMeta.
func (mr *MockGojoMockRecorder) CreateMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMeta", reflect.TypeOf((*MockGojo)(nil).CreateMeta), arg0, arg1)
}

// CreateSession mocks base method.
func (m *MockGojo) CreateSession(arg0 context.Context, arg1 db.CreateSessionParams) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockGojoMockRecorder) CreateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockGojo)(nil).CreateSession), arg0, arg1)
}

// CreateStudio mocks base method.
func (m *MockGojo) CreateStudio(arg0 context.Context, arg1 string) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudio indicates an expected call of CreateStudio.
func (mr *MockGojoMockRecorder) CreateStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudio", reflect.TypeOf((*MockGojo)(nil).CreateStudio), arg0, arg1)
}

// CreateStudiosTx mocks base method.
func (m *MockGojo) CreateStudiosTx(arg0 context.Context, arg1 db.CreateStudiosTxParams) (db.CreateStudiosTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudiosTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateStudiosTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudiosTx indicates an expected call of CreateStudiosTx.
func (mr *MockGojoMockRecorder) CreateStudiosTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudiosTx", reflect.TypeOf((*MockGojo)(nil).CreateStudiosTx), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockGojo) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockGojoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockGojo)(nil).CreateUser), arg0, arg1)
}

// CreateUserDevice mocks base method.
func (m *MockGojo) CreateUserDevice(arg0 context.Context, arg1 db.CreateUserDeviceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserDevice indicates an expected call of CreateUserDevice.
func (mr *MockGojoMockRecorder) CreateUserDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserDevice", reflect.TypeOf((*MockGojo)(nil).CreateUserDevice), arg0, arg1)
}

// CreateUserTx mocks base method.
func (m *MockGojo) CreateUserTx(arg0 context.Context, arg1 db.CreateUserTxParams) (db.CreateUserTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.CreateUserTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserTx indicates an expected call of CreateUserTx.
func (mr *MockGojoMockRecorder) CreateUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserTx", reflect.TypeOf((*MockGojo)(nil).CreateUserTx), arg0, arg1)
}

// CreateVerifyEmail mocks base method.
func (m *MockGojo) CreateVerifyEmail(arg0 context.Context, arg1 db.CreateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVerifyEmail indicates an expected call of CreateVerifyEmail.
func (mr *MockGojoMockRecorder) CreateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVerifyEmail", reflect.TypeOf((*MockGojo)(nil).CreateVerifyEmail), arg0, arg1)
}

// DeleteActor mocks base method.
func (m *MockGojo) DeleteActor(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockGojoMockRecorder) DeleteActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockGojo)(nil).DeleteActor), arg0, arg1)
}

// DeleteAnimeCharacter mocks base method.
func (m *MockGojo) DeleteAnimeCharacter(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeCharacter indicates an expected call of DeleteAnimeCharacter.
func (mr *MockGojoMockRecorder) DeleteAnimeCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeCharacter", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeCharacter), arg0, arg1)
}

// DeleteAnimeEpisode mocks base method.
func (m *MockGojo) DeleteAnimeEpisode(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisode indicates an expected call of DeleteAnimeEpisode.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisode", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisode), arg0, arg1)
}

// DeleteAnimeEpisodeMeta mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeMeta(arg0 context.Context, arg1 db.DeleteAnimeEpisodeMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeMeta indicates an expected call of DeleteAnimeEpisodeMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeMeta), arg0, arg1)
}

// DeleteAnimeEpisodeServer mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeServer indicates an expected call of DeleteAnimeEpisodeServer.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeServer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeServer), arg0, arg1)
}

// DeleteAnimeEpisodeServerDubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeServerDubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeServerDubTorrent indicates an expected call of DeleteAnimeEpisodeServerDubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeServerDubTorrent), arg0, arg1)
}

// DeleteAnimeEpisodeServerDubVideo mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeServerDubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeServerDubVideo indicates an expected call of DeleteAnimeEpisodeServerDubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeServerDubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeServerDubVideo), arg0, arg1)
}

// DeleteAnimeEpisodeServerSubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeServerSubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeServerSubTorrent indicates an expected call of DeleteAnimeEpisodeServerSubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeServerSubTorrent), arg0, arg1)
}

// DeleteAnimeEpisodeServerSubVideo mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeServerSubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeServerSubVideo indicates an expected call of DeleteAnimeEpisodeServerSubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeServerSubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeServerSubVideo), arg0, arg1)
}

// DeleteAnimeEpisodeTorrent mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeTorrent indicates an expected call of DeleteAnimeEpisodeTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeTorrent), arg0, arg1)
}

// DeleteAnimeEpisodeVideo mocks base method.
func (m *MockGojo) DeleteAnimeEpisodeVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeEpisodeVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeEpisodeVideo indicates an expected call of DeleteAnimeEpisodeVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeEpisodeVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeEpisodeVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeEpisodeVideo), arg0, arg1)
}

// DeleteAnimeImage mocks base method.
func (m *MockGojo) DeleteAnimeImage(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeImage indicates an expected call of DeleteAnimeImage.
func (mr *MockGojoMockRecorder) DeleteAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeImage), arg0, arg1)
}

// DeleteAnimeLink mocks base method.
func (m *MockGojo) DeleteAnimeLink(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeLink indicates an expected call of DeleteAnimeLink.
func (mr *MockGojoMockRecorder) DeleteAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeLink), arg0, arg1)
}

// DeleteAnimeMovie mocks base method.
func (m *MockGojo) DeleteAnimeMovie(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovie indicates an expected call of DeleteAnimeMovie.
func (mr *MockGojoMockRecorder) DeleteAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovie", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovie), arg0, arg1)
}

// DeleteAnimeMovieBackdropImage mocks base method.
func (m *MockGojo) DeleteAnimeMovieBackdropImage(arg0 context.Context, arg1 db.DeleteAnimeMovieBackdropImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieBackdropImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieBackdropImage indicates an expected call of DeleteAnimeMovieBackdropImage.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieBackdropImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieBackdropImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieBackdropImage), arg0, arg1)
}

// DeleteAnimeMovieCharacter mocks base method.
func (m *MockGojo) DeleteAnimeMovieCharacter(arg0 context.Context, arg1 db.DeleteAnimeMovieCharacterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieCharacter indicates an expected call of DeleteAnimeMovieCharacter.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieCharacter", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieCharacter), arg0, arg1)
}

// DeleteAnimeMovieGenre mocks base method.
func (m *MockGojo) DeleteAnimeMovieGenre(arg0 context.Context, arg1 db.DeleteAnimeMovieGenreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieGenre indicates an expected call of DeleteAnimeMovieGenre.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieGenre), arg0, arg1)
}

// DeleteAnimeMovieLink mocks base method.
func (m *MockGojo) DeleteAnimeMovieLink(arg0 context.Context, arg1 db.DeleteAnimeMovieLinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieLink indicates an expected call of DeleteAnimeMovieLink.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieLink), arg0, arg1)
}

// DeleteAnimeMovieLogoImage mocks base method.
func (m *MockGojo) DeleteAnimeMovieLogoImage(arg0 context.Context, arg1 db.DeleteAnimeMovieLogoImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieLogoImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieLogoImage indicates an expected call of DeleteAnimeMovieLogoImage.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieLogoImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieLogoImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieLogoImage), arg0, arg1)
}

// DeleteAnimeMovieMeta mocks base method.
func (m *MockGojo) DeleteAnimeMovieMeta(arg0 context.Context, arg1 db.DeleteAnimeMovieMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieMeta indicates an expected call of DeleteAnimeMovieMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieMeta), arg0, arg1)
}

// DeleteAnimeMovieOfficialTitle mocks base method.
func (m *MockGojo) DeleteAnimeMovieOfficialTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieOfficialTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieOfficialTitle indicates an expected call of DeleteAnimeMovieOfficialTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieOfficialTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieOfficialTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieOfficialTitle), arg0, arg1)
}

// DeleteAnimeMovieOtherTitle mocks base method.
func (m *MockGojo) DeleteAnimeMovieOtherTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieOtherTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieOtherTitle indicates an expected call of DeleteAnimeMovieOtherTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieOtherTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieOtherTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieOtherTitle), arg0, arg1)
}

// DeleteAnimeMoviePosterImage mocks base method.
func (m *MockGojo) DeleteAnimeMoviePosterImage(arg0 context.Context, arg1 db.DeleteAnimeMoviePosterImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMoviePosterImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMoviePosterImage indicates an expected call of DeleteAnimeMoviePosterImage.
func (mr *MockGojoMockRecorder) DeleteAnimeMoviePosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMoviePosterImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMoviePosterImage), arg0, arg1)
}

// DeleteAnimeMovieResource mocks base method.
func (m *MockGojo) DeleteAnimeMovieResource(arg0 context.Context, arg1 db.DeleteAnimeMovieResourceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieResource indicates an expected call of DeleteAnimeMovieResource.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieResource), arg0, arg1)
}

// DeleteAnimeMovieServer mocks base method.
func (m *MockGojo) DeleteAnimeMovieServer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServer indicates an expected call of DeleteAnimeMovieServer.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServer), arg0, arg1)
}

// DeleteAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerDubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerDubTorrent indicates an expected call of DeleteAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerDubTorrent), arg0, arg1)
}

// DeleteAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerDubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerDubVideo indicates an expected call of DeleteAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerDubVideo), arg0, arg1)
}

// DeleteAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerSubTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerSubTorrent indicates an expected call of DeleteAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerSubTorrent), arg0, arg1)
}

// DeleteAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieServerSubVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieServerSubVideo indicates an expected call of DeleteAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieServerSubVideo), arg0, arg1)
}

// DeleteAnimeMovieShortTitle mocks base method.
func (m *MockGojo) DeleteAnimeMovieShortTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieShortTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieShortTitle indicates an expected call of DeleteAnimeMovieShortTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieShortTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieShortTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieShortTitle), arg0, arg1)
}

// DeleteAnimeMovieStudio mocks base method.
func (m *MockGojo) DeleteAnimeMovieStudio(arg0 context.Context, arg1 db.DeleteAnimeMovieStudioParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieStudio indicates an expected call of DeleteAnimeMovieStudio.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieStudio), arg0, arg1)
}

// DeleteAnimeMovieTag mocks base method.
func (m *MockGojo) DeleteAnimeMovieTag(arg0 context.Context, arg1 db.DeleteAnimeMovieTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieTag indicates an expected call of DeleteAnimeMovieTag.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieTag", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieTag), arg0, arg1)
}

// DeleteAnimeMovieTorrent mocks base method.
func (m *MockGojo) DeleteAnimeMovieTorrent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieTorrent indicates an expected call of DeleteAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieTorrent), arg0, arg1)
}

// DeleteAnimeMovieTrailer mocks base method.
func (m *MockGojo) DeleteAnimeMovieTrailer(arg0 context.Context, arg1 db.DeleteAnimeMovieTrailerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieTrailer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieTrailer indicates an expected call of DeleteAnimeMovieTrailer.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieTrailer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieTrailer), arg0, arg1)
}

// DeleteAnimeMovieTranslationTitle mocks base method.
func (m *MockGojo) DeleteAnimeMovieTranslationTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieTranslationTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieTranslationTitle indicates an expected call of DeleteAnimeMovieTranslationTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieTranslationTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieTranslationTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieTranslationTitle), arg0, arg1)
}

// DeleteAnimeMovieVideo mocks base method.
func (m *MockGojo) DeleteAnimeMovieVideo(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeMovieVideo indicates an expected call of DeleteAnimeMovieVideo.
func (mr *MockGojoMockRecorder) DeleteAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeMovieVideo), arg0, arg1)
}

// DeleteAnimeResource mocks base method.
func (m *MockGojo) DeleteAnimeResource(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeResource indicates an expected call of DeleteAnimeResource.
func (mr *MockGojoMockRecorder) DeleteAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeResource), arg0, arg1)
}

// DeleteAnimeSeason mocks base method.
func (m *MockGojo) DeleteAnimeSeason(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeason indicates an expected call of DeleteAnimeSeason.
func (mr *MockGojoMockRecorder) DeleteAnimeSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeason", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeason), arg0, arg1)
}

// DeleteAnimeSeasonEpisode mocks base method.
func (m *MockGojo) DeleteAnimeSeasonEpisode(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonEpisode indicates an expected call of DeleteAnimeSeasonEpisode.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonEpisode), arg0, arg1)
}

// DeleteAnimeSeasonGenre mocks base method.
func (m *MockGojo) DeleteAnimeSeasonGenre(arg0 context.Context, arg1 db.DeleteAnimeSeasonGenreParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonGenre indicates an expected call of DeleteAnimeSeasonGenre.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonGenre", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonGenre), arg0, arg1)
}

// DeleteAnimeSeasonMeta mocks base method.
func (m *MockGojo) DeleteAnimeSeasonMeta(arg0 context.Context, arg1 db.DeleteAnimeSeasonMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonMeta indicates an expected call of DeleteAnimeSeasonMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonMeta), arg0, arg1)
}

// DeleteAnimeSeasonOfficialTitle mocks base method.
func (m *MockGojo) DeleteAnimeSeasonOfficialTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonOfficialTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonOfficialTitle indicates an expected call of DeleteAnimeSeasonOfficialTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonOfficialTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonOfficialTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonOfficialTitle), arg0, arg1)
}

// DeleteAnimeSeasonOtherTitle mocks base method.
func (m *MockGojo) DeleteAnimeSeasonOtherTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonOtherTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonOtherTitle indicates an expected call of DeleteAnimeSeasonOtherTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonOtherTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonOtherTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonOtherTitle), arg0, arg1)
}

// DeleteAnimeSeasonPosterImage mocks base method.
func (m *MockGojo) DeleteAnimeSeasonPosterImage(arg0 context.Context, arg1 db.DeleteAnimeSeasonPosterImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonPosterImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonPosterImage indicates an expected call of DeleteAnimeSeasonPosterImage.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonPosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonPosterImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonPosterImage), arg0, arg1)
}

// DeleteAnimeSeasonResource mocks base method.
func (m *MockGojo) DeleteAnimeSeasonResource(arg0 context.Context, arg1 db.DeleteAnimeSeasonResourceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonResource indicates an expected call of DeleteAnimeSeasonResource.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonResource), arg0, arg1)
}

// DeleteAnimeSeasonShortTitle mocks base method.
func (m *MockGojo) DeleteAnimeSeasonShortTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonShortTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonShortTitle indicates an expected call of DeleteAnimeSeasonShortTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonShortTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonShortTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonShortTitle), arg0, arg1)
}

// DeleteAnimeSeasonStudio mocks base method.
func (m *MockGojo) DeleteAnimeSeasonStudio(arg0 context.Context, arg1 db.DeleteAnimeSeasonStudioParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonStudio indicates an expected call of DeleteAnimeSeasonStudio.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonStudio", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonStudio), arg0, arg1)
}

// DeleteAnimeSeasonTag mocks base method.
func (m *MockGojo) DeleteAnimeSeasonTag(arg0 context.Context, arg1 db.DeleteAnimeSeasonTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonTag indicates an expected call of DeleteAnimeSeasonTag.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonTag", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonTag), arg0, arg1)
}

// DeleteAnimeSeasonTrailer mocks base method.
func (m *MockGojo) DeleteAnimeSeasonTrailer(arg0 context.Context, arg1 db.DeleteAnimeSeasonTrailerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonTrailer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonTrailer indicates an expected call of DeleteAnimeSeasonTrailer.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonTrailer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonTrailer), arg0, arg1)
}

// DeleteAnimeSeasonTranslationTitle mocks base method.
func (m *MockGojo) DeleteAnimeSeasonTranslationTitle(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeasonTranslationTitle", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeasonTranslationTitle indicates an expected call of DeleteAnimeSeasonTranslationTitle.
func (mr *MockGojoMockRecorder) DeleteAnimeSeasonTranslationTitle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeasonTranslationTitle", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeasonTranslationTitle), arg0, arg1)
}

// DeleteAnimeSerie mocks base method.
func (m *MockGojo) DeleteAnimeSerie(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerie indicates an expected call of DeleteAnimeSerie.
func (mr *MockGojoMockRecorder) DeleteAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerie", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerie), arg0, arg1)
}

// DeleteAnimeSerieBackdropImage mocks base method.
func (m *MockGojo) DeleteAnimeSerieBackdropImage(arg0 context.Context, arg1 db.DeleteAnimeSerieBackdropImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieBackdropImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieBackdropImage indicates an expected call of DeleteAnimeSerieBackdropImage.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieBackdropImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieBackdropImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieBackdropImage), arg0, arg1)
}

// DeleteAnimeSerieCharacter mocks base method.
func (m *MockGojo) DeleteAnimeSerieCharacter(arg0 context.Context, arg1 db.DeleteAnimeSerieCharacterParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieCharacter indicates an expected call of DeleteAnimeSerieCharacter.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieCharacter", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieCharacter), arg0, arg1)
}

// DeleteAnimeSerieLink mocks base method.
func (m *MockGojo) DeleteAnimeSerieLink(arg0 context.Context, arg1 db.DeleteAnimeSerieLinkParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieLink indicates an expected call of DeleteAnimeSerieLink.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieLink), arg0, arg1)
}

// DeleteAnimeSerieLogoImage mocks base method.
func (m *MockGojo) DeleteAnimeSerieLogoImage(arg0 context.Context, arg1 db.DeleteAnimeSerieLogoImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieLogoImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieLogoImage indicates an expected call of DeleteAnimeSerieLogoImage.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieLogoImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieLogoImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieLogoImage), arg0, arg1)
}

// DeleteAnimeSerieMeta mocks base method.
func (m *MockGojo) DeleteAnimeSerieMeta(arg0 context.Context, arg1 db.DeleteAnimeSerieMetaParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieMeta indicates an expected call of DeleteAnimeSerieMeta.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieMeta), arg0, arg1)
}

// DeleteAnimeSeriePosterImage mocks base method.
func (m *MockGojo) DeleteAnimeSeriePosterImage(arg0 context.Context, arg1 db.DeleteAnimeSeriePosterImageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSeriePosterImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSeriePosterImage indicates an expected call of DeleteAnimeSeriePosterImage.
func (mr *MockGojoMockRecorder) DeleteAnimeSeriePosterImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSeriePosterImage", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSeriePosterImage), arg0, arg1)
}

// DeleteAnimeSerieTrailer mocks base method.
func (m *MockGojo) DeleteAnimeSerieTrailer(arg0 context.Context, arg1 db.DeleteAnimeSerieTrailerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeSerieTrailer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeSerieTrailer indicates an expected call of DeleteAnimeSerieTrailer.
func (mr *MockGojoMockRecorder) DeleteAnimeSerieTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeSerieTrailer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeSerieTrailer), arg0, arg1)
}

// DeleteAnimeTag mocks base method.
func (m *MockGojo) DeleteAnimeTag(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeTag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeTag indicates an expected call of DeleteAnimeTag.
func (mr *MockGojoMockRecorder) DeleteAnimeTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeTag", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeTag), arg0, arg1)
}

// DeleteAnimeTrailer mocks base method.
func (m *MockGojo) DeleteAnimeTrailer(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnimeTrailer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnimeTrailer indicates an expected call of DeleteAnimeTrailer.
func (mr *MockGojoMockRecorder) DeleteAnimeTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnimeTrailer", reflect.TypeOf((*MockGojo)(nil).DeleteAnimeTrailer), arg0, arg1)
}

// DeleteDevice mocks base method.
func (m *MockGojo) DeleteDevice(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockGojoMockRecorder) DeleteDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockGojo)(nil).DeleteDevice), arg0, arg1)
}

// DeleteGenre mocks base method.
func (m *MockGojo) DeleteGenre(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockGojoMockRecorder) DeleteGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockGojo)(nil).DeleteGenre), arg0, arg1)
}

// DeleteLanguage mocks base method.
func (m *MockGojo) DeleteLanguage(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLanguage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLanguage indicates an expected call of DeleteLanguage.
func (mr *MockGojoMockRecorder) DeleteLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLanguage", reflect.TypeOf((*MockGojo)(nil).DeleteLanguage), arg0, arg1)
}

// DeleteMeta mocks base method.
func (m *MockGojo) DeleteMeta(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMeta", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMeta indicates an expected call of DeleteMeta.
func (mr *MockGojoMockRecorder) DeleteMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMeta", reflect.TypeOf((*MockGojo)(nil).DeleteMeta), arg0, arg1)
}

// DeleteSession mocks base method.
func (m *MockGojo) DeleteSession(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockGojoMockRecorder) DeleteSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockGojo)(nil).DeleteSession), arg0, arg1)
}

// DeleteStudio mocks base method.
func (m *MockGojo) DeleteStudio(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStudio", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStudio indicates an expected call of DeleteStudio.
func (mr *MockGojoMockRecorder) DeleteStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStudio", reflect.TypeOf((*MockGojo)(nil).DeleteStudio), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockGojo) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockGojoMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockGojo)(nil).DeleteUser), arg0, arg1)
}

// GetActor mocks base method.
func (m *MockGojo) GetActor(arg0 context.Context, arg1 int64) (db.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", arg0, arg1)
	ret0, _ := ret[0].(db.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockGojoMockRecorder) GetActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockGojo)(nil).GetActor), arg0, arg1)
}

// GetAnimeCharacter mocks base method.
func (m *MockGojo) GetAnimeCharacter(arg0 context.Context, arg1 int64) (db.AnimeCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeCharacter indicates an expected call of GetAnimeCharacter.
func (mr *MockGojoMockRecorder) GetAnimeCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeCharacter", reflect.TypeOf((*MockGojo)(nil).GetAnimeCharacter), arg0, arg1)
}

// GetAnimeEpisodeByEpisodeID mocks base method.
func (m *MockGojo) GetAnimeEpisodeByEpisodeID(arg0 context.Context, arg1 int64) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeByEpisodeID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeByEpisodeID indicates an expected call of GetAnimeEpisodeByEpisodeID.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeByEpisodeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeByEpisodeID", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeByEpisodeID), arg0, arg1)
}

// GetAnimeEpisodeMeta mocks base method.
func (m *MockGojo) GetAnimeEpisodeMeta(arg0 context.Context, arg1 db.GetAnimeEpisodeMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeMeta indicates an expected call of GetAnimeEpisodeMeta.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeMeta), arg0, arg1)
}

// GetAnimeEpisodeServer mocks base method.
func (m *MockGojo) GetAnimeEpisodeServer(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeServer indicates an expected call of GetAnimeEpisodeServer.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeServer", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeServer), arg0, arg1)
}

// GetAnimeEpisodeServerDubTorrent mocks base method.
func (m *MockGojo) GetAnimeEpisodeServerDubTorrent(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeServerDubTorrent indicates an expected call of GetAnimeEpisodeServerDubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeServerDubTorrent), arg0, arg1)
}

// GetAnimeEpisodeServerDubVideo mocks base method.
func (m *MockGojo) GetAnimeEpisodeServerDubVideo(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeServerDubVideo indicates an expected call of GetAnimeEpisodeServerDubVideo.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeServerDubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeServerDubVideo), arg0, arg1)
}

// GetAnimeEpisodeServerSubTorrent mocks base method.
func (m *MockGojo) GetAnimeEpisodeServerSubTorrent(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeServerSubTorrent indicates an expected call of GetAnimeEpisodeServerSubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeServerSubTorrent), arg0, arg1)
}

// GetAnimeEpisodeServerSubVideo mocks base method.
func (m *MockGojo) GetAnimeEpisodeServerSubVideo(arg0 context.Context, arg1 int64) (db.AnimeEpisodeServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeServerSubVideo indicates an expected call of GetAnimeEpisodeServerSubVideo.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeServerSubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeServerSubVideo), arg0, arg1)
}

// GetAnimeEpisodeTorrent mocks base method.
func (m *MockGojo) GetAnimeEpisodeTorrent(arg0 context.Context, arg1 int64) (db.AnimeEpisodeTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeTorrent indicates an expected call of GetAnimeEpisodeTorrent.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeTorrent), arg0, arg1)
}

// GetAnimeEpisodeVideo mocks base method.
func (m *MockGojo) GetAnimeEpisodeVideo(arg0 context.Context, arg1 int64) (db.AnimeEpisodeVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeEpisodeVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeEpisodeVideo indicates an expected call of GetAnimeEpisodeVideo.
func (mr *MockGojoMockRecorder) GetAnimeEpisodeVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeEpisodeVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeEpisodeVideo), arg0, arg1)
}

// GetAnimeImage mocks base method.
func (m *MockGojo) GetAnimeImage(arg0 context.Context, arg1 int64) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeImage indicates an expected call of GetAnimeImage.
func (mr *MockGojoMockRecorder) GetAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeImage", reflect.TypeOf((*MockGojo)(nil).GetAnimeImage), arg0, arg1)
}

// GetAnimeLink mocks base method.
func (m *MockGojo) GetAnimeLink(arg0 context.Context, arg1 int64) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeLink indicates an expected call of GetAnimeLink.
func (mr *MockGojoMockRecorder) GetAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeLink), arg0, arg1)
}

// GetAnimeMovie mocks base method.
func (m *MockGojo) GetAnimeMovie(arg0 context.Context, arg1 int64) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovie indicates an expected call of GetAnimeMovie.
func (mr *MockGojoMockRecorder) GetAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovie", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovie), arg0, arg1)
}

// GetAnimeMovieCharacter mocks base method.
func (m *MockGojo) GetAnimeMovieCharacter(arg0 context.Context, arg1 db.GetAnimeMovieCharacterParams) (db.AnimeMovieCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieCharacter indicates an expected call of GetAnimeMovieCharacter.
func (mr *MockGojoMockRecorder) GetAnimeMovieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieCharacter", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieCharacter), arg0, arg1)
}

// GetAnimeMovieGenre mocks base method.
func (m *MockGojo) GetAnimeMovieGenre(arg0 context.Context, arg1 db.GetAnimeMovieGenreParams) (db.AnimeMovieGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieGenre indicates an expected call of GetAnimeMovieGenre.
func (mr *MockGojoMockRecorder) GetAnimeMovieGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieGenre", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieGenre), arg0, arg1)
}

// GetAnimeMovieLink mocks base method.
func (m *MockGojo) GetAnimeMovieLink(arg0 context.Context, arg1 int64) (db.AnimeMovieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieLink indicates an expected call of GetAnimeMovieLink.
func (mr *MockGojoMockRecorder) GetAnimeMovieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieLink), arg0, arg1)
}

// GetAnimeMovieMeta mocks base method.
func (m *MockGojo) GetAnimeMovieMeta(arg0 context.Context, arg1 db.GetAnimeMovieMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieMeta indicates an expected call of GetAnimeMovieMeta.
func (mr *MockGojoMockRecorder) GetAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieMeta), arg0, arg1)
}

// GetAnimeMovieMetaByID mocks base method.
func (m *MockGojo) GetAnimeMovieMetaByID(arg0 context.Context, arg1 int64) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieMetaByID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieMetaByID indicates an expected call of GetAnimeMovieMetaByID.
func (mr *MockGojoMockRecorder) GetAnimeMovieMetaByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieMetaByID", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieMetaByID), arg0, arg1)
}

// GetAnimeMovieOfficialTitles mocks base method.
func (m *MockGojo) GetAnimeMovieOfficialTitles(arg0 context.Context, arg1 int64) ([]db.AnimeMovieOfficialTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieOfficialTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieOfficialTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieOfficialTitles indicates an expected call of GetAnimeMovieOfficialTitles.
func (mr *MockGojoMockRecorder) GetAnimeMovieOfficialTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieOfficialTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieOfficialTitles), arg0, arg1)
}

// GetAnimeMovieOtherTitles mocks base method.
func (m *MockGojo) GetAnimeMovieOtherTitles(arg0 context.Context, arg1 int64) ([]db.AnimeMovieOtherTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieOtherTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieOtherTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieOtherTitles indicates an expected call of GetAnimeMovieOtherTitles.
func (mr *MockGojoMockRecorder) GetAnimeMovieOtherTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieOtherTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieOtherTitles), arg0, arg1)
}

// GetAnimeMovieResource mocks base method.
func (m *MockGojo) GetAnimeMovieResource(arg0 context.Context, arg1 int64) (db.AnimeMovieResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieResource indicates an expected call of GetAnimeMovieResource.
func (mr *MockGojoMockRecorder) GetAnimeMovieResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieResource), arg0, arg1)
}

// GetAnimeMovieServer mocks base method.
func (m *MockGojo) GetAnimeMovieServer(arg0 context.Context, arg1 int64) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServer indicates an expected call of GetAnimeMovieServer.
func (mr *MockGojoMockRecorder) GetAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServer), arg0, arg1)
}

// GetAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieServerDubTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerDubTorrent indicates an expected call of GetAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerDubTorrent), arg0, arg1)
}

// GetAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) GetAnimeMovieServerDubVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerDubVideo indicates an expected call of GetAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerDubVideo), arg0, arg1)
}

// GetAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieServerSubTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerSubTorrent indicates an expected call of GetAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerSubTorrent), arg0, arg1)
}

// GetAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) GetAnimeMovieServerSubVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieServerSubVideo indicates an expected call of GetAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieServerSubVideo), arg0, arg1)
}

// GetAnimeMovieShortTitles mocks base method.
func (m *MockGojo) GetAnimeMovieShortTitles(arg0 context.Context, arg1 int64) ([]db.AnimeMovieShortTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieShortTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieShortTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieShortTitles indicates an expected call of GetAnimeMovieShortTitles.
func (mr *MockGojoMockRecorder) GetAnimeMovieShortTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieShortTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieShortTitles), arg0, arg1)
}

// GetAnimeMovieStudio mocks base method.
func (m *MockGojo) GetAnimeMovieStudio(arg0 context.Context, arg1 db.GetAnimeMovieStudioParams) (db.AnimeMovieStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieStudio indicates an expected call of GetAnimeMovieStudio.
func (mr *MockGojoMockRecorder) GetAnimeMovieStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieStudio", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieStudio), arg0, arg1)
}

// GetAnimeMovieTorrent mocks base method.
func (m *MockGojo) GetAnimeMovieTorrent(arg0 context.Context, arg1 int64) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieTorrent indicates an expected call of GetAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) GetAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieTorrent), arg0, arg1)
}

// GetAnimeMovieTranslationTitles mocks base method.
func (m *MockGojo) GetAnimeMovieTranslationTitles(arg0 context.Context, arg1 int64) ([]db.AnimeMovieTranslationTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieTranslationTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieTranslationTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieTranslationTitles indicates an expected call of GetAnimeMovieTranslationTitles.
func (mr *MockGojoMockRecorder) GetAnimeMovieTranslationTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieTranslationTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieTranslationTitles), arg0, arg1)
}

// GetAnimeMovieVideo mocks base method.
func (m *MockGojo) GetAnimeMovieVideo(arg0 context.Context, arg1 int64) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeMovieVideo indicates an expected call of GetAnimeMovieVideo.
func (mr *MockGojoMockRecorder) GetAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).GetAnimeMovieVideo), arg0, arg1)
}

// GetAnimeResource mocks base method.
func (m *MockGojo) GetAnimeResource(arg0 context.Context, arg1 int64) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeResource indicates an expected call of GetAnimeResource.
func (mr *MockGojoMockRecorder) GetAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeResource), arg0, arg1)
}

// GetAnimeSeason mocks base method.
func (m *MockGojo) GetAnimeSeason(arg0 context.Context, arg1 int64) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeason indicates an expected call of GetAnimeSeason.
func (mr *MockGojoMockRecorder) GetAnimeSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeason", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeason), arg0, arg1)
}

// GetAnimeSeasonEpisode mocks base method.
func (m *MockGojo) GetAnimeSeasonEpisode(arg0 context.Context, arg1 int64) (db.AnimeSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonEpisode indicates an expected call of GetAnimeSeasonEpisode.
func (mr *MockGojoMockRecorder) GetAnimeSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonEpisode), arg0, arg1)
}

// GetAnimeSeasonGenre mocks base method.
func (m *MockGojo) GetAnimeSeasonGenre(arg0 context.Context, arg1 db.GetAnimeSeasonGenreParams) (db.AnimeSeasonGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonGenre", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonGenre indicates an expected call of GetAnimeSeasonGenre.
func (mr *MockGojoMockRecorder) GetAnimeSeasonGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonGenre", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonGenre), arg0, arg1)
}

// GetAnimeSeasonMeta mocks base method.
func (m *MockGojo) GetAnimeSeasonMeta(arg0 context.Context, arg1 db.GetAnimeSeasonMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonMeta indicates an expected call of GetAnimeSeasonMeta.
func (mr *MockGojoMockRecorder) GetAnimeSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonMeta), arg0, arg1)
}

// GetAnimeSeasonOfficialTitles mocks base method.
func (m *MockGojo) GetAnimeSeasonOfficialTitles(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonOfficialTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonOfficialTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonOfficialTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonOfficialTitles indicates an expected call of GetAnimeSeasonOfficialTitles.
func (mr *MockGojoMockRecorder) GetAnimeSeasonOfficialTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonOfficialTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonOfficialTitles), arg0, arg1)
}

// GetAnimeSeasonOtherTitles mocks base method.
func (m *MockGojo) GetAnimeSeasonOtherTitles(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonOtherTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonOtherTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonOtherTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonOtherTitles indicates an expected call of GetAnimeSeasonOtherTitles.
func (mr *MockGojoMockRecorder) GetAnimeSeasonOtherTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonOtherTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonOtherTitles), arg0, arg1)
}

// GetAnimeSeasonResource mocks base method.
func (m *MockGojo) GetAnimeSeasonResource(arg0 context.Context, arg1 int64) (db.AnimeSeasonResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonResource indicates an expected call of GetAnimeSeasonResource.
func (mr *MockGojoMockRecorder) GetAnimeSeasonResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonResource", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonResource), arg0, arg1)
}

// GetAnimeSeasonShortTitles mocks base method.
func (m *MockGojo) GetAnimeSeasonShortTitles(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonShortTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonShortTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonShortTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonShortTitles indicates an expected call of GetAnimeSeasonShortTitles.
func (mr *MockGojoMockRecorder) GetAnimeSeasonShortTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonShortTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonShortTitles), arg0, arg1)
}

// GetAnimeSeasonStudio mocks base method.
func (m *MockGojo) GetAnimeSeasonStudio(arg0 context.Context, arg1 db.GetAnimeSeasonStudioParams) (db.AnimeSeasonStudio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonStudio", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonStudio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonStudio indicates an expected call of GetAnimeSeasonStudio.
func (mr *MockGojoMockRecorder) GetAnimeSeasonStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonStudio", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonStudio), arg0, arg1)
}

// GetAnimeSeasonTranslationTitles mocks base method.
func (m *MockGojo) GetAnimeSeasonTranslationTitles(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonTranslationTitle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSeasonTranslationTitles", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonTranslationTitle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSeasonTranslationTitles indicates an expected call of GetAnimeSeasonTranslationTitles.
func (mr *MockGojoMockRecorder) GetAnimeSeasonTranslationTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSeasonTranslationTitles", reflect.TypeOf((*MockGojo)(nil).GetAnimeSeasonTranslationTitles), arg0, arg1)
}

// GetAnimeSerie mocks base method.
func (m *MockGojo) GetAnimeSerie(arg0 context.Context, arg1 int64) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerie indicates an expected call of GetAnimeSerie.
func (mr *MockGojoMockRecorder) GetAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerie", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerie), arg0, arg1)
}

// GetAnimeSerieCharacter mocks base method.
func (m *MockGojo) GetAnimeSerieCharacter(arg0 context.Context, arg1 db.GetAnimeSerieCharacterParams) (db.AnimeSerieCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieCharacter indicates an expected call of GetAnimeSerieCharacter.
func (mr *MockGojoMockRecorder) GetAnimeSerieCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieCharacter", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieCharacter), arg0, arg1)
}

// GetAnimeSerieLink mocks base method.
func (m *MockGojo) GetAnimeSerieLink(arg0 context.Context, arg1 int64) (db.AnimeSerieLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieLink indicates an expected call of GetAnimeSerieLink.
func (mr *MockGojoMockRecorder) GetAnimeSerieLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieLink", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieLink), arg0, arg1)
}

// GetAnimeSerieMeta mocks base method.
func (m *MockGojo) GetAnimeSerieMeta(arg0 context.Context, arg1 db.GetAnimeSerieMetaParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieMeta indicates an expected call of GetAnimeSerieMeta.
func (mr *MockGojoMockRecorder) GetAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieMeta), arg0, arg1)
}

// GetAnimeSerieMetaByID mocks base method.
func (m *MockGojo) GetAnimeSerieMetaByID(arg0 context.Context, arg1 int64) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeSerieMetaByID", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeSerieMetaByID indicates an expected call of GetAnimeSerieMetaByID.
func (mr *MockGojoMockRecorder) GetAnimeSerieMetaByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeSerieMetaByID", reflect.TypeOf((*MockGojo)(nil).GetAnimeSerieMetaByID), arg0, arg1)
}

// GetAnimeTag mocks base method.
func (m *MockGojo) GetAnimeTag(arg0 context.Context, arg1 int64) (db.AnimeTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeTag indicates an expected call of GetAnimeTag.
func (mr *MockGojoMockRecorder) GetAnimeTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeTag", reflect.TypeOf((*MockGojo)(nil).GetAnimeTag), arg0, arg1)
}

// GetAnimeTagByTag mocks base method.
func (m *MockGojo) GetAnimeTagByTag(arg0 context.Context, arg1 string) (db.AnimeTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeTagByTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeTagByTag indicates an expected call of GetAnimeTagByTag.
func (mr *MockGojoMockRecorder) GetAnimeTagByTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeTagByTag", reflect.TypeOf((*MockGojo)(nil).GetAnimeTagByTag), arg0, arg1)
}

// GetAnimeTrailer mocks base method.
func (m *MockGojo) GetAnimeTrailer(arg0 context.Context, arg1 int64) (db.AnimeTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnimeTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnimeTrailer indicates an expected call of GetAnimeTrailer.
func (mr *MockGojoMockRecorder) GetAnimeTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnimeTrailer", reflect.TypeOf((*MockGojo)(nil).GetAnimeTrailer), arg0, arg1)
}

// GetDevice mocks base method.
func (m *MockGojo) GetDevice(arg0 context.Context, arg1 uuid.UUID) (db.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDevice", arg0, arg1)
	ret0, _ := ret[0].(db.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDevice indicates an expected call of GetDevice.
func (mr *MockGojoMockRecorder) GetDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDevice", reflect.TypeOf((*MockGojo)(nil).GetDevice), arg0, arg1)
}

// GetGenre mocks base method.
func (m *MockGojo) GetGenre(arg0 context.Context, arg1 int32) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenre indicates an expected call of GetGenre.
func (mr *MockGojoMockRecorder) GetGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenre", reflect.TypeOf((*MockGojo)(nil).GetGenre), arg0, arg1)
}

// GetLanguage mocks base method.
func (m *MockGojo) GetLanguage(arg0 context.Context, arg1 int32) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLanguage indicates an expected call of GetLanguage.
func (mr *MockGojoMockRecorder) GetLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguage", reflect.TypeOf((*MockGojo)(nil).GetLanguage), arg0, arg1)
}

// GetMeta mocks base method.
func (m *MockGojo) GetMeta(arg0 context.Context, arg1 int64) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeta indicates an expected call of GetMeta.
func (mr *MockGojoMockRecorder) GetMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeta", reflect.TypeOf((*MockGojo)(nil).GetMeta), arg0, arg1)
}

// GetSession mocks base method.
func (m *MockGojo) GetSession(arg0 context.Context, arg1 uuid.UUID) (db.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(db.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockGojoMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockGojo)(nil).GetSession), arg0, arg1)
}

// GetStudio mocks base method.
func (m *MockGojo) GetStudio(arg0 context.Context, arg1 int32) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudio indicates an expected call of GetStudio.
func (mr *MockGojoMockRecorder) GetStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudio", reflect.TypeOf((*MockGojo)(nil).GetStudio), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockGojo) GetUserByID(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockGojoMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockGojo)(nil).GetUserByID), arg0, arg1)
}

// GetUserByUsername mocks base method.
func (m *MockGojo) GetUserByUsername(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockGojoMockRecorder) GetUserByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockGojo)(nil).GetUserByUsername), arg0, arg1)
}

// ListActors mocks base method.
func (m *MockGojo) ListActors(arg0 context.Context, arg1 db.ListActorsParams) ([]db.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActors", arg0, arg1)
	ret0, _ := ret[0].([]db.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActors indicates an expected call of ListActors.
func (mr *MockGojoMockRecorder) ListActors(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActors", reflect.TypeOf((*MockGojo)(nil).ListActors), arg0, arg1)
}

// ListAnimeCharacters mocks base method.
func (m *MockGojo) ListAnimeCharacters(arg0 context.Context, arg1 int64) ([]db.AnimeCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeCharacters", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeCharacters indicates an expected call of ListAnimeCharacters.
func (mr *MockGojoMockRecorder) ListAnimeCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeCharacters", reflect.TypeOf((*MockGojo)(nil).ListAnimeCharacters), arg0, arg1)
}

// ListAnimeEpisodeMetasByEpisode mocks base method.
func (m *MockGojo) ListAnimeEpisodeMetasByEpisode(arg0 context.Context, arg1 db.ListAnimeEpisodeMetasByEpisodeParams) ([]db.AnimeEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeMetasByEpisode", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeMetasByEpisode indicates an expected call of ListAnimeEpisodeMetasByEpisode.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeMetasByEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeMetasByEpisode", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeMetasByEpisode), arg0, arg1)
}

// ListAnimeEpisodeServerDubTorrents mocks base method.
func (m *MockGojo) ListAnimeEpisodeServerDubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeEpisodeServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeServerDubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeServerDubTorrents indicates an expected call of ListAnimeEpisodeServerDubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeServerDubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeServerDubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeServerDubTorrents), arg0, arg1)
}

// ListAnimeEpisodeServerDubVideos mocks base method.
func (m *MockGojo) ListAnimeEpisodeServerDubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeEpisodeServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeServerDubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeServerDubVideos indicates an expected call of ListAnimeEpisodeServerDubVideos.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeServerDubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeServerDubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeServerDubVideos), arg0, arg1)
}

// ListAnimeEpisodeServerSubTorrents mocks base method.
func (m *MockGojo) ListAnimeEpisodeServerSubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeEpisodeServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeServerSubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeServerSubTorrents indicates an expected call of ListAnimeEpisodeServerSubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeServerSubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeServerSubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeServerSubTorrents), arg0, arg1)
}

// ListAnimeEpisodeServerSubVideos mocks base method.
func (m *MockGojo) ListAnimeEpisodeServerSubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeEpisodeServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeServerSubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeServerSubVideos indicates an expected call of ListAnimeEpisodeServerSubVideos.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeServerSubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeServerSubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeServerSubVideos), arg0, arg1)
}

// ListAnimeEpisodeServers mocks base method.
func (m *MockGojo) ListAnimeEpisodeServers(arg0 context.Context, arg1 db.ListAnimeEpisodeServersParams) ([]db.AnimeEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeServers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeServers indicates an expected call of ListAnimeEpisodeServers.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeServers", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeServers), arg0, arg1)
}

// ListAnimeEpisodeTorrents mocks base method.
func (m *MockGojo) ListAnimeEpisodeTorrents(arg0 context.Context, arg1 db.ListAnimeEpisodeTorrentsParams) ([]db.AnimeEpisodeTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeTorrents indicates an expected call of ListAnimeEpisodeTorrents.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeTorrents), arg0, arg1)
}

// ListAnimeEpisodeVideos mocks base method.
func (m *MockGojo) ListAnimeEpisodeVideos(arg0 context.Context, arg1 db.ListAnimeEpisodeVideosParams) ([]db.AnimeEpisodeVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeEpisodeVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeEpisodeVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeEpisodeVideos indicates an expected call of ListAnimeEpisodeVideos.
func (mr *MockGojoMockRecorder) ListAnimeEpisodeVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeEpisodeVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeEpisodeVideos), arg0, arg1)
}

// ListAnimeImages mocks base method.
func (m *MockGojo) ListAnimeImages(arg0 context.Context, arg1 int64) ([]db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeImages", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeImages indicates an expected call of ListAnimeImages.
func (mr *MockGojoMockRecorder) ListAnimeImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeImages), arg0, arg1)
}

// ListAnimeMovieBackdropImages mocks base method.
func (m *MockGojo) ListAnimeMovieBackdropImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieBackdropImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieBackdropImages indicates an expected call of ListAnimeMovieBackdropImages.
func (mr *MockGojoMockRecorder) ListAnimeMovieBackdropImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieBackdropImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieBackdropImages), arg0, arg1)
}

// ListAnimeMovieCharacters mocks base method.
func (m *MockGojo) ListAnimeMovieCharacters(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieCharacters", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieCharacters indicates an expected call of ListAnimeMovieCharacters.
func (mr *MockGojoMockRecorder) ListAnimeMovieCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieCharacters", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieCharacters), arg0, arg1)
}

// ListAnimeMovieGenres mocks base method.
func (m *MockGojo) ListAnimeMovieGenres(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieGenres", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieGenres indicates an expected call of ListAnimeMovieGenres.
func (mr *MockGojoMockRecorder) ListAnimeMovieGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieGenres", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieGenres), arg0, arg1)
}

// ListAnimeMovieLogoImages mocks base method.
func (m *MockGojo) ListAnimeMovieLogoImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieLogoImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieLogoImages indicates an expected call of ListAnimeMovieLogoImages.
func (mr *MockGojoMockRecorder) ListAnimeMovieLogoImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieLogoImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieLogoImages), arg0, arg1)
}

// ListAnimeMovieMetas mocks base method.
func (m *MockGojo) ListAnimeMovieMetas(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieMetas", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieMetas indicates an expected call of ListAnimeMovieMetas.
func (mr *MockGojoMockRecorder) ListAnimeMovieMetas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieMetas", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieMetas), arg0, arg1)
}

// ListAnimeMoviePosterImages mocks base method.
func (m *MockGojo) ListAnimeMoviePosterImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMoviePosterImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMoviePosterImages indicates an expected call of ListAnimeMoviePosterImages.
func (mr *MockGojoMockRecorder) ListAnimeMoviePosterImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMoviePosterImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeMoviePosterImages), arg0, arg1)
}

// ListAnimeMovieServerDubTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieServerDubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerDubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerDubTorrents indicates an expected call of ListAnimeMovieServerDubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerDubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerDubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerDubTorrents), arg0, arg1)
}

// ListAnimeMovieServerDubVideos mocks base method.
func (m *MockGojo) ListAnimeMovieServerDubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerDubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerDubVideos indicates an expected call of ListAnimeMovieServerDubVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerDubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerDubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerDubVideos), arg0, arg1)
}

// ListAnimeMovieServerSubTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieServerSubTorrents(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerSubTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerSubTorrents indicates an expected call of ListAnimeMovieServerSubTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerSubTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerSubTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerSubTorrents), arg0, arg1)
}

// ListAnimeMovieServerSubVideos mocks base method.
func (m *MockGojo) ListAnimeMovieServerSubVideos(arg0 context.Context, arg1 int64) ([]db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServerSubVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServerSubVideos indicates an expected call of ListAnimeMovieServerSubVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieServerSubVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServerSubVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServerSubVideos), arg0, arg1)
}

// ListAnimeMovieServers mocks base method.
func (m *MockGojo) ListAnimeMovieServers(arg0 context.Context, arg1 db.ListAnimeMovieServersParams) ([]db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieServers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieServers indicates an expected call of ListAnimeMovieServers.
func (mr *MockGojoMockRecorder) ListAnimeMovieServers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieServers", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieServers), arg0, arg1)
}

// ListAnimeMovieStudios mocks base method.
func (m *MockGojo) ListAnimeMovieStudios(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieStudios", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieStudios indicates an expected call of ListAnimeMovieStudios.
func (mr *MockGojoMockRecorder) ListAnimeMovieStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieStudios", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieStudios), arg0, arg1)
}

// ListAnimeMovieTags mocks base method.
func (m *MockGojo) ListAnimeMovieTags(arg0 context.Context, arg1 int64) ([]db.AnimeMovieTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieTags", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieTags indicates an expected call of ListAnimeMovieTags.
func (mr *MockGojoMockRecorder) ListAnimeMovieTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieTags", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieTags), arg0, arg1)
}

// ListAnimeMovieTorrents mocks base method.
func (m *MockGojo) ListAnimeMovieTorrents(arg0 context.Context, arg1 db.ListAnimeMovieTorrentsParams) ([]db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieTorrents", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieTorrents indicates an expected call of ListAnimeMovieTorrents.
func (mr *MockGojoMockRecorder) ListAnimeMovieTorrents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieTorrents", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieTorrents), arg0, arg1)
}

// ListAnimeMovieTrailers mocks base method.
func (m *MockGojo) ListAnimeMovieTrailers(arg0 context.Context, arg1 int64) ([]db.AnimeMovieTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieTrailers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieTrailers indicates an expected call of ListAnimeMovieTrailers.
func (mr *MockGojoMockRecorder) ListAnimeMovieTrailers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieTrailers", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieTrailers), arg0, arg1)
}

// ListAnimeMovieVideos mocks base method.
func (m *MockGojo) ListAnimeMovieVideos(arg0 context.Context, arg1 db.ListAnimeMovieVideosParams) ([]db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovieVideos", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovieVideos indicates an expected call of ListAnimeMovieVideos.
func (mr *MockGojoMockRecorder) ListAnimeMovieVideos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovieVideos", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovieVideos), arg0, arg1)
}

// ListAnimeMovies mocks base method.
func (m *MockGojo) ListAnimeMovies(arg0 context.Context, arg1 db.ListAnimeMoviesParams) ([]db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeMovies", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeMovies indicates an expected call of ListAnimeMovies.
func (mr *MockGojoMockRecorder) ListAnimeMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeMovies", reflect.TypeOf((*MockGojo)(nil).ListAnimeMovies), arg0, arg1)
}

// ListAnimeSeasonEpisodes mocks base method.
func (m *MockGojo) ListAnimeSeasonEpisodes(arg0 context.Context, arg1 db.ListAnimeSeasonEpisodesParams) ([]db.AnimeSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonEpisodes", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonEpisodes indicates an expected call of ListAnimeSeasonEpisodes.
func (mr *MockGojoMockRecorder) ListAnimeSeasonEpisodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonEpisodes", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonEpisodes), arg0, arg1)
}

// ListAnimeSeasonGenres mocks base method.
func (m *MockGojo) ListAnimeSeasonGenres(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonGenres", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonGenres indicates an expected call of ListAnimeSeasonGenres.
func (mr *MockGojoMockRecorder) ListAnimeSeasonGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonGenres", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonGenres), arg0, arg1)
}

// ListAnimeSeasonMetasBySeason mocks base method.
func (m *MockGojo) ListAnimeSeasonMetasBySeason(arg0 context.Context, arg1 db.ListAnimeSeasonMetasBySeasonParams) ([]db.AnimeSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonMetasBySeason", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonMetasBySeason indicates an expected call of ListAnimeSeasonMetasBySeason.
func (mr *MockGojoMockRecorder) ListAnimeSeasonMetasBySeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonMetasBySeason", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonMetasBySeason), arg0, arg1)
}

// ListAnimeSeasonPosterImages mocks base method.
func (m *MockGojo) ListAnimeSeasonPosterImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonPosterImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonPosterImages indicates an expected call of ListAnimeSeasonPosterImages.
func (mr *MockGojoMockRecorder) ListAnimeSeasonPosterImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonPosterImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonPosterImages), arg0, arg1)
}

// ListAnimeSeasonStudios mocks base method.
func (m *MockGojo) ListAnimeSeasonStudios(arg0 context.Context, arg1 int64) ([]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonStudios", arg0, arg1)
	ret0, _ := ret[0].([]int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonStudios indicates an expected call of ListAnimeSeasonStudios.
func (mr *MockGojoMockRecorder) ListAnimeSeasonStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonStudios", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonStudios), arg0, arg1)
}

// ListAnimeSeasonTags mocks base method.
func (m *MockGojo) ListAnimeSeasonTags(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonTags", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonTags indicates an expected call of ListAnimeSeasonTags.
func (mr *MockGojoMockRecorder) ListAnimeSeasonTags(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonTags", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonTags), arg0, arg1)
}

// ListAnimeSeasonTrailers mocks base method.
func (m *MockGojo) ListAnimeSeasonTrailers(arg0 context.Context, arg1 int64) ([]db.AnimeSeasonTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonTrailers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSeasonTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonTrailers indicates an expected call of ListAnimeSeasonTrailers.
func (mr *MockGojoMockRecorder) ListAnimeSeasonTrailers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonTrailers", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonTrailers), arg0, arg1)
}

// ListAnimeSeasonsByAnimeID mocks base method.
func (m *MockGojo) ListAnimeSeasonsByAnimeID(arg0 context.Context, arg1 db.ListAnimeSeasonsByAnimeIDParams) ([]db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeasonsByAnimeID", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeasonsByAnimeID indicates an expected call of ListAnimeSeasonsByAnimeID.
func (mr *MockGojoMockRecorder) ListAnimeSeasonsByAnimeID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeasonsByAnimeID", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeasonsByAnimeID), arg0, arg1)
}

// ListAnimeSerieBackdropImages mocks base method.
func (m *MockGojo) ListAnimeSerieBackdropImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieBackdropImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieBackdropImages indicates an expected call of ListAnimeSerieBackdropImages.
func (mr *MockGojoMockRecorder) ListAnimeSerieBackdropImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieBackdropImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieBackdropImages), arg0, arg1)
}

// ListAnimeSerieCharacters mocks base method.
func (m *MockGojo) ListAnimeSerieCharacters(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieCharacters", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieCharacters indicates an expected call of ListAnimeSerieCharacters.
func (mr *MockGojoMockRecorder) ListAnimeSerieCharacters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieCharacters", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieCharacters), arg0, arg1)
}

// ListAnimeSerieLogoImages mocks base method.
func (m *MockGojo) ListAnimeSerieLogoImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieLogoImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieLogoImages indicates an expected call of ListAnimeSerieLogoImages.
func (mr *MockGojoMockRecorder) ListAnimeSerieLogoImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieLogoImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieLogoImages), arg0, arg1)
}

// ListAnimeSerieMetas mocks base method.
func (m *MockGojo) ListAnimeSerieMetas(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieMetas", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieMetas indicates an expected call of ListAnimeSerieMetas.
func (mr *MockGojoMockRecorder) ListAnimeSerieMetas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieMetas", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieMetas), arg0, arg1)
}

// ListAnimeSeriePosterImages mocks base method.
func (m *MockGojo) ListAnimeSeriePosterImages(arg0 context.Context, arg1 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeriePosterImages", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeriePosterImages indicates an expected call of ListAnimeSeriePosterImages.
func (mr *MockGojoMockRecorder) ListAnimeSeriePosterImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeriePosterImages", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeriePosterImages), arg0, arg1)
}

// ListAnimeSerieTrailers mocks base method.
func (m *MockGojo) ListAnimeSerieTrailers(arg0 context.Context, arg1 int64) ([]db.AnimeSerieTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSerieTrailers", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerieTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSerieTrailers indicates an expected call of ListAnimeSerieTrailers.
func (mr *MockGojoMockRecorder) ListAnimeSerieTrailers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSerieTrailers", reflect.TypeOf((*MockGojo)(nil).ListAnimeSerieTrailers), arg0, arg1)
}

// ListAnimeSeries mocks base method.
func (m *MockGojo) ListAnimeSeries(arg0 context.Context, arg1 db.ListAnimeSeriesParams) ([]db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnimeSeries", arg0, arg1)
	ret0, _ := ret[0].([]db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnimeSeries indicates an expected call of ListAnimeSeries.
func (mr *MockGojoMockRecorder) ListAnimeSeries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnimeSeries", reflect.TypeOf((*MockGojo)(nil).ListAnimeSeries), arg0, arg1)
}

// ListGenres mocks base method.
func (m *MockGojo) ListGenres(arg0 context.Context, arg1 db.ListGenresParams) ([]db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGenres", arg0, arg1)
	ret0, _ := ret[0].([]db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenres indicates an expected call of ListGenres.
func (mr *MockGojoMockRecorder) ListGenres(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenres", reflect.TypeOf((*MockGojo)(nil).ListGenres), arg0, arg1)
}

// ListLanguages mocks base method.
func (m *MockGojo) ListLanguages(arg0 context.Context, arg1 db.ListLanguagesParams) ([]db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLanguages", arg0, arg1)
	ret0, _ := ret[0].([]db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLanguages indicates an expected call of ListLanguages.
func (mr *MockGojoMockRecorder) ListLanguages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLanguages", reflect.TypeOf((*MockGojo)(nil).ListLanguages), arg0, arg1)
}

// ListStudios mocks base method.
func (m *MockGojo) ListStudios(arg0 context.Context, arg1 db.ListStudiosParams) ([]db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStudios", arg0, arg1)
	ret0, _ := ret[0].([]db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStudios indicates an expected call of ListStudios.
func (mr *MockGojoMockRecorder) ListStudios(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStudios", reflect.TypeOf((*MockGojo)(nil).ListStudios), arg0, arg1)
}

// ListUserDevices mocks base method.
func (m *MockGojo) ListUserDevices(arg0 context.Context, arg1 db.ListUserDevicesParams) ([]uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserDevices", arg0, arg1)
	ret0, _ := ret[0].([]uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserDevices indicates an expected call of ListUserDevices.
func (mr *MockGojoMockRecorder) ListUserDevices(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserDevices", reflect.TypeOf((*MockGojo)(nil).ListUserDevices), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockGojo) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockGojoMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockGojo)(nil).ListUsers), arg0, arg1)
}

// LoginUserTx mocks base method.
func (m *MockGojo) LoginUserTx(arg0 context.Context, arg1 db.LoginUserTxParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUserTx", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUserTx indicates an expected call of LoginUserTx.
func (mr *MockGojoMockRecorder) LoginUserTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUserTx", reflect.TypeOf((*MockGojo)(nil).LoginUserTx), arg0, arg1)
}

// QueryAnimeMovieOfficialTitles mocks base method.
func (m *MockGojo) QueryAnimeMovieOfficialTitles(arg0 context.Context, arg1 db.QueryAnimeMovieOfficialTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeMovieOfficialTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeMovieOfficialTitles indicates an expected call of QueryAnimeMovieOfficialTitles.
func (mr *MockGojoMockRecorder) QueryAnimeMovieOfficialTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeMovieOfficialTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeMovieOfficialTitles), arg0, arg1)
}

// QueryAnimeMovieOtherTitles mocks base method.
func (m *MockGojo) QueryAnimeMovieOtherTitles(arg0 context.Context, arg1 db.QueryAnimeMovieOtherTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeMovieOtherTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeMovieOtherTitles indicates an expected call of QueryAnimeMovieOtherTitles.
func (mr *MockGojoMockRecorder) QueryAnimeMovieOtherTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeMovieOtherTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeMovieOtherTitles), arg0, arg1)
}

// QueryAnimeMovieShortTitles mocks base method.
func (m *MockGojo) QueryAnimeMovieShortTitles(arg0 context.Context, arg1 db.QueryAnimeMovieShortTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeMovieShortTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeMovieShortTitles indicates an expected call of QueryAnimeMovieShortTitles.
func (mr *MockGojoMockRecorder) QueryAnimeMovieShortTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeMovieShortTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeMovieShortTitles), arg0, arg1)
}

// QueryAnimeMovieTranslationTitles mocks base method.
func (m *MockGojo) QueryAnimeMovieTranslationTitles(arg0 context.Context, arg1 db.QueryAnimeMovieTranslationTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeMovieTranslationTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeMovieTranslationTitles indicates an expected call of QueryAnimeMovieTranslationTitles.
func (mr *MockGojoMockRecorder) QueryAnimeMovieTranslationTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeMovieTranslationTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeMovieTranslationTitles), arg0, arg1)
}

// QueryAnimeMovieTx mocks base method.
func (m *MockGojo) QueryAnimeMovieTx(arg0 context.Context, arg1 db.QueryAnimeMovieTxParams) (db.QueryAnimeMovieTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeMovieTx", arg0, arg1)
	ret0, _ := ret[0].(db.QueryAnimeMovieTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeMovieTx indicates an expected call of QueryAnimeMovieTx.
func (mr *MockGojoMockRecorder) QueryAnimeMovieTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeMovieTx", reflect.TypeOf((*MockGojo)(nil).QueryAnimeMovieTx), arg0, arg1)
}

// QueryAnimeSeasonOfficialTitles mocks base method.
func (m *MockGojo) QueryAnimeSeasonOfficialTitles(arg0 context.Context, arg1 db.QueryAnimeSeasonOfficialTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeSeasonOfficialTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeSeasonOfficialTitles indicates an expected call of QueryAnimeSeasonOfficialTitles.
func (mr *MockGojoMockRecorder) QueryAnimeSeasonOfficialTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeSeasonOfficialTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeSeasonOfficialTitles), arg0, arg1)
}

// QueryAnimeSeasonOtherTitles mocks base method.
func (m *MockGojo) QueryAnimeSeasonOtherTitles(arg0 context.Context, arg1 db.QueryAnimeSeasonOtherTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeSeasonOtherTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeSeasonOtherTitles indicates an expected call of QueryAnimeSeasonOtherTitles.
func (mr *MockGojoMockRecorder) QueryAnimeSeasonOtherTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeSeasonOtherTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeSeasonOtherTitles), arg0, arg1)
}

// QueryAnimeSeasonShortTitles mocks base method.
func (m *MockGojo) QueryAnimeSeasonShortTitles(arg0 context.Context, arg1 db.QueryAnimeSeasonShortTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeSeasonShortTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeSeasonShortTitles indicates an expected call of QueryAnimeSeasonShortTitles.
func (mr *MockGojoMockRecorder) QueryAnimeSeasonShortTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeSeasonShortTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeSeasonShortTitles), arg0, arg1)
}

// QueryAnimeSeasonTranslationTitles mocks base method.
func (m *MockGojo) QueryAnimeSeasonTranslationTitles(arg0 context.Context, arg1 db.QueryAnimeSeasonTranslationTitlesParams) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeSeasonTranslationTitles", arg0, arg1)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeSeasonTranslationTitles indicates an expected call of QueryAnimeSeasonTranslationTitles.
func (mr *MockGojoMockRecorder) QueryAnimeSeasonTranslationTitles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeSeasonTranslationTitles", reflect.TypeOf((*MockGojo)(nil).QueryAnimeSeasonTranslationTitles), arg0, arg1)
}

// QueryAnimeSeasonTx mocks base method.
func (m *MockGojo) QueryAnimeSeasonTx(arg0 context.Context, arg1 db.QueryAnimeSeasonTxParams) (db.QueryAnimeSeasonTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAnimeSeasonTx", arg0, arg1)
	ret0, _ := ret[0].(db.QueryAnimeSeasonTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAnimeSeasonTx indicates an expected call of QueryAnimeSeasonTx.
func (mr *MockGojoMockRecorder) QueryAnimeSeasonTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAnimeSeasonTx", reflect.TypeOf((*MockGojo)(nil).QueryAnimeSeasonTx), arg0, arg1)
}

// RefreshSessions mocks base method.
func (m *MockGojo) RefreshSessions(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshSessions", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshSessions indicates an expected call of RefreshSessions.
func (mr *MockGojoMockRecorder) RefreshSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshSessions", reflect.TypeOf((*MockGojo)(nil).RefreshSessions), arg0, arg1)
}

// UpdateActor mocks base method.
func (m *MockGojo) UpdateActor(arg0 context.Context, arg1 db.UpdateActorParams) (db.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", arg0, arg1)
	ret0, _ := ret[0].(db.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockGojoMockRecorder) UpdateActor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockGojo)(nil).UpdateActor), arg0, arg1)
}

// UpdateAnimeCharacter mocks base method.
func (m *MockGojo) UpdateAnimeCharacter(arg0 context.Context, arg1 db.UpdateAnimeCharacterParams) (db.AnimeCharacter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeCharacter", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeCharacter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeCharacter indicates an expected call of UpdateAnimeCharacter.
func (mr *MockGojoMockRecorder) UpdateAnimeCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeCharacter", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeCharacter), arg0, arg1)
}

// UpdateAnimeEpisode mocks base method.
func (m *MockGojo) UpdateAnimeEpisode(arg0 context.Context, arg1 db.UpdateAnimeEpisodeParams) (db.AnimeSerieEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisode indicates an expected call of UpdateAnimeEpisode.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisode", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisode), arg0, arg1)
}

// UpdateAnimeEpisodeMeta mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeMeta(arg0 context.Context, arg1 db.UpdateAnimeEpisodeMetaParams) (db.AnimeEpisodeMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeMeta indicates an expected call of UpdateAnimeEpisodeMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeMeta), arg0, arg1)
}

// UpdateAnimeEpisodeServer mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeServer(arg0 context.Context, arg1 db.UpdateAnimeEpisodeServerParams) (db.AnimeEpisodeServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeServer indicates an expected call of UpdateAnimeEpisodeServer.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeServer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeServer), arg0, arg1)
}

// UpdateAnimeEpisodeServerDubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeServerDubTorrent(arg0 context.Context, arg1 db.UpdateAnimeEpisodeServerDubTorrentParams) (db.AnimeEpisodeServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeServerDubTorrent indicates an expected call of UpdateAnimeEpisodeServerDubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeServerDubTorrent), arg0, arg1)
}

// UpdateAnimeEpisodeServerDubVideo mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeServerDubVideo(arg0 context.Context, arg1 db.UpdateAnimeEpisodeServerDubVideoParams) (db.AnimeEpisodeServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeServerDubVideo indicates an expected call of UpdateAnimeEpisodeServerDubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeServerDubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeServerDubVideo), arg0, arg1)
}

// UpdateAnimeEpisodeServerSubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeServerSubTorrent(arg0 context.Context, arg1 db.UpdateAnimeEpisodeServerSubTorrentParams) (db.AnimeEpisodeServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeServerSubTorrent indicates an expected call of UpdateAnimeEpisodeServerSubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeServerSubTorrent), arg0, arg1)
}

// UpdateAnimeEpisodeServerSubVideo mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeServerSubVideo(arg0 context.Context, arg1 db.UpdateAnimeEpisodeServerSubVideoParams) (db.AnimeEpisodeServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeServerSubVideo indicates an expected call of UpdateAnimeEpisodeServerSubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeServerSubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeServerSubVideo), arg0, arg1)
}

// UpdateAnimeEpisodeTorrent mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeTorrent(arg0 context.Context, arg1 db.UpdateAnimeEpisodeTorrentParams) (db.AnimeEpisodeTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeTorrent indicates an expected call of UpdateAnimeEpisodeTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeTorrent), arg0, arg1)
}

// UpdateAnimeEpisodeVideo mocks base method.
func (m *MockGojo) UpdateAnimeEpisodeVideo(arg0 context.Context, arg1 db.UpdateAnimeEpisodeVideoParams) (db.AnimeEpisodeVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeEpisodeVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeEpisodeVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeEpisodeVideo indicates an expected call of UpdateAnimeEpisodeVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeEpisodeVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeEpisodeVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeEpisodeVideo), arg0, arg1)
}

// UpdateAnimeImage mocks base method.
func (m *MockGojo) UpdateAnimeImage(arg0 context.Context, arg1 db.UpdateAnimeImageParams) (db.AnimeImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeImage", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeImage indicates an expected call of UpdateAnimeImage.
func (mr *MockGojoMockRecorder) UpdateAnimeImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeImage", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeImage), arg0, arg1)
}

// UpdateAnimeLink mocks base method.
func (m *MockGojo) UpdateAnimeLink(arg0 context.Context, arg1 db.UpdateAnimeLinkParams) (db.AnimeLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeLink", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeLink indicates an expected call of UpdateAnimeLink.
func (mr *MockGojoMockRecorder) UpdateAnimeLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeLink", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeLink), arg0, arg1)
}

// UpdateAnimeMovie mocks base method.
func (m *MockGojo) UpdateAnimeMovie(arg0 context.Context, arg1 db.UpdateAnimeMovieParams) (db.AnimeMovie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovie indicates an expected call of UpdateAnimeMovie.
func (mr *MockGojoMockRecorder) UpdateAnimeMovie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovie", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovie), arg0, arg1)
}

// UpdateAnimeMovieMeta mocks base method.
func (m *MockGojo) UpdateAnimeMovieMeta(arg0 context.Context, arg1 db.UpdateAnimeMovieMetaParams) (db.AnimeMovieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieMeta indicates an expected call of UpdateAnimeMovieMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieMeta), arg0, arg1)
}

// UpdateAnimeMovieServer mocks base method.
func (m *MockGojo) UpdateAnimeMovieServer(arg0 context.Context, arg1 db.UpdateAnimeMovieServerParams) (db.AnimeMovieServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServer indicates an expected call of UpdateAnimeMovieServer.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServer), arg0, arg1)
}

// UpdateAnimeMovieServerDubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerDubTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieServerDubTorrentParams) (db.AnimeMovieServerDubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerDubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerDubTorrent indicates an expected call of UpdateAnimeMovieServerDubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerDubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerDubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerDubTorrent), arg0, arg1)
}

// UpdateAnimeMovieServerDubVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerDubVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieServerDubVideoParams) (db.AnimeMovieServerDubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerDubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerDubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerDubVideo indicates an expected call of UpdateAnimeMovieServerDubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerDubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerDubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerDubVideo), arg0, arg1)
}

// UpdateAnimeMovieServerSubTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerSubTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieServerSubTorrentParams) (db.AnimeMovieServerSubTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerSubTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerSubTorrent indicates an expected call of UpdateAnimeMovieServerSubTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerSubTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerSubTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerSubTorrent), arg0, arg1)
}

// UpdateAnimeMovieServerSubVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieServerSubVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieServerSubVideoParams) (db.AnimeMovieServerSubVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieServerSubVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieServerSubVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieServerSubVideo indicates an expected call of UpdateAnimeMovieServerSubVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieServerSubVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieServerSubVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieServerSubVideo), arg0, arg1)
}

// UpdateAnimeMovieTorrent mocks base method.
func (m *MockGojo) UpdateAnimeMovieTorrent(arg0 context.Context, arg1 db.UpdateAnimeMovieTorrentParams) (db.AnimeMovieTorrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieTorrent", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieTorrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieTorrent indicates an expected call of UpdateAnimeMovieTorrent.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieTorrent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieTorrent", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieTorrent), arg0, arg1)
}

// UpdateAnimeMovieVideo mocks base method.
func (m *MockGojo) UpdateAnimeMovieVideo(arg0 context.Context, arg1 db.UpdateAnimeMovieVideoParams) (db.AnimeMovieVideo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeMovieVideo", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeMovieVideo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeMovieVideo indicates an expected call of UpdateAnimeMovieVideo.
func (mr *MockGojoMockRecorder) UpdateAnimeMovieVideo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeMovieVideo", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeMovieVideo), arg0, arg1)
}

// UpdateAnimeResource mocks base method.
func (m *MockGojo) UpdateAnimeResource(arg0 context.Context, arg1 db.UpdateAnimeResourceParams) (db.AnimeResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeResource", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeResource indicates an expected call of UpdateAnimeResource.
func (mr *MockGojoMockRecorder) UpdateAnimeResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeResource", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeResource), arg0, arg1)
}

// UpdateAnimeSeason mocks base method.
func (m *MockGojo) UpdateAnimeSeason(arg0 context.Context, arg1 db.UpdateAnimeSeasonParams) (db.AnimeSerieSeason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSeason", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieSeason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSeason indicates an expected call of UpdateAnimeSeason.
func (mr *MockGojoMockRecorder) UpdateAnimeSeason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSeason", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSeason), arg0, arg1)
}

// UpdateAnimeSeasonEpisode mocks base method.
func (m *MockGojo) UpdateAnimeSeasonEpisode(arg0 context.Context, arg1 db.UpdateAnimeSeasonEpisodeParams) (db.AnimeSeasonEpisode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSeasonEpisode", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonEpisode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSeasonEpisode indicates an expected call of UpdateAnimeSeasonEpisode.
func (mr *MockGojoMockRecorder) UpdateAnimeSeasonEpisode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSeasonEpisode", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSeasonEpisode), arg0, arg1)
}

// UpdateAnimeSeasonMeta mocks base method.
func (m *MockGojo) UpdateAnimeSeasonMeta(arg0 context.Context, arg1 db.UpdateAnimeSeasonMetaParams) (db.AnimeSeasonMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSeasonMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSeasonMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSeasonMeta indicates an expected call of UpdateAnimeSeasonMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeSeasonMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSeasonMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSeasonMeta), arg0, arg1)
}

// UpdateAnimeSerie mocks base method.
func (m *MockGojo) UpdateAnimeSerie(arg0 context.Context, arg1 db.UpdateAnimeSerieParams) (db.AnimeSerie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerie", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerie indicates an expected call of UpdateAnimeSerie.
func (mr *MockGojoMockRecorder) UpdateAnimeSerie(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerie", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerie), arg0, arg1)
}

// UpdateAnimeSerieMeta mocks base method.
func (m *MockGojo) UpdateAnimeSerieMeta(arg0 context.Context, arg1 db.UpdateAnimeSerieMetaParams) (db.AnimeSerieMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeSerieMeta", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeSerieMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeSerieMeta indicates an expected call of UpdateAnimeSerieMeta.
func (mr *MockGojoMockRecorder) UpdateAnimeSerieMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeSerieMeta", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeSerieMeta), arg0, arg1)
}

// UpdateAnimeTag mocks base method.
func (m *MockGojo) UpdateAnimeTag(arg0 context.Context, arg1 db.UpdateAnimeTagParams) (db.AnimeTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeTag", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeTag indicates an expected call of UpdateAnimeTag.
func (mr *MockGojoMockRecorder) UpdateAnimeTag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeTag", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeTag), arg0, arg1)
}

// UpdateAnimeTrailer mocks base method.
func (m *MockGojo) UpdateAnimeTrailer(arg0 context.Context, arg1 db.UpdateAnimeTrailerParams) (db.AnimeTrailer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnimeTrailer", arg0, arg1)
	ret0, _ := ret[0].(db.AnimeTrailer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnimeTrailer indicates an expected call of UpdateAnimeTrailer.
func (mr *MockGojoMockRecorder) UpdateAnimeTrailer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnimeTrailer", reflect.TypeOf((*MockGojo)(nil).UpdateAnimeTrailer), arg0, arg1)
}

// UpdateDevice mocks base method.
func (m *MockGojo) UpdateDevice(arg0 context.Context, arg1 db.UpdateDeviceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockGojoMockRecorder) UpdateDevice(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockGojo)(nil).UpdateDevice), arg0, arg1)
}

// UpdateGenre mocks base method.
func (m *MockGojo) UpdateGenre(arg0 context.Context, arg1 db.UpdateGenreParams) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockGojoMockRecorder) UpdateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockGojo)(nil).UpdateGenre), arg0, arg1)
}

// UpdateLanguage mocks base method.
func (m *MockGojo) UpdateLanguage(arg0 context.Context, arg1 db.UpdateLanguageParams) (db.Language, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLanguage", arg0, arg1)
	ret0, _ := ret[0].(db.Language)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLanguage indicates an expected call of UpdateLanguage.
func (mr *MockGojoMockRecorder) UpdateLanguage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLanguage", reflect.TypeOf((*MockGojo)(nil).UpdateLanguage), arg0, arg1)
}

// UpdateMeta mocks base method.
func (m *MockGojo) UpdateMeta(arg0 context.Context, arg1 db.UpdateMetaParams) (db.Meta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMeta", arg0, arg1)
	ret0, _ := ret[0].(db.Meta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMeta indicates an expected call of UpdateMeta.
func (mr *MockGojoMockRecorder) UpdateMeta(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMeta", reflect.TypeOf((*MockGojo)(nil).UpdateMeta), arg0, arg1)
}

// UpdateSession mocks base method.
func (m *MockGojo) UpdateSession(arg0 context.Context, arg1 db.UpdateSessionParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSession", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSession indicates an expected call of UpdateSession.
func (mr *MockGojoMockRecorder) UpdateSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSession", reflect.TypeOf((*MockGojo)(nil).UpdateSession), arg0, arg1)
}

// UpdateStudio mocks base method.
func (m *MockGojo) UpdateStudio(arg0 context.Context, arg1 db.UpdateStudioParams) (db.Studio, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudio", arg0, arg1)
	ret0, _ := ret[0].(db.Studio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStudio indicates an expected call of UpdateStudio.
func (mr *MockGojoMockRecorder) UpdateStudio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudio", reflect.TypeOf((*MockGojo)(nil).UpdateStudio), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockGojo) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockGojoMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockGojo)(nil).UpdateUser), arg0, arg1)
}

// UpdateVerifyEmail mocks base method.
func (m *MockGojo) UpdateVerifyEmail(arg0 context.Context, arg1 db.UpdateVerifyEmailParams) (db.VerifyEmail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVerifyEmail", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVerifyEmail indicates an expected call of UpdateVerifyEmail.
func (mr *MockGojoMockRecorder) UpdateVerifyEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVerifyEmail", reflect.TypeOf((*MockGojo)(nil).UpdateVerifyEmail), arg0, arg1)
}

// VerifyEmailTx mocks base method.
func (m *MockGojo) VerifyEmailTx(arg0 context.Context, arg1 db.VerifyEmailTxParams) (db.VerifyEmailTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyEmailTx", arg0, arg1)
	ret0, _ := ret[0].(db.VerifyEmailTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyEmailTx indicates an expected call of VerifyEmailTx.
func (mr *MockGojoMockRecorder) VerifyEmailTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyEmailTx", reflect.TypeOf((*MockGojo)(nil).VerifyEmailTx), arg0, arg1)
}
