// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_image.sql

package db

import (
	"context"
)

const createAnimeSerieImage = `-- name: CreateAnimeSerieImage :one
INSERT INTO anime_serie_images (anime_id, image_id)
VALUES ($1, $2)
RETURNING id, anime_id, image_id, created_at
`

type CreateAnimeSerieImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) CreateAnimeSerieImage(ctx context.Context, arg CreateAnimeSerieImageParams) (AnimeSerieImage, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieImage, arg.AnimeID, arg.ImageID)
	var i AnimeSerieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieImage = `-- name: DeleteAnimeSerieImage :exec
DELETE FROM anime_serie_images
WHERE anime_id = $1 AND image_id = $2
`

type DeleteAnimeSerieImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) DeleteAnimeSerieImage(ctx context.Context, arg DeleteAnimeSerieImageParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieImage, arg.AnimeID, arg.ImageID)
	return err
}

const getAnimeSerieImage = `-- name: GetAnimeSerieImage :one
SELECT id, anime_id, image_id, created_at FROM anime_serie_images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieImage(ctx context.Context, id int64) (AnimeSerieImage, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieImage, id)
	var i AnimeSerieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeSerieImageByAnimeID = `-- name: GetAnimeSerieImageByAnimeID :one
SELECT id, anime_id, image_id, created_at FROM anime_serie_images
WHERE anime_id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieImageByAnimeID(ctx context.Context, animeID int64) (AnimeSerieImage, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieImageByAnimeID, animeID)
	var i AnimeSerieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieImages = `-- name: ListAnimeSerieImages :many
SELECT image_id
FROM anime_serie_images
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeSerieImagesParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeSerieImages(ctx context.Context, arg ListAnimeSerieImagesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieImages, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var image_id int64
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
