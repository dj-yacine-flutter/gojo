// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_torrent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovieTorrent = `-- name: CreateAnimeMovieTorrent :one
INSERT INTO anime_movie_torrents (language_id, file_name, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at
`

type CreateAnimeMovieTorrentParams struct {
	LanguageID  int32
	FileName    string
	TorrentHash string
	TorrentFile string
	Seeds       int32
	Peers       int32
	Leechers    int32
	SizeBytes   int64
	Quality     string
}

func (q *Queries) CreateAnimeMovieTorrent(ctx context.Context, arg CreateAnimeMovieTorrentParams) (AnimeMovieTorrent, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieTorrent,
		arg.LanguageID,
		arg.FileName,
		arg.TorrentHash,
		arg.TorrentFile,
		arg.Seeds,
		arg.Peers,
		arg.Leechers,
		arg.SizeBytes,
		arg.Quality,
	)
	var i AnimeMovieTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieTorrent = `-- name: DeleteAnimeMovieTorrent :exec
DELETE FROM anime_movie_torrents
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovieTorrent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieTorrent, id)
	return err
}

const getAnimeMovieTorrent = `-- name: GetAnimeMovieTorrent :one
SELECT id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at FROM anime_movie_torrents
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieTorrent(ctx context.Context, id int64) (AnimeMovieTorrent, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieTorrent, id)
	var i AnimeMovieTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieTorrents = `-- name: ListAnimeMovieTorrents :many
SELECT id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at FROM anime_movie_torrents
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeMovieTorrentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeMovieTorrents(ctx context.Context, arg ListAnimeMovieTorrentsParams) ([]AnimeMovieTorrent, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieTorrents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovieTorrent{}
	for rows.Next() {
		var i AnimeMovieTorrent
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.LanguageID,
			&i.TorrentHash,
			&i.TorrentFile,
			&i.Seeds,
			&i.Peers,
			&i.Leechers,
			&i.SizeBytes,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovieTorrent = `-- name: UpdateAnimeMovieTorrent :one
UPDATE anime_movie_torrents
SET
    language_id = COALESCE($2, language_id),
    file_name = COALESCE($3, file_name),
    torrent_hash = COALESCE($4, torrent_hash),
    torrent_file = COALESCE($5, torrent_file),
    seeds = COALESCE($6, seeds),
    peers = COALESCE($7, peers),
    leechers = COALESCE($8, leechers),
    size_bytes = COALESCE($9, size_bytes),
    quality = COALESCE($10, quality)
WHERE id = $1
RETURNING id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at
`

type UpdateAnimeMovieTorrentParams struct {
	ID          int64
	LanguageID  pgtype.Int4
	FileName    pgtype.Text
	TorrentHash pgtype.Text
	TorrentFile pgtype.Text
	Seeds       pgtype.Int4
	Peers       pgtype.Int4
	Leechers    pgtype.Int4
	SizeBytes   pgtype.Int8
	Quality     pgtype.Text
}

func (q *Queries) UpdateAnimeMovieTorrent(ctx context.Context, arg UpdateAnimeMovieTorrentParams) (AnimeMovieTorrent, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovieTorrent,
		arg.ID,
		arg.LanguageID,
		arg.FileName,
		arg.TorrentHash,
		arg.TorrentFile,
		arg.Seeds,
		arg.Peers,
		arg.Leechers,
		arg.SizeBytes,
		arg.Quality,
	)
	var i AnimeMovieTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}
