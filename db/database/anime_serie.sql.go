// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerie = `-- name: CreateAnimeSerie :one
INSERT INTO anime_series (
    original_title,
    aired,
    release_year,
    rating,
    portriat_poster,
    portriat_blur_hash,
    landscape_poster,
    landscape_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, original_title, aired, release_year, rating, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type CreateAnimeSerieParams struct {
	OriginalTitle     string
	Aired             time.Time
	ReleaseYear       int32
	Rating            string
	PortriatPoster    string
	PortriatBlurHash  string
	LandscapePoster   string
	LandscapeBlurHash string
}

func (q *Queries) CreateAnimeSerie(ctx context.Context, arg CreateAnimeSerieParams) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, createAnimeSerie,
		arg.OriginalTitle,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
	)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerie = `-- name: DeleteAnimeSerie :exec
DELETE FROM anime_series 
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerie, id)
	return err
}

const getAnimeSerie = `-- name: GetAnimeSerie :one
SELECT id, original_title, aired, release_year, rating, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_series 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerie(ctx context.Context, id int64) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, getAnimeSerie, id)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSeries = `-- name: ListAnimeSeries :many
SELECT id, original_title, aired, release_year, rating, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_series
WHERE release_year = $1 OR $1 = 0
LIMIT $2
OFFSET $3
`

type ListAnimeSeriesParams struct {
	ReleaseYear int32
	Limit       int32
	Offset      int32
}

func (q *Queries) ListAnimeSeries(ctx context.Context, arg ListAnimeSeriesParams) ([]AnimeSerie, error) {
	rows, err := q.db.Query(ctx, listAnimeSeries, arg.ReleaseYear, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerie{}
	for rows.Next() {
		var i AnimeSerie
		if err := rows.Scan(
			&i.ID,
			&i.OriginalTitle,
			&i.Aired,
			&i.ReleaseYear,
			&i.Rating,
			&i.PortriatPoster,
			&i.PortriatBlurHash,
			&i.LandscapePoster,
			&i.LandscapeBlurHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerie = `-- name: UpdateAnimeSerie :one
UPDATE anime_series
SET
  original_title = COALESCE($1, original_title),
  aired = COALESCE($2, aired),
  release_year = COALESCE($3, release_year),
  rating = COALESCE($4, rating),
  portriat_poster = COALESCE($5, portriat_poster),
  portriat_blur_hash = COALESCE($6, portriat_blur_hash),
  landscape_poster = COALESCE($7, landscape_poster),
  landscape_blur_hash = COALESCE($8, landscape_blur_hash)
WHERE
  id = $9
RETURNING id, original_title, aired, release_year, rating, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type UpdateAnimeSerieParams struct {
	OriginalTitle     pgtype.Text
	Aired             pgtype.Timestamptz
	ReleaseYear       pgtype.Int4
	Rating            pgtype.Text
	PortriatPoster    pgtype.Text
	PortriatBlurHash  pgtype.Text
	LandscapePoster   pgtype.Text
	LandscapeBlurHash pgtype.Text
	ID                int64
}

func (q *Queries) UpdateAnimeSerie(ctx context.Context, arg UpdateAnimeSerieParams) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerie,
		arg.OriginalTitle,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
		arg.ID,
	)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}
