// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerie = `-- name: CreateAnimeSerie :one
INSERT INTO anime_series (
    original_title,
    unique_id,
    first_year,
    last_year,
    mal_id,
    tvdb_id,
    tmdb_id,
    portrait_poster,
    portrait_blur_hash,
    landscape_poster,
    landscape_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, original_title, unique_id, first_year, last_year, mal_id, tvdb_id, tmdb_id, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type CreateAnimeSerieParams struct {
	OriginalTitle     string
	UniqueID          uuid.UUID
	FirstYear         int32
	LastYear          int32
	MalID             int32
	TvdbID            int32
	TmdbID            int32
	PortraitPoster    string
	PortraitBlurHash  string
	LandscapePoster   string
	LandscapeBlurHash string
}

func (q *Queries) CreateAnimeSerie(ctx context.Context, arg CreateAnimeSerieParams) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, createAnimeSerie,
		arg.OriginalTitle,
		arg.UniqueID,
		arg.FirstYear,
		arg.LastYear,
		arg.MalID,
		arg.TvdbID,
		arg.TmdbID,
		arg.PortraitPoster,
		arg.PortraitBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
	)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.UniqueID,
		&i.FirstYear,
		&i.LastYear,
		&i.MalID,
		&i.TvdbID,
		&i.TmdbID,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerie = `-- name: DeleteAnimeSerie :exec
DELETE FROM anime_series 
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerie, id)
	return err
}

const getAnimeSerie = `-- name: GetAnimeSerie :one
SELECT id, original_title, unique_id, first_year, last_year, mal_id, tvdb_id, tmdb_id, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_series 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerie(ctx context.Context, id int64) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, getAnimeSerie, id)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.UniqueID,
		&i.FirstYear,
		&i.LastYear,
		&i.MalID,
		&i.TvdbID,
		&i.TmdbID,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSeries = `-- name: ListAnimeSeries :many
SELECT id, original_title, unique_id, first_year, last_year, mal_id, tvdb_id, tmdb_id, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_series
WHERE $1 IN (first_year, last_year) OR $1 = 0
LIMIT $2
OFFSET $3
`

type ListAnimeSeriesParams struct {
	FirstYear int32
	Limit     int32
	Offset    int32
}

func (q *Queries) ListAnimeSeries(ctx context.Context, arg ListAnimeSeriesParams) ([]AnimeSerie, error) {
	rows, err := q.db.Query(ctx, listAnimeSeries, arg.FirstYear, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerie{}
	for rows.Next() {
		var i AnimeSerie
		if err := rows.Scan(
			&i.ID,
			&i.OriginalTitle,
			&i.UniqueID,
			&i.FirstYear,
			&i.LastYear,
			&i.MalID,
			&i.TvdbID,
			&i.TmdbID,
			&i.PortraitPoster,
			&i.PortraitBlurHash,
			&i.LandscapePoster,
			&i.LandscapeBlurHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerie = `-- name: UpdateAnimeSerie :one
UPDATE anime_series
SET
  original_title = COALESCE($1, original_title),
  first_year = COALESCE($2, first_year),
  last_year = COALESCE($3, last_year),
  mal_id = COALESCE($4, mal_id),
  tvdb_id = COALESCE($5, tvdb_id),
  tmdb_id = COALESCE($6, tmdb_id),
  portrait_poster = COALESCE($7, portrait_poster),
  portrait_blur_hash = COALESCE($8, portrait_blur_hash),
  landscape_poster = COALESCE($9, landscape_poster),
  landscape_blur_hash = COALESCE($10, landscape_blur_hash)
WHERE
  id = $11
RETURNING id, original_title, unique_id, first_year, last_year, mal_id, tvdb_id, tmdb_id, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type UpdateAnimeSerieParams struct {
	OriginalTitle     pgtype.Text
	FirstYear         pgtype.Int4
	LastYear          pgtype.Int4
	MalID             pgtype.Int4
	TvdbID            pgtype.Int4
	TmdbID            pgtype.Int4
	PortraitPoster    pgtype.Text
	PortraitBlurHash  pgtype.Text
	LandscapePoster   pgtype.Text
	LandscapeBlurHash pgtype.Text
	ID                int64
}

func (q *Queries) UpdateAnimeSerie(ctx context.Context, arg UpdateAnimeSerieParams) (AnimeSerie, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerie,
		arg.OriginalTitle,
		arg.FirstYear,
		arg.LastYear,
		arg.MalID,
		arg.TvdbID,
		arg.TmdbID,
		arg.PortraitPoster,
		arg.PortraitBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
		arg.ID,
	)
	var i AnimeSerie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.UniqueID,
		&i.FirstYear,
		&i.LastYear,
		&i.MalID,
		&i.TvdbID,
		&i.TmdbID,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}
