// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_episode_meta.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieEpisodeMeta = `-- name: CreateAnimeSerieEpisodeMeta :one
INSERT INTO anime_serie_episode_metas (episode_id, meta_id)
VALUES ($1, $2)
RETURNING id, episode_id, meta_id, created_at
`

type CreateAnimeSerieEpisodeMetaParams struct {
	EpisodeID int64 `json:"episode_id"`
	MetaID    int64 `json:"meta_id"`
}

func (q *Queries) CreateAnimeSerieEpisodeMeta(ctx context.Context, arg CreateAnimeSerieEpisodeMetaParams) (AnimeSerieEpisodeMeta, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieEpisodeMeta, arg.EpisodeID, arg.MetaID)
	var i AnimeSerieEpisodeMeta
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieEpisodeMeta = `-- name: DeleteAnimeSerieEpisodeMeta :exec
DELETE FROM anime_serie_episode_metas
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieEpisodeMeta(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieEpisodeMeta, id)
	return err
}

const getAnimeSerieEpisodeMeta = `-- name: GetAnimeSerieEpisodeMeta :one
SELECT id, episode_id, meta_id, created_at FROM anime_serie_episode_metas
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieEpisodeMeta(ctx context.Context, id int64) (AnimeSerieEpisodeMeta, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieEpisodeMeta, id)
	var i AnimeSerieEpisodeMeta
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieEpisodeMetasByEpisode = `-- name: ListAnimeSerieEpisodeMetasByEpisode :many
SELECT id, episode_id, meta_id, created_at FROM anime_serie_episode_metas
WHERE episode_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeSerieEpisodeMetasByEpisodeParams struct {
	EpisodeID int64 `json:"episode_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListAnimeSerieEpisodeMetasByEpisode(ctx context.Context, arg ListAnimeSerieEpisodeMetasByEpisodeParams) ([]AnimeSerieEpisodeMeta, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieEpisodeMetasByEpisode, arg.EpisodeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieEpisodeMeta{}
	for rows.Next() {
		var i AnimeSerieEpisodeMeta
		if err := rows.Scan(
			&i.ID,
			&i.EpisodeID,
			&i.MetaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieEpisodeMeta = `-- name: UpdateAnimeSerieEpisodeMeta :one
UPDATE anime_serie_episode_metas
SET
  meta_id = COALESCE($1, meta_id),
  episode_id = COALESCE($2, episode_id)
WHERE
  id = $3
RETURNING id, episode_id, meta_id, created_at
`

type UpdateAnimeSerieEpisodeMetaParams struct {
	MetaID    pgtype.Int8 `json:"meta_id"`
	EpisodeID pgtype.Int8 `json:"episode_id"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateAnimeSerieEpisodeMeta(ctx context.Context, arg UpdateAnimeSerieEpisodeMetaParams) (AnimeSerieEpisodeMeta, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieEpisodeMeta, arg.MetaID, arg.EpisodeID, arg.ID)
	var i AnimeSerieEpisodeMeta
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}
