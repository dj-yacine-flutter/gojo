// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_episode.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeEpisode = `-- name: CreateAnimeEpisode :one
INSERT INTO anime_episodes (
  season_id,
  episode_number,
  episode_original_title,
  aired,
  rating,
  duration,
  thumbnails,
  thumbnails_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, season_id, episode_number, episode_original_title, aired, rating, duration, thumbnails, thumbnails_blur_hash, created_at
`

type CreateAnimeEpisodeParams struct {
	SeasonID             int64
	EpisodeNumber        int32
	EpisodeOriginalTitle string
	Aired                time.Time
	Rating               string
	Duration             time.Duration
	Thumbnails           string
	ThumbnailsBlurHash   string
}

func (q *Queries) CreateAnimeEpisode(ctx context.Context, arg CreateAnimeEpisodeParams) (AnimeEpisode, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisode,
		arg.SeasonID,
		arg.EpisodeNumber,
		arg.EpisodeOriginalTitle,
		arg.Aired,
		arg.Rating,
		arg.Duration,
		arg.Thumbnails,
		arg.ThumbnailsBlurHash,
	)
	var i AnimeEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.EpisodeOriginalTitle,
		&i.Aired,
		&i.Rating,
		&i.Duration,
		&i.Thumbnails,
		&i.ThumbnailsBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeEpisode = `-- name: DeleteAnimeEpisode :exec
DELETE FROM anime_episodes
WHERE id = $1
`

func (q *Queries) DeleteAnimeEpisode(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisode, id)
	return err
}

const getAnimeEpisode = `-- name: GetAnimeEpisode :one
SELECT id, season_id, episode_number, episode_original_title, aired, rating, duration, thumbnails, thumbnails_blur_hash, created_at FROM anime_episodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisode(ctx context.Context, id int64) (AnimeEpisode, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisode, id)
	var i AnimeEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.EpisodeOriginalTitle,
		&i.Aired,
		&i.Rating,
		&i.Duration,
		&i.Thumbnails,
		&i.ThumbnailsBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const updateAnimeEpisode = `-- name: UpdateAnimeEpisode :one
UPDATE anime_episodes
SET
  episode_number = COALESCE($1, episode_number),
  episode_original_title = COALESCE($2, episode_original_title),
  aired = COALESCE($3, aired),
  rating = COALESCE($4, rating),
  duration = COALESCE($5, duration),
  thumbnails = COALESCE($6, thumbnails),
  thumbnails_blur_hash = COALESCE($7, thumbnails_blur_hash)
WHERE
  id = $8
RETURNING id, season_id, episode_number, episode_original_title, aired, rating, duration, thumbnails, thumbnails_blur_hash, created_at
`

type UpdateAnimeEpisodeParams struct {
	EpisodeNumber        pgtype.Int4
	EpisodeOriginalTitle pgtype.Text
	Aired                pgtype.Timestamptz
	Rating               pgtype.Text
	Duration             pgtype.Interval
	Thumbnails           pgtype.Text
	ThumbnailsBlurHash   pgtype.Text
	ID                   int64
}

func (q *Queries) UpdateAnimeEpisode(ctx context.Context, arg UpdateAnimeEpisodeParams) (AnimeEpisode, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisode,
		arg.EpisodeNumber,
		arg.EpisodeOriginalTitle,
		arg.Aired,
		arg.Rating,
		arg.Duration,
		arg.Thumbnails,
		arg.ThumbnailsBlurHash,
		arg.ID,
	)
	var i AnimeEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeNumber,
		&i.EpisodeOriginalTitle,
		&i.Aired,
		&i.Rating,
		&i.Duration,
		&i.Thumbnails,
		&i.ThumbnailsBlurHash,
		&i.CreatedAt,
	)
	return i, err
}
