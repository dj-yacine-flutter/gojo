// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_server_sub_video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieServerSubVideo = `-- name: CreateAnimeSerieServerSubVideo :one
INSERT INTO anime_serie_server_sub_videos (server_id, video_id)
VALUES ($1, $2)
RETURNING id, server_id, video_id, created_at
`

type CreateAnimeSerieServerSubVideoParams struct {
	ServerID int64
	VideoID  int64
}

func (q *Queries) CreateAnimeSerieServerSubVideo(ctx context.Context, arg CreateAnimeSerieServerSubVideoParams) (AnimeSerieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieServerSubVideo, arg.ServerID, arg.VideoID)
	var i AnimeSerieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieServerSubVideo = `-- name: DeleteAnimeSerieServerSubVideo :exec
DELETE FROM anime_serie_server_sub_videos
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieServerSubVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieServerSubVideo, id)
	return err
}

const getAnimeSerieServerSubVideo = `-- name: GetAnimeSerieServerSubVideo :one
SELECT id, server_id, video_id, created_at FROM anime_serie_server_sub_videos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieServerSubVideo(ctx context.Context, id int64) (AnimeSerieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieServerSubVideo, id)
	var i AnimeSerieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieServerSubVideos = `-- name: ListAnimeSerieServerSubVideos :many
SELECT id, server_id, video_id, created_at FROM anime_serie_server_sub_videos
WHERE server_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSerieServerSubVideos(ctx context.Context, serverID int64) ([]AnimeSerieServerSubVideo, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieServerSubVideos, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieServerSubVideo{}
	for rows.Next() {
		var i AnimeSerieServerSubVideo
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.VideoID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieServerSubVideo = `-- name: UpdateAnimeSerieServerSubVideo :one
UPDATE anime_serie_server_sub_videos
SET 
  server_id = COALESCE($1, server_id),
  video_id = COALESCE($2, video_id)
WHERE
  id = $3
RETURNING id, server_id, video_id, created_at
`

type UpdateAnimeSerieServerSubVideoParams struct {
	ServerID pgtype.Int8
	VideoID  pgtype.Int8
	ID       int64
}

func (q *Queries) UpdateAnimeSerieServerSubVideo(ctx context.Context, arg UpdateAnimeSerieServerSubVideoParams) (AnimeSerieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieServerSubVideo, arg.ServerID, arg.VideoID, arg.ID)
	var i AnimeSerieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}
