// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_server_sub_video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovieServerSubVideo = `-- name: CreateAnimeMovieServerSubVideo :one
INSERT INTO anime_movie_server_sub_videos (server_id, video_id)
VALUES ($1, $2)
RETURNING id, server_id, video_id, created_at
`

type CreateAnimeMovieServerSubVideoParams struct {
	ServerID int64 `json:"server_id"`
	VideoID  int64 `json:"video_id"`
}

func (q *Queries) CreateAnimeMovieServerSubVideo(ctx context.Context, arg CreateAnimeMovieServerSubVideoParams) (AnimeMovieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieServerSubVideo, arg.ServerID, arg.VideoID)
	var i AnimeMovieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieServerSubVideo = `-- name: DeleteAnimeMovieServerSubVideo :exec
DELETE FROM anime_movie_server_sub_videos
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovieServerSubVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieServerSubVideo, id)
	return err
}

const getAnimeMovieServerSubVideo = `-- name: GetAnimeMovieServerSubVideo :one
SELECT id, server_id, video_id, created_at FROM anime_movie_server_sub_videos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieServerSubVideo(ctx context.Context, id int64) (AnimeMovieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieServerSubVideo, id)
	var i AnimeMovieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieServerSubVideos = `-- name: ListAnimeMovieServerSubVideos :many
SELECT id, server_id, video_id, created_at FROM anime_movie_server_sub_videos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeMovieServerSubVideosParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAnimeMovieServerSubVideos(ctx context.Context, arg ListAnimeMovieServerSubVideosParams) ([]AnimeMovieServerSubVideo, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieServerSubVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovieServerSubVideo{}
	for rows.Next() {
		var i AnimeMovieServerSubVideo
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.VideoID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovieServerSubVideo = `-- name: UpdateAnimeMovieServerSubVideo :one
UPDATE anime_movie_server_sub_videos
SET 
  server_id = COALESCE($1, server_id),
  video_id = COALESCE($2, video_id)
WHERE
  id = $3
RETURNING id, server_id, video_id, created_at
`

type UpdateAnimeMovieServerSubVideoParams struct {
	ServerID pgtype.Int8 `json:"server_id"`
	VideoID  pgtype.Int8 `json:"video_id"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateAnimeMovieServerSubVideo(ctx context.Context, arg UpdateAnimeMovieServerSubVideoParams) (AnimeMovieServerSubVideo, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovieServerSubVideo, arg.ServerID, arg.VideoID, arg.ID)
	var i AnimeMovieServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}
