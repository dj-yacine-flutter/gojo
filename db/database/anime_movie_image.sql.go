// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_image.sql

package db

import (
	"context"
)

const createAnimeMovieImage = `-- name: CreateAnimeMovieImage :one
INSERT INTO anime_movie_images (anime_id, image_id)
VALUES ($1, $2)
RETURNING id, anime_id, image_id, created_at
`

type CreateAnimeMovieImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) CreateAnimeMovieImage(ctx context.Context, arg CreateAnimeMovieImageParams) (AnimeMovieImage, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieImage, arg.AnimeID, arg.ImageID)
	var i AnimeMovieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieImage = `-- name: DeleteAnimeMovieImage :exec
DELETE FROM anime_movie_images
WHERE anime_id = $1 AND image_id = $2
`

type DeleteAnimeMovieImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) DeleteAnimeMovieImage(ctx context.Context, arg DeleteAnimeMovieImageParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieImage, arg.AnimeID, arg.ImageID)
	return err
}

const getAnimeMovieImage = `-- name: GetAnimeMovieImage :one
SELECT id, anime_id, image_id, created_at FROM anime_movie_images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovieImage(ctx context.Context, id int64) (AnimeMovieImage, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieImage, id)
	var i AnimeMovieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeMovieImageByAnimeID = `-- name: GetAnimeMovieImageByAnimeID :one
SELECT id, anime_id, image_id, created_at FROM anime_movie_images
WHERE anime_id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovieImageByAnimeID(ctx context.Context, animeID int64) (AnimeMovieImage, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieImageByAnimeID, animeID)
	var i AnimeMovieImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieImages = `-- name: ListAnimeMovieImages :many
SELECT image_id
FROM anime_movie_images
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeMovieImagesParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeMovieImages(ctx context.Context, arg ListAnimeMovieImagesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieImages, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var image_id int64
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
