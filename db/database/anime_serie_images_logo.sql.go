// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_images_logo.sql

package db

import (
	"context"
)

const createAnimeSerieLogoImage = `-- name: CreateAnimeSerieLogoImage :one
INSERT INTO anime_serie_logo_images (anime_id, image_id)
VALUES ($1, $2)
RETURNING id, anime_id, image_id, created_at
`

type CreateAnimeSerieLogoImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) CreateAnimeSerieLogoImage(ctx context.Context, arg CreateAnimeSerieLogoImageParams) (AnimeSerieLogoImage, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieLogoImage, arg.AnimeID, arg.ImageID)
	var i AnimeSerieLogoImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieLogoImage = `-- name: DeleteAnimeSerieLogoImage :exec
DELETE FROM anime_serie_logo_images
WHERE anime_id = $1 AND image_id = $2
`

type DeleteAnimeSerieLogoImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) DeleteAnimeSerieLogoImage(ctx context.Context, arg DeleteAnimeSerieLogoImageParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieLogoImage, arg.AnimeID, arg.ImageID)
	return err
}

const listAnimeSerieLogoImages = `-- name: ListAnimeSerieLogoImages :many
SELECT image_id
FROM anime_serie_logo_images
WHERE anime_id = $1
`

func (q *Queries) ListAnimeSerieLogoImages(ctx context.Context, animeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieLogoImages, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var image_id int64
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
