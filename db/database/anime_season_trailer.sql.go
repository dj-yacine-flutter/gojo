// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_season_trailer.sql

package db

import (
	"context"
)

const createAnimeSeasonTrailer = `-- name: CreateAnimeSeasonTrailer :one
INSERT INTO anime_season_trailers (season_id, trailer_id)
VALUES ($1, $2)
RETURNING id, season_id, trailer_id, created_at
`

type CreateAnimeSeasonTrailerParams struct {
	SeasonID  int64
	TrailerID int64
}

func (q *Queries) CreateAnimeSeasonTrailer(ctx context.Context, arg CreateAnimeSeasonTrailerParams) (AnimeSeasonTrailer, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonTrailer, arg.SeasonID, arg.TrailerID)
	var i AnimeSeasonTrailer
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.TrailerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeasonTrailer = `-- name: DeleteAnimeSeasonTrailer :exec
DELETE FROM anime_season_trailers
WHERE season_id = $1 AND trailer_id = $2
`

type DeleteAnimeSeasonTrailerParams struct {
	SeasonID  int64
	TrailerID int64
}

func (q *Queries) DeleteAnimeSeasonTrailer(ctx context.Context, arg DeleteAnimeSeasonTrailerParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonTrailer, arg.SeasonID, arg.TrailerID)
	return err
}

const listAnimeSeasonTrailers = `-- name: ListAnimeSeasonTrailers :many
SELECT id, season_id, trailer_id, created_at FROM anime_season_trailers
WHERE season_id = $1
`

func (q *Queries) ListAnimeSeasonTrailers(ctx context.Context, seasonID int64) ([]AnimeSeasonTrailer, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonTrailers, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSeasonTrailer{}
	for rows.Next() {
		var i AnimeSeasonTrailer
		if err := rows.Scan(
			&i.ID,
			&i.SeasonID,
			&i.TrailerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
