// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_episode_torrent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeEpisodeTorrent = `-- name: CreateAnimeEpisodeTorrent :one
INSERT INTO anime_episode_torrents (language_id, file_name, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at
`

type CreateAnimeEpisodeTorrentParams struct {
	LanguageID  int32
	FileName    string
	TorrentHash string
	TorrentFile string
	Seeds       int32
	Peers       int32
	Leechers    int32
	SizeBytes   int64
	Quality     string
}

func (q *Queries) CreateAnimeEpisodeTorrent(ctx context.Context, arg CreateAnimeEpisodeTorrentParams) (AnimeEpisodeTorrent, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisodeTorrent,
		arg.LanguageID,
		arg.FileName,
		arg.TorrentHash,
		arg.TorrentFile,
		arg.Seeds,
		arg.Peers,
		arg.Leechers,
		arg.SizeBytes,
		arg.Quality,
	)
	var i AnimeEpisodeTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeEpisodeTorrent = `-- name: DeleteAnimeEpisodeTorrent :exec
DELETE FROM anime_episode_torrents
WHERE id = $1
`

func (q *Queries) DeleteAnimeEpisodeTorrent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisodeTorrent, id)
	return err
}

const getAnimeEpisodeTorrent = `-- name: GetAnimeEpisodeTorrent :one
SELECT id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at FROM anime_episode_torrents
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisodeTorrent(ctx context.Context, id int64) (AnimeEpisodeTorrent, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeTorrent, id)
	var i AnimeEpisodeTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeEpisodeTorrents = `-- name: ListAnimeEpisodeTorrents :many
SELECT id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at FROM anime_episode_torrents
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeEpisodeTorrentsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeEpisodeTorrents(ctx context.Context, arg ListAnimeEpisodeTorrentsParams) ([]AnimeEpisodeTorrent, error) {
	rows, err := q.db.Query(ctx, listAnimeEpisodeTorrents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeEpisodeTorrent{}
	for rows.Next() {
		var i AnimeEpisodeTorrent
		if err := rows.Scan(
			&i.ID,
			&i.FileName,
			&i.LanguageID,
			&i.TorrentHash,
			&i.TorrentFile,
			&i.Seeds,
			&i.Peers,
			&i.Leechers,
			&i.SizeBytes,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeEpisodeTorrent = `-- name: UpdateAnimeEpisodeTorrent :one
UPDATE anime_episode_torrents
SET
    language_id = COALESCE($2, language_id),
    file_name = COALESCE($3, file_name),
    torrent_hash = COALESCE($4, torrent_hash),
    torrent_file = COALESCE($5, torrent_file),
    seeds = COALESCE($6, seeds),
    peers = COALESCE($7, peers),
    leechers = COALESCE($8, leechers),
    size_bytes = COALESCE($9, size_bytes),
    quality = COALESCE($10, quality)
WHERE id = $1
RETURNING id, file_name, language_id, torrent_hash, torrent_file, seeds, peers, leechers, size_bytes, quality, created_at
`

type UpdateAnimeEpisodeTorrentParams struct {
	ID          int64
	LanguageID  pgtype.Int4
	FileName    pgtype.Text
	TorrentHash pgtype.Text
	TorrentFile pgtype.Text
	Seeds       pgtype.Int4
	Peers       pgtype.Int4
	Leechers    pgtype.Int4
	SizeBytes   pgtype.Int8
	Quality     pgtype.Text
}

func (q *Queries) UpdateAnimeEpisodeTorrent(ctx context.Context, arg UpdateAnimeEpisodeTorrentParams) (AnimeEpisodeTorrent, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisodeTorrent,
		arg.ID,
		arg.LanguageID,
		arg.FileName,
		arg.TorrentHash,
		arg.TorrentFile,
		arg.Seeds,
		arg.Peers,
		arg.Leechers,
		arg.SizeBytes,
		arg.Quality,
	)
	var i AnimeEpisodeTorrent
	err := row.Scan(
		&i.ID,
		&i.FileName,
		&i.LanguageID,
		&i.TorrentHash,
		&i.TorrentFile,
		&i.Seeds,
		&i.Peers,
		&i.Leechers,
		&i.SizeBytes,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}
