// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_season_resource.sql

package db

import (
	"context"
)

const createAnimeSeasonResource = `-- name: CreateAnimeSeasonResource :one
INSERT INTO anime_season_resources (season_id, resource_id)
VALUES ($1, $2)
RETURNING id, season_id, resource_id
`

type CreateAnimeSeasonResourceParams struct {
	SeasonID   int64
	ResourceID int64
}

func (q *Queries) CreateAnimeSeasonResource(ctx context.Context, arg CreateAnimeSeasonResourceParams) (AnimeSeasonResource, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonResource, arg.SeasonID, arg.ResourceID)
	var i AnimeSeasonResource
	err := row.Scan(&i.ID, &i.SeasonID, &i.ResourceID)
	return i, err
}

const deleteAnimeSeasonResource = `-- name: DeleteAnimeSeasonResource :exec
DELETE FROM anime_season_resources
WHERE season_id = $1 AND resource_id = $2
`

type DeleteAnimeSeasonResourceParams struct {
	SeasonID   int64
	ResourceID int64
}

func (q *Queries) DeleteAnimeSeasonResource(ctx context.Context, arg DeleteAnimeSeasonResourceParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonResource, arg.SeasonID, arg.ResourceID)
	return err
}

const getAnimeSeasonResource = `-- name: GetAnimeSeasonResource :one
SELECT id, season_id, resource_id FROM anime_season_resources
WHERE id = $1
`

func (q *Queries) GetAnimeSeasonResource(ctx context.Context, id int64) (AnimeSeasonResource, error) {
	row := q.db.QueryRow(ctx, getAnimeSeasonResource, id)
	var i AnimeSeasonResource
	err := row.Scan(&i.ID, &i.SeasonID, &i.ResourceID)
	return i, err
}

const listAnimeSeasonResourcesByAnimeID = `-- name: ListAnimeSeasonResourcesByAnimeID :many
SELECT resource_id
FROM anime_season_resources
WHERE season_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSeasonResourcesByAnimeID(ctx context.Context, seasonID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonResourcesByAnimeID, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var resource_id int64
		if err := rows.Scan(&resource_id); err != nil {
			return nil, err
		}
		items = append(items, resource_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
