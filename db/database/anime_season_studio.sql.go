// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_season_studio.sql

package db

import (
	"context"
)

const createAnimeSeasonStudio = `-- name: CreateAnimeSeasonStudio :one
INSERT INTO anime_season_studios (season_id, studio_id)
VALUES ($1, $2)
RETURNING id, season_id, studio_id
`

type CreateAnimeSeasonStudioParams struct {
	SeasonID int64
	StudioID int32
}

func (q *Queries) CreateAnimeSeasonStudio(ctx context.Context, arg CreateAnimeSeasonStudioParams) (AnimeSeasonStudio, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonStudio, arg.SeasonID, arg.StudioID)
	var i AnimeSeasonStudio
	err := row.Scan(&i.ID, &i.SeasonID, &i.StudioID)
	return i, err
}

const deleteAnimeSeasonStudio = `-- name: DeleteAnimeSeasonStudio :exec
DELETE FROM anime_season_studios
WHERE season_id = $1 AND studio_id = $2
`

type DeleteAnimeSeasonStudioParams struct {
	SeasonID int64
	StudioID int32
}

func (q *Queries) DeleteAnimeSeasonStudio(ctx context.Context, arg DeleteAnimeSeasonStudioParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonStudio, arg.SeasonID, arg.StudioID)
	return err
}

const getAnimeSeasonStudio = `-- name: GetAnimeSeasonStudio :one
SELECT id, season_id, studio_id FROM anime_season_studios
WHERE season_id = $1 AND studio_id = $2
`

type GetAnimeSeasonStudioParams struct {
	SeasonID int64
	StudioID int32
}

func (q *Queries) GetAnimeSeasonStudio(ctx context.Context, arg GetAnimeSeasonStudioParams) (AnimeSeasonStudio, error) {
	row := q.db.QueryRow(ctx, getAnimeSeasonStudio, arg.SeasonID, arg.StudioID)
	var i AnimeSeasonStudio
	err := row.Scan(&i.ID, &i.SeasonID, &i.StudioID)
	return i, err
}

const listAnimeSeasonStudios = `-- name: ListAnimeSeasonStudios :many
SELECT studio_id
FROM anime_season_studios
WHERE season_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSeasonStudios(ctx context.Context, seasonID int64) ([]int32, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonStudios, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int32{}
	for rows.Next() {
		var studio_id int32
		if err := rows.Scan(&studio_id); err != nil {
			return nil, err
		}
		items = append(items, studio_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
