// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: device.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createDevice = `-- name: CreateDevice :one
INSERT INTO devices (
    operating_system,
    mac_address,
    client_ip,
    user_agent,
    is_banned
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, operating_system, mac_address, client_ip, user_agent, is_banned, created_at
`

type CreateDeviceParams struct {
	OperatingSystem string
	MacAddress      string
	ClientIp        string
	UserAgent       string
	IsBanned        bool
}

func (q *Queries) CreateDevice(ctx context.Context, arg CreateDeviceParams) (Device, error) {
	row := q.db.QueryRow(ctx, createDevice,
		arg.OperatingSystem,
		arg.MacAddress,
		arg.ClientIp,
		arg.UserAgent,
		arg.IsBanned,
	)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.OperatingSystem,
		&i.MacAddress,
		&i.ClientIp,
		&i.UserAgent,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices
WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDevice, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, operating_system, mac_address, client_ip, user_agent, is_banned, created_at FROM devices
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetDevice(ctx context.Context, id uuid.UUID) (Device, error) {
	row := q.db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.OperatingSystem,
		&i.MacAddress,
		&i.ClientIp,
		&i.UserAgent,
		&i.IsBanned,
		&i.CreatedAt,
	)
	return i, err
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices
SET is_banned = COALESCE($2, is_banned)
WHERE id = $1
`

type UpdateDeviceParams struct {
	ID       uuid.UUID
	IsBanned pgtype.Bool
}

func (q *Queries) UpdateDevice(ctx context.Context, arg UpdateDeviceParams) error {
	_, err := q.db.Exec(ctx, updateDevice, arg.ID, arg.IsBanned)
	return err
}
