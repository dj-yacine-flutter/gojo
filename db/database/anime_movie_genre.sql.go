// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_genre.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovieGenre = `-- name: CreateAnimeMovieGenre :one
INSERT INTO anime_movie_genres (anime_id, genre_id)
VALUES ($1, $2)
RETURNING id, anime_id, genre_id
`

type CreateAnimeMovieGenreParams struct {
	AnimeID int64       `json:"anime_id"`
	GenreID pgtype.Int4 `json:"genre_id"`
}

func (q *Queries) CreateAnimeMovieGenre(ctx context.Context, arg CreateAnimeMovieGenreParams) (AnimeMovieGenre, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieGenre, arg.AnimeID, arg.GenreID)
	var i AnimeMovieGenre
	err := row.Scan(&i.ID, &i.AnimeID, &i.GenreID)
	return i, err
}

const deleteAnimeMovieGenre = `-- name: DeleteAnimeMovieGenre :exec
DELETE FROM anime_movie_genres
WHERE anime_id = $1 AND genre_id = $2
`

type DeleteAnimeMovieGenreParams struct {
	AnimeID int64       `json:"anime_id"`
	GenreID pgtype.Int4 `json:"genre_id"`
}

func (q *Queries) DeleteAnimeMovieGenre(ctx context.Context, arg DeleteAnimeMovieGenreParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieGenre, arg.AnimeID, arg.GenreID)
	return err
}

const getAnimeMovieGenre = `-- name: GetAnimeMovieGenre :one
SELECT id, anime_id, genre_id FROM anime_movie_genres
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovieGenre(ctx context.Context, id int64) (AnimeMovieGenre, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieGenre, id)
	var i AnimeMovieGenre
	err := row.Scan(&i.ID, &i.AnimeID, &i.GenreID)
	return i, err
}

const listAnimeMovieGenres = `-- name: ListAnimeMovieGenres :many
SELECT genre_id
FROM anime_movie_genres
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeMovieGenresParams struct {
	AnimeID int64 `json:"anime_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAnimeMovieGenres(ctx context.Context, arg ListAnimeMovieGenresParams) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieGenres, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Int4{}
	for rows.Next() {
		var genre_id pgtype.Int4
		if err := rows.Scan(&genre_id); err != nil {
			return nil, err
		}
		items = append(items, genre_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
