// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: actor.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createActor = `-- name: CreateActor :one
INSERT INTO actors (full_name, gender, biography, born, image_url, image_blur_hash)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (full_name, born)
DO UPDATE SET gender = excluded.gender
RETURNING  id, full_name, gender, biography, image_url, image_blur_hash, born, created_at
`

type CreateActorParams struct {
	FullName      string
	Gender        string
	Biography     string
	Born          time.Time
	ImageUrl      string
	ImageBlurHash string
}

func (q *Queries) CreateActor(ctx context.Context, arg CreateActorParams) (Actor, error) {
	row := q.db.QueryRow(ctx, createActor,
		arg.FullName,
		arg.Gender,
		arg.Biography,
		arg.Born,
		arg.ImageUrl,
		arg.ImageBlurHash,
	)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Gender,
		&i.Biography,
		&i.ImageUrl,
		&i.ImageBlurHash,
		&i.Born,
		&i.CreatedAt,
	)
	return i, err
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM actors
WHERE id = $1
`

func (q *Queries) DeleteActor(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteActor, id)
	return err
}

const getActor = `-- name: GetActor :one
SELECT id, full_name, gender, biography, image_url, image_blur_hash, born, created_at FROM actors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActor(ctx context.Context, id int64) (Actor, error) {
	row := q.db.QueryRow(ctx, getActor, id)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Gender,
		&i.Biography,
		&i.ImageUrl,
		&i.ImageBlurHash,
		&i.Born,
		&i.CreatedAt,
	)
	return i, err
}

const listActors = `-- name: ListActors :many
SELECT id FROM actors
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListActorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListActors(ctx context.Context, arg ListActorsParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listActors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :one
UPDATE actors
SET 
  full_name = COALESCE($2, full_name),
  gender = COALESCE($3, gender),
  biography = COALESCE($4, biography),
  born = COALESCE($5, born),
  image_url = COALESCE($6, image_url),
  image_blur_hash = COALESCE($7, image_blur_hash)
WHERE id = $1
RETURNING id, full_name, gender, biography, image_url, image_blur_hash, born, created_at
`

type UpdateActorParams struct {
	ID            int64
	FullName      pgtype.Text
	Gender        pgtype.Text
	Biography     pgtype.Text
	Born          pgtype.Timestamptz
	ImageUrl      pgtype.Text
	ImageBlurHash pgtype.Text
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) (Actor, error) {
	row := q.db.QueryRow(ctx, updateActor,
		arg.ID,
		arg.FullName,
		arg.Gender,
		arg.Biography,
		arg.Born,
		arg.ImageUrl,
		arg.ImageBlurHash,
	)
	var i Actor
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Gender,
		&i.Biography,
		&i.ImageUrl,
		&i.ImageBlurHash,
		&i.Born,
		&i.CreatedAt,
	)
	return i, err
}
