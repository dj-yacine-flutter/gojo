// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_season_character.sql

package db

import (
	"context"
)

const createAnimeSeasonCharacter = `-- name: CreateAnimeSeasonCharacter :one
INSERT INTO anime_season_characters (season_id, character_id)
VALUES ($1, $2)
RETURNING id, season_id, character_id, created_at
`

type CreateAnimeSeasonCharacterParams struct {
	SeasonID    int64
	CharacterID int64
}

func (q *Queries) CreateAnimeSeasonCharacter(ctx context.Context, arg CreateAnimeSeasonCharacterParams) (AnimeSeasonCharacter, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonCharacter, arg.SeasonID, arg.CharacterID)
	var i AnimeSeasonCharacter
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeasonCharacter = `-- name: DeleteAnimeSeasonCharacter :exec
DELETE FROM anime_season_characters
WHERE season_id = $1 AND character_id = $2
`

type DeleteAnimeSeasonCharacterParams struct {
	SeasonID    int64
	CharacterID int64
}

func (q *Queries) DeleteAnimeSeasonCharacter(ctx context.Context, arg DeleteAnimeSeasonCharacterParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonCharacter, arg.SeasonID, arg.CharacterID)
	return err
}

const getAnimeSeasonCharacter = `-- name: GetAnimeSeasonCharacter :one
SELECT id, season_id, character_id, created_at FROM anime_season_characters
WHERE season_id = $1 AND character_id = $2
`

type GetAnimeSeasonCharacterParams struct {
	SeasonID    int64
	CharacterID int64
}

func (q *Queries) GetAnimeSeasonCharacter(ctx context.Context, arg GetAnimeSeasonCharacterParams) (AnimeSeasonCharacter, error) {
	row := q.db.QueryRow(ctx, getAnimeSeasonCharacter, arg.SeasonID, arg.CharacterID)
	var i AnimeSeasonCharacter
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSeasonCharacters = `-- name: ListAnimeSeasonCharacters :many
SELECT character_id
FROM anime_season_characters
WHERE season_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSeasonCharacters(ctx context.Context, seasonID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonCharacters, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var character_id int64
		if err := rows.Scan(&character_id); err != nil {
			return nil, err
		}
		items = append(items, character_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
