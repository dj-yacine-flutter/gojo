// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_server.sql

package db

import (
	"context"
)

const createAnimeSerieServer = `-- name: CreateAnimeSerieServer :one
INSERT INTO anime_serie_servers (episode_id)
VALUES ($1)
RETURNING id, episode_id, created_at
`

func (q *Queries) CreateAnimeSerieServer(ctx context.Context, episodeID int64) (AnimeSerieServer, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieServer, episodeID)
	var i AnimeSerieServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}

const deleteAnimeSerieServer = `-- name: DeleteAnimeSerieServer :exec
DELETE FROM anime_serie_servers
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieServer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieServer, id)
	return err
}

const getAnimeSerieServer = `-- name: GetAnimeSerieServer :one
SELECT id, episode_id, created_at FROM anime_serie_servers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieServer(ctx context.Context, id int64) (AnimeSerieServer, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieServer, id)
	var i AnimeSerieServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}

const listAnimeSerieServers = `-- name: ListAnimeSerieServers :many
SELECT id, episode_id, created_at FROM anime_serie_servers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeSerieServersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeSerieServers(ctx context.Context, arg ListAnimeSerieServersParams) ([]AnimeSerieServer, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieServers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieServer{}
	for rows.Next() {
		var i AnimeSerieServer
		if err := rows.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieServer = `-- name: UpdateAnimeSerieServer :one
UPDATE anime_serie_servers
SET episode_id = $2
WHERE id = $1
RETURNING id, episode_id, created_at
`

type UpdateAnimeSerieServerParams struct {
	ID        int64
	EpisodeID int64
}

func (q *Queries) UpdateAnimeSerieServer(ctx context.Context, arg UpdateAnimeSerieServerParams) (AnimeSerieServer, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieServer, arg.ID, arg.EpisodeID)
	var i AnimeSerieServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}
