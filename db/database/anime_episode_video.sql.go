// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_episode_video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeEpisodeVideo = `-- name: CreateAnimeEpisodeVideo :one
INSERT INTO anime_episode_videos (language_id, authority, referer, link, quality)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, language_id, authority, referer, link, quality, created_at
`

type CreateAnimeEpisodeVideoParams struct {
	LanguageID int32
	Authority  string
	Referer    string
	Link       string
	Quality    string
}

func (q *Queries) CreateAnimeEpisodeVideo(ctx context.Context, arg CreateAnimeEpisodeVideoParams) (AnimeEpisodeVideo, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisodeVideo,
		arg.LanguageID,
		arg.Authority,
		arg.Referer,
		arg.Link,
		arg.Quality,
	)
	var i AnimeEpisodeVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Authority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeEpisodeVideo = `-- name: DeleteAnimeEpisodeVideo :exec
DELETE FROM anime_episode_videos
WHERE id = $1
`

func (q *Queries) DeleteAnimeEpisodeVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisodeVideo, id)
	return err
}

const getAnimeEpisodeVideo = `-- name: GetAnimeEpisodeVideo :one
SELECT id, language_id, authority, referer, link, quality, created_at FROM anime_episode_videos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisodeVideo(ctx context.Context, id int64) (AnimeEpisodeVideo, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeVideo, id)
	var i AnimeEpisodeVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Authority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeEpisodeVideos = `-- name: ListAnimeEpisodeVideos :many
SELECT id, language_id, authority, referer, link, quality, created_at FROM anime_episode_videos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeEpisodeVideosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeEpisodeVideos(ctx context.Context, arg ListAnimeEpisodeVideosParams) ([]AnimeEpisodeVideo, error) {
	rows, err := q.db.Query(ctx, listAnimeEpisodeVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeEpisodeVideo{}
	for rows.Next() {
		var i AnimeEpisodeVideo
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.Authority,
			&i.Referer,
			&i.Link,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeEpisodeVideo = `-- name: UpdateAnimeEpisodeVideo :one
UPDATE anime_episode_videos
SET
    language_id = COALESCE($2, language_id),
    authority = COALESCE($3, authority),
    referer = COALESCE($4, referer),
    link = COALESCE($5, link),
    quality = COALESCE($6, quality)
WHERE id = $1
RETURNING id, language_id, authority, referer, link, quality, created_at
`

type UpdateAnimeEpisodeVideoParams struct {
	ID         int64
	LanguageID pgtype.Int4
	Authority  pgtype.Text
	Referer    pgtype.Text
	Link       pgtype.Text
	Quality    pgtype.Text
}

func (q *Queries) UpdateAnimeEpisodeVideo(ctx context.Context, arg UpdateAnimeEpisodeVideoParams) (AnimeEpisodeVideo, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisodeVideo,
		arg.ID,
		arg.LanguageID,
		arg.Authority,
		arg.Referer,
		arg.Link,
		arg.Quality,
	)
	var i AnimeEpisodeVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Authority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}
