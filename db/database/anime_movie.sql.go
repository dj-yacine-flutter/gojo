// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovie = `-- name: CreateAnimeMovie :one
INSERT INTO anime_movies (
    original_title,
    aired,
    release_year,
    rating,
    duration,
    portrait_poster,
    portrait_blur_hash,
    landscape_poster,
    landscape_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, original_title, aired, release_year, rating, duration, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type CreateAnimeMovieParams struct {
	OriginalTitle     string
	Aired             time.Time
	ReleaseYear       int32
	Rating            string
	Duration          time.Duration
	PortraitPoster    string
	PortraitBlurHash  string
	LandscapePoster   string
	LandscapeBlurHash string
}

func (q *Queries) CreateAnimeMovie(ctx context.Context, arg CreateAnimeMovieParams) (AnimeMovie, error) {
	row := q.db.QueryRow(ctx, createAnimeMovie,
		arg.OriginalTitle,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.Duration,
		arg.PortraitPoster,
		arg.PortraitBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
	)
	var i AnimeMovie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.Duration,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovie = `-- name: DeleteAnimeMovie :exec
DELETE FROM anime_movies 
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovie, id)
	return err
}

const getAnimeMovie = `-- name: GetAnimeMovie :one
SELECT id, original_title, aired, release_year, rating, duration, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_movies 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovie(ctx context.Context, id int64) (AnimeMovie, error) {
	row := q.db.QueryRow(ctx, getAnimeMovie, id)
	var i AnimeMovie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.Duration,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovies = `-- name: ListAnimeMovies :many
SELECT id, original_title, aired, release_year, rating, duration, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_movies
WHERE release_year = $1 OR $1 = 0
LIMIT $2
OFFSET $3
`

type ListAnimeMoviesParams struct {
	ReleaseYear int32
	Limit       int32
	Offset      int32
}

func (q *Queries) ListAnimeMovies(ctx context.Context, arg ListAnimeMoviesParams) ([]AnimeMovie, error) {
	rows, err := q.db.Query(ctx, listAnimeMovies, arg.ReleaseYear, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovie{}
	for rows.Next() {
		var i AnimeMovie
		if err := rows.Scan(
			&i.ID,
			&i.OriginalTitle,
			&i.Aired,
			&i.ReleaseYear,
			&i.Rating,
			&i.Duration,
			&i.PortraitPoster,
			&i.PortraitBlurHash,
			&i.LandscapePoster,
			&i.LandscapeBlurHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovie = `-- name: UpdateAnimeMovie :one
UPDATE anime_movies
SET
  original_title = COALESCE($1, original_title),
  aired = COALESCE($2, aired),
  release_year = COALESCE($3, release_year),
  rating = COALESCE($4, rating),
  duration = COALESCE($5, duration),
  portrait_poster = COALESCE($6, portrait_poster),
  portrait_blur_hash = COALESCE($7, portrait_blur_hash),
  landscape_poster = COALESCE($8, landscape_poster),
  landscape_blur_hash = COALESCE($9, landscape_blur_hash)
WHERE
  id = $10
RETURNING id, original_title, aired, release_year, rating, duration, portrait_poster, portrait_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type UpdateAnimeMovieParams struct {
	OriginalTitle     pgtype.Text
	Aired             pgtype.Timestamptz
	ReleaseYear       pgtype.Int4
	Rating            pgtype.Text
	Duration          pgtype.Interval
	PortraitPoster    pgtype.Text
	PortraitBlurHash  pgtype.Text
	LandscapePoster   pgtype.Text
	LandscapeBlurHash pgtype.Text
	ID                int64
}

func (q *Queries) UpdateAnimeMovie(ctx context.Context, arg UpdateAnimeMovieParams) (AnimeMovie, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovie,
		arg.OriginalTitle,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.Duration,
		arg.PortraitPoster,
		arg.PortraitBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
		arg.ID,
	)
	var i AnimeMovie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Rating,
		&i.Duration,
		&i.PortraitPoster,
		&i.PortraitBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}
