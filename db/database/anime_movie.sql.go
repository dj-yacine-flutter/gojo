// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: anime_movie.sql

package db

import (
	"context"
	"time"
)

const createAnimeMovie = `-- name: CreateAnimeMovie :one
INSERT INTO anime_movie (
    original_title,
    aired,
    release_year,
    duration
)
VALUES ($1, $2, $3, $4)
RETURNING id, original_title, aired, release_year, duration, created_at
`

type CreateAnimeMovieParams struct {
	OriginalTitle string    `json:"original_title"`
	Aired         time.Time `json:"aired"`
	ReleaseYear   int32     `json:"release_year"`
	Duration      int32     `json:"duration"`
}

func (q *Queries) CreateAnimeMovie(ctx context.Context, arg CreateAnimeMovieParams) (AnimeMovie, error) {
	row := q.db.QueryRow(ctx, createAnimeMovie,
		arg.OriginalTitle,
		arg.Aired,
		arg.ReleaseYear,
		arg.Duration,
	)
	var i AnimeMovie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovie = `-- name: DeleteAnimeMovie :exec
DELETE FROM anime_movie 
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovie, id)
	return err
}

const getAnimeMovie = `-- name: GetAnimeMovie :one
SELECT id, original_title, aired, release_year, duration, created_at FROM anime_movie 
WHERE id = $1
`

func (q *Queries) GetAnimeMovie(ctx context.Context, id int64) (AnimeMovie, error) {
	row := q.db.QueryRow(ctx, getAnimeMovie, id)
	var i AnimeMovie
	err := row.Scan(
		&i.ID,
		&i.OriginalTitle,
		&i.Aired,
		&i.ReleaseYear,
		&i.Duration,
		&i.CreatedAt,
	)
	return i, err
}
