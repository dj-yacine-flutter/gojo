// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: anime_meta.sql

package db

import (
	"context"
)

const createAnimeMeta = `-- name: CreateAnimeMeta :exec
INSERT INTO anime_metas (anime_id, language_id, meta_id)
VALUES ($1, $2, $3)
`

type CreateAnimeMetaParams struct {
	AnimeID    int64 `json:"anime_id"`
	LanguageID int32 `json:"language_id"`
	MetaID     int64 `json:"meta_id"`
}

func (q *Queries) CreateAnimeMeta(ctx context.Context, arg CreateAnimeMetaParams) error {
	_, err := q.db.Exec(ctx, createAnimeMeta, arg.AnimeID, arg.LanguageID, arg.MetaID)
	return err
}

const deleteAnimeMeta = `-- name: DeleteAnimeMeta :exec
DELETE FROM anime_metas
WHERE anime_id = $1 AND language_id = $2
`

type DeleteAnimeMetaParams struct {
	AnimeID    int64 `json:"anime_id"`
	LanguageID int32 `json:"language_id"`
}

func (q *Queries) DeleteAnimeMeta(ctx context.Context, arg DeleteAnimeMetaParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMeta, arg.AnimeID, arg.LanguageID)
	return err
}

const getMetaIDByAnimeAndLanguage = `-- name: GetMetaIDByAnimeAndLanguage :one
SELECT meta_id
FROM anime_metas
WHERE anime_id = $1 AND language_id = $2
`

type GetMetaIDByAnimeAndLanguageParams struct {
	AnimeID    int64 `json:"anime_id"`
	LanguageID int32 `json:"language_id"`
}

func (q *Queries) GetMetaIDByAnimeAndLanguage(ctx context.Context, arg GetMetaIDByAnimeAndLanguageParams) (int64, error) {
	row := q.db.QueryRow(ctx, getMetaIDByAnimeAndLanguage, arg.AnimeID, arg.LanguageID)
	var meta_id int64
	err := row.Scan(&meta_id)
	return meta_id, err
}

const listAnimeMetas = `-- name: ListAnimeMetas :many
SELECT meta_id
FROM anime_metas
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeMetasParams struct {
	AnimeID int64 `json:"anime_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAnimeMetas(ctx context.Context, arg ListAnimeMetasParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeMetas, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var meta_id int64
		if err := rows.Scan(&meta_id); err != nil {
			return nil, err
		}
		items = append(items, meta_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMeta = `-- name: UpdateAnimeMeta :one
UPDATE anime_metas
SET meta_id = $3
WHERE anime_id = $1 AND language_id = $2
RETURNING id, anime_id, language_id, meta_id
`

type UpdateAnimeMetaParams struct {
	AnimeID    int64 `json:"anime_id"`
	LanguageID int32 `json:"language_id"`
	MetaID     int64 `json:"meta_id"`
}

func (q *Queries) UpdateAnimeMeta(ctx context.Context, arg UpdateAnimeMetaParams) (AnimeMeta, error) {
	row := q.db.QueryRow(ctx, updateAnimeMeta, arg.AnimeID, arg.LanguageID, arg.MetaID)
	var i AnimeMeta
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.LanguageID,
		&i.MetaID,
	)
	return i, err
}
