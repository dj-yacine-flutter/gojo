// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_trailer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeTrailer = `-- name: CreateAnimeTrailer :one
INSERT INTO anime_trailers (is_official, host_name, host_key)
VALUES ($1, $2, $3)
RETURNING  id, is_official, host_name, host_key, created_at
`

type CreateAnimeTrailerParams struct {
	IsOfficial bool
	HostName   string
	HostKey    string
}

func (q *Queries) CreateAnimeTrailer(ctx context.Context, arg CreateAnimeTrailerParams) (AnimeTrailer, error) {
	row := q.db.QueryRow(ctx, createAnimeTrailer, arg.IsOfficial, arg.HostName, arg.HostKey)
	var i AnimeTrailer
	err := row.Scan(
		&i.ID,
		&i.IsOfficial,
		&i.HostName,
		&i.HostKey,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeTrailer = `-- name: DeleteAnimeTrailer :exec
DELETE FROM anime_trailers
WHERE id = $1
`

func (q *Queries) DeleteAnimeTrailer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeTrailer, id)
	return err
}

const getAnimeTrailer = `-- name: GetAnimeTrailer :one
SELECT id, is_official, host_name, host_key, created_at FROM anime_trailers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeTrailer(ctx context.Context, id int64) (AnimeTrailer, error) {
	row := q.db.QueryRow(ctx, getAnimeTrailer, id)
	var i AnimeTrailer
	err := row.Scan(
		&i.ID,
		&i.IsOfficial,
		&i.HostName,
		&i.HostKey,
		&i.CreatedAt,
	)
	return i, err
}

const updateAnimeTrailer = `-- name: UpdateAnimeTrailer :one
UPDATE anime_trailers
SET
  is_official = COALESCE($1, is_official),
  host_name = COALESCE($2, host_name),
  host_key = COALESCE($3, host_key)
WHERE
  id = $4
RETURNING id, is_official, host_name, host_key, created_at
`

type UpdateAnimeTrailerParams struct {
	IsOfficial pgtype.Bool
	HostName   pgtype.Text
	HostKey    pgtype.Text
	ID         int64
}

func (q *Queries) UpdateAnimeTrailer(ctx context.Context, arg UpdateAnimeTrailerParams) (AnimeTrailer, error) {
	row := q.db.QueryRow(ctx, updateAnimeTrailer,
		arg.IsOfficial,
		arg.HostName,
		arg.HostKey,
		arg.ID,
	)
	var i AnimeTrailer
	err := row.Scan(
		&i.ID,
		&i.IsOfficial,
		&i.HostName,
		&i.HostKey,
		&i.CreatedAt,
	)
	return i, err
}
