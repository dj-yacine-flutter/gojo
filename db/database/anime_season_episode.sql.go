// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_season_episode.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSeasonEpisode = `-- name: CreateAnimeSeasonEpisode :one
INSERT INTO anime_season_episodes (season_id, episode_id)
VALUES ($1, $2)
RETURNING id, season_id, episode_id, created_at
`

type CreateAnimeSeasonEpisodeParams struct {
	SeasonID  int64
	EpisodeID int64
}

func (q *Queries) CreateAnimeSeasonEpisode(ctx context.Context, arg CreateAnimeSeasonEpisodeParams) (AnimeSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonEpisode, arg.SeasonID, arg.EpisodeID)
	var i AnimeSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeasonEpisode = `-- name: DeleteAnimeSeasonEpisode :exec
DELETE FROM anime_season_episodes
WHERE id = $1
`

func (q *Queries) DeleteAnimeSeasonEpisode(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonEpisode, id)
	return err
}

const getAnimeSeasonEpisode = `-- name: GetAnimeSeasonEpisode :one
SELECT id, season_id, episode_id, created_at FROM anime_season_episodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSeasonEpisode(ctx context.Context, id int64) (AnimeSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, getAnimeSeasonEpisode, id)
	var i AnimeSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSeasonEpisodes = `-- name: ListAnimeSeasonEpisodes :many
SELECT episode_id FROM anime_season_episodes
WHERE season_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeSeasonEpisodesParams struct {
	SeasonID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAnimeSeasonEpisodes(ctx context.Context, arg ListAnimeSeasonEpisodesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonEpisodes, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var episode_id int64
		if err := rows.Scan(&episode_id); err != nil {
			return nil, err
		}
		items = append(items, episode_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSeasonEpisode = `-- name: UpdateAnimeSeasonEpisode :one
UPDATE anime_season_episodes
SET
  season_id = COALESCE($1, season_id),
  episode_id = COALESCE($2, episode_id)
WHERE
  id = $3
RETURNING id, season_id, episode_id, created_at
`

type UpdateAnimeSeasonEpisodeParams struct {
	SeasonID  pgtype.Int8
	EpisodeID pgtype.Int8
	ID        int64
}

func (q *Queries) UpdateAnimeSeasonEpisode(ctx context.Context, arg UpdateAnimeSeasonEpisodeParams) (AnimeSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, updateAnimeSeasonEpisode, arg.SeasonID, arg.EpisodeID, arg.ID)
	var i AnimeSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}
