// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_season_other_title.sql

package db

import (
	"context"
)

const createAnimeSeasonOtherTitle = `-- name: CreateAnimeSeasonOtherTitle :one
INSERT INTO anime_season_other_titles (season_id, title_text)
VALUES ($1, $2)
ON CONFLICT (season_id, title_text)
DO UPDATE SET 
    season_id = excluded.season_id
RETURNING id, season_id, title_text, created_at
`

type CreateAnimeSeasonOtherTitleParams struct {
	SeasonID  int64
	TitleText string
}

func (q *Queries) CreateAnimeSeasonOtherTitle(ctx context.Context, arg CreateAnimeSeasonOtherTitleParams) (AnimeSeasonOtherTitle, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonOtherTitle, arg.SeasonID, arg.TitleText)
	var i AnimeSeasonOtherTitle
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.TitleText,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeasonOtherTitle = `-- name: DeleteAnimeSeasonOtherTitle :exec
DELETE FROM anime_season_other_titles
WHERE id = $1
`

func (q *Queries) DeleteAnimeSeasonOtherTitle(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonOtherTitle, id)
	return err
}

const getAnimeSeasonOtherTitles = `-- name: GetAnimeSeasonOtherTitles :many
SELECT id, season_id, title_text, created_at FROM anime_season_other_titles
WHERE season_id = $1
`

func (q *Queries) GetAnimeSeasonOtherTitles(ctx context.Context, seasonID int64) ([]AnimeSeasonOtherTitle, error) {
	rows, err := q.db.Query(ctx, getAnimeSeasonOtherTitles, seasonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSeasonOtherTitle{}
	for rows.Next() {
		var i AnimeSeasonOtherTitle
		if err := rows.Scan(
			&i.ID,
			&i.SeasonID,
			&i.TitleText,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryAnimeSeasonOtherTitles = `-- name: QueryAnimeSeasonOtherTitles :many
WITH search_documents AS (
  SELECT
    season_id,
    title_text,
    to_tsvector('pg_catalog.english', title_text) AS title_text_tsv
  FROM anime_season_other_titles
)
SELECT season_id
FROM search_documents
WHERE (
  $1::varchar IS NOT NULL AND $1::varchar <> '' AND
  (
    SELECT bool_and(
      to_tsvector('pg_catalog.english', lower(translate(title_text, '[:punct:]', ''))) 
      @@ plainto_tsquery(word)
    )
    FROM unnest(regexp_split_to_array($1::varchar, '\\W+')) AS word
  )
  OR title_text ILIKE '%' || $1::varchar || '%'
)
ORDER BY
  ts_rank(title_text_tsv, phraseto_tsquery($1::varchar)) DESC,
  similarity(title_text, $1::varchar) DESC
  LIMIT $2
  OFFSET $3
`

type QueryAnimeSeasonOtherTitlesParams struct {
	Column1 string
	Limit   int32
	Offset  int32
}

func (q *Queries) QueryAnimeSeasonOtherTitles(ctx context.Context, arg QueryAnimeSeasonOtherTitlesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, queryAnimeSeasonOtherTitles, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var season_id int64
		if err := rows.Scan(&season_id); err != nil {
			return nil, err
		}
		items = append(items, season_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
