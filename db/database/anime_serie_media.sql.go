// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_media.sql

package db

import (
	"context"
)

const createAnimeSerieMedia = `-- name: CreateAnimeSerieMedia :one
INSERT INTO anime_serie_media (anime_id, media_id)
VALUES ($1, $2)
RETURNING id, anime_id, media_id, created_at
`

type CreateAnimeSerieMediaParams struct {
	AnimeID int64
	MediaID int64
}

func (q *Queries) CreateAnimeSerieMedia(ctx context.Context, arg CreateAnimeSerieMediaParams) (AnimeSerieMedium, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieMedia, arg.AnimeID, arg.MediaID)
	var i AnimeSerieMedium
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.MediaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieMedia = `-- name: DeleteAnimeSerieMedia :exec
DELETE FROM anime_serie_media
WHERE anime_id = $1 AND media_id = $2
`

type DeleteAnimeSerieMediaParams struct {
	AnimeID int64
	MediaID int64
}

func (q *Queries) DeleteAnimeSerieMedia(ctx context.Context, arg DeleteAnimeSerieMediaParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieMedia, arg.AnimeID, arg.MediaID)
	return err
}

const getAnimeSerieMedia = `-- name: GetAnimeSerieMedia :one
SELECT id, anime_id, media_id, created_at FROM anime_serie_media
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieMedia(ctx context.Context, id int64) (AnimeSerieMedium, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieMedia, id)
	var i AnimeSerieMedium
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.MediaID,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeSerieMediaByAnimeID = `-- name: GetAnimeSerieMediaByAnimeID :one
SELECT id, anime_id, media_id, created_at FROM anime_serie_media
WHERE anime_id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieMediaByAnimeID(ctx context.Context, animeID int64) (AnimeSerieMedium, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieMediaByAnimeID, animeID)
	var i AnimeSerieMedium
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.MediaID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieMedias = `-- name: ListAnimeSerieMedias :many
SELECT media_id
FROM anime_serie_media
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeSerieMediasParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeSerieMedias(ctx context.Context, arg ListAnimeSerieMediasParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieMedias, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var media_id int64
		if err := rows.Scan(&media_id); err != nil {
			return nil, err
		}
		items = append(items, media_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
