// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_character.sql

package db

import (
	"context"
)

const createAnimeSerieCharacter = `-- name: CreateAnimeSerieCharacter :one
INSERT INTO anime_serie_characters (anime_id, character_id)
VALUES ($1, $2)
RETURNING id, anime_id, character_id, created_at
`

type CreateAnimeSerieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) CreateAnimeSerieCharacter(ctx context.Context, arg CreateAnimeSerieCharacterParams) (AnimeSerieCharacter, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieCharacter, arg.AnimeID, arg.CharacterID)
	var i AnimeSerieCharacter
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieCharacter = `-- name: DeleteAnimeSerieCharacter :exec
DELETE FROM anime_serie_characters
WHERE anime_id = $1 AND character_id = $2
`

type DeleteAnimeSerieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) DeleteAnimeSerieCharacter(ctx context.Context, arg DeleteAnimeSerieCharacterParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieCharacter, arg.AnimeID, arg.CharacterID)
	return err
}

const getAnimeSerieCharacter = `-- name: GetAnimeSerieCharacter :one
SELECT id, anime_id, character_id, created_at FROM anime_serie_characters
WHERE anime_id = $1 AND character_id = $2
`

type GetAnimeSerieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) GetAnimeSerieCharacter(ctx context.Context, arg GetAnimeSerieCharacterParams) (AnimeSerieCharacter, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieCharacter, arg.AnimeID, arg.CharacterID)
	var i AnimeSerieCharacter
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieCharacters = `-- name: ListAnimeSerieCharacters :many
SELECT character_id
FROM anime_serie_characters
WHERE anime_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSerieCharacters(ctx context.Context, animeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieCharacters, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var character_id int64
		if err := rows.Scan(&character_id); err != nil {
			return nil, err
		}
		items = append(items, character_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
