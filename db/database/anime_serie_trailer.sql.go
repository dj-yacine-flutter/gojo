// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_serie_trailer.sql

package db

import (
	"context"
)

const createAnimeSerieTrailer = `-- name: CreateAnimeSerieTrailer :one
INSERT INTO anime_serie_trailers (anime_id, trailer_id)
VALUES ($1, $2)
RETURNING id, anime_id, trailer_id, created_at
`

type CreateAnimeSerieTrailerParams struct {
	AnimeID   int64
	TrailerID int64
}

func (q *Queries) CreateAnimeSerieTrailer(ctx context.Context, arg CreateAnimeSerieTrailerParams) (AnimeSerieTrailer, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieTrailer, arg.AnimeID, arg.TrailerID)
	var i AnimeSerieTrailer
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.TrailerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieTrailer = `-- name: DeleteAnimeSerieTrailer :exec
DELETE FROM anime_serie_trailers
WHERE anime_id = $1 AND trailer_id = $2
`

type DeleteAnimeSerieTrailerParams struct {
	AnimeID   int64
	TrailerID int64
}

func (q *Queries) DeleteAnimeSerieTrailer(ctx context.Context, arg DeleteAnimeSerieTrailerParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieTrailer, arg.AnimeID, arg.TrailerID)
	return err
}

const listAnimeSerieTrailers = `-- name: ListAnimeSerieTrailers :many
SELECT trailer_id FROM anime_serie_trailers
WHERE anime_id = $1
`

func (q *Queries) ListAnimeSerieTrailers(ctx context.Context, animeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieTrailers, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var trailer_id int64
		if err := rows.Scan(&trailer_id); err != nil {
			return nil, err
		}
		items = append(items, trailer_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
