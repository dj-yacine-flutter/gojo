// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_movie_character.sql

package db

import (
	"context"
)

const createAnimeMovieCharacter = `-- name: CreateAnimeMovieCharacter :one
INSERT INTO anime_movie_characters (anime_id, character_id)
VALUES ($1, $2)
RETURNING id, anime_id, character_id, created_at
`

type CreateAnimeMovieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) CreateAnimeMovieCharacter(ctx context.Context, arg CreateAnimeMovieCharacterParams) (AnimeMovieCharacter, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieCharacter, arg.AnimeID, arg.CharacterID)
	var i AnimeMovieCharacter
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieCharacter = `-- name: DeleteAnimeMovieCharacter :exec
DELETE FROM anime_movie_characters
WHERE anime_id = $1 AND character_id = $2
`

type DeleteAnimeMovieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) DeleteAnimeMovieCharacter(ctx context.Context, arg DeleteAnimeMovieCharacterParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieCharacter, arg.AnimeID, arg.CharacterID)
	return err
}

const getAnimeMovieCharacter = `-- name: GetAnimeMovieCharacter :one
SELECT id, anime_id, character_id, created_at FROM anime_movie_characters
WHERE anime_id = $1 AND character_id = $2
`

type GetAnimeMovieCharacterParams struct {
	AnimeID     int64
	CharacterID int64
}

func (q *Queries) GetAnimeMovieCharacter(ctx context.Context, arg GetAnimeMovieCharacterParams) (AnimeMovieCharacter, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieCharacter, arg.AnimeID, arg.CharacterID)
	var i AnimeMovieCharacter
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.CharacterID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieCharacters = `-- name: ListAnimeMovieCharacters :many
SELECT character_id
FROM anime_movie_characters
WHERE anime_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeMovieCharacters(ctx context.Context, animeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieCharacters, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var character_id int64
		if err := rows.Scan(&character_id); err != nil {
			return nil, err
		}
		items = append(items, character_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
