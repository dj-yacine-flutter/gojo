// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_server.sql

package db

import (
	"context"
)

const createAnimeMovieServer = `-- name: CreateAnimeMovieServer :one
INSERT INTO anime_movie_servers (anime_id)
VALUES ($1)
RETURNING id, anime_id, created_at
`

func (q *Queries) CreateAnimeMovieServer(ctx context.Context, animeID int64) (AnimeMovieServer, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieServer, animeID)
	var i AnimeMovieServer
	err := row.Scan(&i.ID, &i.AnimeID, &i.CreatedAt)
	return i, err
}

const deleteAnimeMovieServer = `-- name: DeleteAnimeMovieServer :exec
DELETE FROM anime_movie_servers
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovieServer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieServer, id)
	return err
}

const getAnimeMovieServer = `-- name: GetAnimeMovieServer :one
SELECT id, anime_id, created_at FROM anime_movie_servers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieServer(ctx context.Context, id int64) (AnimeMovieServer, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieServer, id)
	var i AnimeMovieServer
	err := row.Scan(&i.ID, &i.AnimeID, &i.CreatedAt)
	return i, err
}

const getAnimeMovieServerByAnimeID = `-- name: GetAnimeMovieServerByAnimeID :one
SELECT id FROM anime_movie_servers
WHERE anime_id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieServerByAnimeID(ctx context.Context, animeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieServerByAnimeID, animeID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listAnimeMovieServers = `-- name: ListAnimeMovieServers :many
SELECT id, anime_id, created_at FROM anime_movie_servers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeMovieServersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeMovieServers(ctx context.Context, arg ListAnimeMovieServersParams) ([]AnimeMovieServer, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieServers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovieServer{}
	for rows.Next() {
		var i AnimeMovieServer
		if err := rows.Scan(&i.ID, &i.AnimeID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovieServer = `-- name: UpdateAnimeMovieServer :one
UPDATE anime_movie_servers
SET anime_id = $2
WHERE id = $1
RETURNING id, anime_id, created_at
`

type UpdateAnimeMovieServerParams struct {
	ID      int64
	AnimeID int64
}

func (q *Queries) UpdateAnimeMovieServer(ctx context.Context, arg UpdateAnimeMovieServerParams) (AnimeMovieServer, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovieServer, arg.ID, arg.AnimeID)
	var i AnimeMovieServer
	err := row.Scan(&i.ID, &i.AnimeID, &i.CreatedAt)
	return i, err
}
