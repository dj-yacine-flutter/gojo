// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_episode_server_sub_video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeEpisodeServerSubVideo = `-- name: CreateAnimeEpisodeServerSubVideo :one
INSERT INTO anime_episode_server_sub_videos (server_id, video_id)
VALUES ($1, $2)
RETURNING id, server_id, video_id, created_at
`

type CreateAnimeEpisodeServerSubVideoParams struct {
	ServerID int64
	VideoID  int64
}

func (q *Queries) CreateAnimeEpisodeServerSubVideo(ctx context.Context, arg CreateAnimeEpisodeServerSubVideoParams) (AnimeEpisodeServerSubVideo, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisodeServerSubVideo, arg.ServerID, arg.VideoID)
	var i AnimeEpisodeServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeEpisodeServerSubVideo = `-- name: DeleteAnimeEpisodeServerSubVideo :exec
DELETE FROM anime_episode_server_sub_videos
WHERE id = $1
`

func (q *Queries) DeleteAnimeEpisodeServerSubVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisodeServerSubVideo, id)
	return err
}

const getAnimeEpisodeServerSubVideo = `-- name: GetAnimeEpisodeServerSubVideo :one
SELECT id, server_id, video_id, created_at FROM anime_episode_server_sub_videos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisodeServerSubVideo(ctx context.Context, id int64) (AnimeEpisodeServerSubVideo, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeServerSubVideo, id)
	var i AnimeEpisodeServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeEpisodeServerSubVideos = `-- name: ListAnimeEpisodeServerSubVideos :many
SELECT id, server_id, video_id, created_at FROM anime_episode_server_sub_videos
WHERE server_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeEpisodeServerSubVideos(ctx context.Context, serverID int64) ([]AnimeEpisodeServerSubVideo, error) {
	rows, err := q.db.Query(ctx, listAnimeEpisodeServerSubVideos, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeEpisodeServerSubVideo{}
	for rows.Next() {
		var i AnimeEpisodeServerSubVideo
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.VideoID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeEpisodeServerSubVideo = `-- name: UpdateAnimeEpisodeServerSubVideo :one
UPDATE anime_episode_server_sub_videos
SET 
  server_id = COALESCE($1, server_id),
  video_id = COALESCE($2, video_id)
WHERE
  id = $3
RETURNING id, server_id, video_id, created_at
`

type UpdateAnimeEpisodeServerSubVideoParams struct {
	ServerID pgtype.Int8
	VideoID  pgtype.Int8
	ID       int64
}

func (q *Queries) UpdateAnimeEpisodeServerSubVideo(ctx context.Context, arg UpdateAnimeEpisodeServerSubVideoParams) (AnimeEpisodeServerSubVideo, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisodeServerSubVideo, arg.ServerID, arg.VideoID, arg.ID)
	var i AnimeEpisodeServerSubVideo
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.VideoID,
		&i.CreatedAt,
	)
	return i, err
}
