// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_season_images_poster.sql

package db

import (
	"context"
)

const createAnimeSerieSeasonPosterImage = `-- name: CreateAnimeSerieSeasonPosterImage :one
INSERT INTO anime_serie_season_poster_images (season_id, image_id)
VALUES ($1, $2)
RETURNING id, season_id, image_id, created_at
`

type CreateAnimeSerieSeasonPosterImageParams struct {
	SeasonID int64
	ImageID  int64
}

func (q *Queries) CreateAnimeSerieSeasonPosterImage(ctx context.Context, arg CreateAnimeSerieSeasonPosterImageParams) (AnimeSerieSeasonPosterImage, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieSeasonPosterImage, arg.SeasonID, arg.ImageID)
	var i AnimeSerieSeasonPosterImage
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieSeasonPosterImage = `-- name: DeleteAnimeSerieSeasonPosterImage :exec
DELETE FROM anime_serie_season_poster_images
WHERE season_id = $1 AND image_id = $2
`

type DeleteAnimeSerieSeasonPosterImageParams struct {
	SeasonID int64
	ImageID  int64
}

func (q *Queries) DeleteAnimeSerieSeasonPosterImage(ctx context.Context, arg DeleteAnimeSerieSeasonPosterImageParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieSeasonPosterImage, arg.SeasonID, arg.ImageID)
	return err
}

const getAnimeSerieSeasonPosterImage = `-- name: GetAnimeSerieSeasonPosterImage :one
SELECT id, season_id, image_id, created_at FROM anime_serie_season_poster_images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieSeasonPosterImage(ctx context.Context, id int64) (AnimeSerieSeasonPosterImage, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieSeasonPosterImage, id)
	var i AnimeSerieSeasonPosterImage
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeSerieSeasonPosterImageByAnimeID = `-- name: GetAnimeSerieSeasonPosterImageByAnimeID :one
SELECT id, season_id, image_id, created_at FROM anime_serie_season_poster_images
WHERE season_id = $1 LIMIT 1
`

func (q *Queries) GetAnimeSerieSeasonPosterImageByAnimeID(ctx context.Context, seasonID int64) (AnimeSerieSeasonPosterImage, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieSeasonPosterImageByAnimeID, seasonID)
	var i AnimeSerieSeasonPosterImage
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieSeasonPosterImages = `-- name: ListAnimeSerieSeasonPosterImages :many
SELECT image_id
FROM anime_serie_season_poster_images
WHERE season_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeSerieSeasonPosterImagesParams struct {
	SeasonID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAnimeSerieSeasonPosterImages(ctx context.Context, arg ListAnimeSerieSeasonPosterImagesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieSeasonPosterImages, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var image_id int64
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
