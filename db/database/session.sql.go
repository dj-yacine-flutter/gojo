// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  id,
  username,
  refresh_token,
  user_agent,
  client_ip,
  is_blocked,
  expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at
`

type CreateSessionParams struct {
	ID           uuid.UUID
	Username     string
	RefreshToken string
	UserAgent    string
	ClientIp     string
	IsBlocked    bool
	ExpiresAt    time.Time
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const refreshSessions = `-- name: RefreshSessions :exec
DELETE FROM sessions AS s1
WHERE s1.username = $1
AND s1.is_blocked = true
AND (s1.expires_at < NOW()
     OR s1.expires_at != (SELECT MAX(expires_at) FROM sessions AS s2
                         WHERE s2.username = $1 AND s2.is_blocked = true)
)
`

func (q *Queries) RefreshSessions(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, refreshSessions, username)
	return err
}

const updateSession = `-- name: UpdateSession :one
UPDATE sessions
SET is_blocked = $2
WHERE username = $1
RETURNING username
`

type UpdateSessionParams struct {
	Username  string
	IsBlocked bool
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (string, error) {
	row := q.db.QueryRow(ctx, updateSession, arg.Username, arg.IsBlocked)
	var username string
	err := row.Scan(&username)
	return username, err
}
