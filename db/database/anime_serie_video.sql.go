// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_video.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieVideo = `-- name: CreateAnimeSerieVideo :one
INSERT INTO anime_serie_videos (language_id, autority, referer, link, quality)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, language_id, autority, referer, link, quality, created_at
`

type CreateAnimeSerieVideoParams struct {
	LanguageID int32
	Autority   string
	Referer    string
	Link       string
	Quality    string
}

func (q *Queries) CreateAnimeSerieVideo(ctx context.Context, arg CreateAnimeSerieVideoParams) (AnimeSerieVideo, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieVideo,
		arg.LanguageID,
		arg.Autority,
		arg.Referer,
		arg.Link,
		arg.Quality,
	)
	var i AnimeSerieVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Autority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieVideo = `-- name: DeleteAnimeSerieVideo :exec
DELETE FROM anime_serie_videos
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieVideo(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieVideo, id)
	return err
}

const getAnimeSerieVideo = `-- name: GetAnimeSerieVideo :one
SELECT id, language_id, autority, referer, link, quality, created_at FROM anime_serie_videos
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieVideo(ctx context.Context, id int64) (AnimeSerieVideo, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieVideo, id)
	var i AnimeSerieVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Autority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieVideos = `-- name: ListAnimeSerieVideos :many
SELECT id, language_id, autority, referer, link, quality, created_at FROM anime_serie_videos
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeSerieVideosParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeSerieVideos(ctx context.Context, arg ListAnimeSerieVideosParams) ([]AnimeSerieVideo, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieVideos, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieVideo{}
	for rows.Next() {
		var i AnimeSerieVideo
		if err := rows.Scan(
			&i.ID,
			&i.LanguageID,
			&i.Autority,
			&i.Referer,
			&i.Link,
			&i.Quality,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieVideo = `-- name: UpdateAnimeSerieVideo :one
UPDATE anime_serie_videos
SET
    language_id = COALESCE($2, language_id),
    autority = COALESCE($3, autority),
    referer = COALESCE($4, referer),
    link = COALESCE($5, link),
    quality = COALESCE($6, quality)
WHERE id = $1
RETURNING id, language_id, autority, referer, link, quality, created_at
`

type UpdateAnimeSerieVideoParams struct {
	ID         int64
	LanguageID pgtype.Int4
	Autority   pgtype.Text
	Referer    pgtype.Text
	Link       pgtype.Text
	Quality    pgtype.Text
}

func (q *Queries) UpdateAnimeSerieVideo(ctx context.Context, arg UpdateAnimeSerieVideoParams) (AnimeSerieVideo, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieVideo,
		arg.ID,
		arg.LanguageID,
		arg.Autority,
		arg.Referer,
		arg.Link,
		arg.Quality,
	)
	var i AnimeSerieVideo
	err := row.Scan(
		&i.ID,
		&i.LanguageID,
		&i.Autority,
		&i.Referer,
		&i.Link,
		&i.Quality,
		&i.CreatedAt,
	)
	return i, err
}
