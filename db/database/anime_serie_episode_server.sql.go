// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_episode_server.sql

package db

import (
	"context"
)

const createAnimeEpisodeServer = `-- name: CreateAnimeEpisodeServer :one
INSERT INTO anime_episode_servers (episode_id)
VALUES ($1)
RETURNING id, episode_id, created_at
`

func (q *Queries) CreateAnimeEpisodeServer(ctx context.Context, episodeID int64) (AnimeEpisodeServer, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisodeServer, episodeID)
	var i AnimeEpisodeServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}

const deleteAnimeEpisodeServer = `-- name: DeleteAnimeEpisodeServer :exec
DELETE FROM anime_episode_servers
WHERE id = $1
`

func (q *Queries) DeleteAnimeEpisodeServer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisodeServer, id)
	return err
}

const getAnimeEpisodeServer = `-- name: GetAnimeEpisodeServer :one
SELECT id, episode_id, created_at FROM anime_episode_servers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisodeServer(ctx context.Context, id int64) (AnimeEpisodeServer, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeServer, id)
	var i AnimeEpisodeServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}

const getAnimeEpisodeServerByEpisodeID = `-- name: GetAnimeEpisodeServerByEpisodeID :one
SELECT id FROM anime_episode_servers
WHERE episode_id = $1
LIMIT 1
`

func (q *Queries) GetAnimeEpisodeServerByEpisodeID(ctx context.Context, episodeID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeServerByEpisodeID, episodeID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listAnimeEpisodeServers = `-- name: ListAnimeEpisodeServers :many
SELECT id, episode_id, created_at FROM anime_episode_servers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeEpisodeServersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAnimeEpisodeServers(ctx context.Context, arg ListAnimeEpisodeServersParams) ([]AnimeEpisodeServer, error) {
	rows, err := q.db.Query(ctx, listAnimeEpisodeServers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeEpisodeServer{}
	for rows.Next() {
		var i AnimeEpisodeServer
		if err := rows.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeEpisodeServer = `-- name: UpdateAnimeEpisodeServer :one
UPDATE anime_episode_servers
SET episode_id = $2
WHERE id = $1
RETURNING id, episode_id, created_at
`

type UpdateAnimeEpisodeServerParams struct {
	ID        int64
	EpisodeID int64
}

func (q *Queries) UpdateAnimeEpisodeServer(ctx context.Context, arg UpdateAnimeEpisodeServerParams) (AnimeEpisodeServer, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisodeServer, arg.ID, arg.EpisodeID)
	var i AnimeEpisodeServer
	err := row.Scan(&i.ID, &i.EpisodeID, &i.CreatedAt)
	return i, err
}
