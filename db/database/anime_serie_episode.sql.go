// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_episode.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieEpisode = `-- name: CreateAnimeSerieEpisode :one
INSERT INTO anime_serie_episodes (episode_number, season_id)
VALUES ($1, $2)
RETURNING id, episode_number, season_id, created_at
`

type CreateAnimeSerieEpisodeParams struct {
	EpisodeNumber int32 `json:"episode_number"`
	SeasonID      int64 `json:"season_id"`
}

func (q *Queries) CreateAnimeSerieEpisode(ctx context.Context, arg CreateAnimeSerieEpisodeParams) (AnimeSerieEpisode, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieEpisode, arg.EpisodeNumber, arg.SeasonID)
	var i AnimeSerieEpisode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.SeasonID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieEpisode = `-- name: DeleteAnimeSerieEpisode :exec
DELETE FROM anime_serie_episodes
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieEpisode(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieEpisode, id)
	return err
}

const getAnimeSerieEpisode = `-- name: GetAnimeSerieEpisode :one
SELECT id, episode_number, season_id, created_at FROM anime_serie_episodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieEpisode(ctx context.Context, id int64) (AnimeSerieEpisode, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieEpisode, id)
	var i AnimeSerieEpisode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.SeasonID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieEpisodesBySeason = `-- name: ListAnimeSerieEpisodesBySeason :many
SELECT id, episode_number, season_id, created_at FROM anime_serie_episodes
WHERE season_id = $1
ORDER BY episode_number
LIMIT $2
OFFSET $3
`

type ListAnimeSerieEpisodesBySeasonParams struct {
	SeasonID int64 `json:"season_id"`
	Limit    int32 `json:"limit"`
	Offset   int32 `json:"offset"`
}

func (q *Queries) ListAnimeSerieEpisodesBySeason(ctx context.Context, arg ListAnimeSerieEpisodesBySeasonParams) ([]AnimeSerieEpisode, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieEpisodesBySeason, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieEpisode{}
	for rows.Next() {
		var i AnimeSerieEpisode
		if err := rows.Scan(
			&i.ID,
			&i.EpisodeNumber,
			&i.SeasonID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieEpisode = `-- name: UpdateAnimeSerieEpisode :one
UPDATE anime_serie_episodes
SET
  episode_number = COALESCE($1, episode_number),
  season_id = COALESCE($2, season_id)
WHERE
  id = $3
RETURNING id, episode_number, season_id, created_at
`

type UpdateAnimeSerieEpisodeParams struct {
	EpisodeNumber pgtype.Int4 `json:"episode_number"`
	SeasonID      pgtype.Int8 `json:"season_id"`
	ID            int64       `json:"id"`
}

func (q *Queries) UpdateAnimeSerieEpisode(ctx context.Context, arg UpdateAnimeSerieEpisodeParams) (AnimeSerieEpisode, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieEpisode, arg.EpisodeNumber, arg.SeasonID, arg.ID)
	var i AnimeSerieEpisode
	err := row.Scan(
		&i.ID,
		&i.EpisodeNumber,
		&i.SeasonID,
		&i.CreatedAt,
	)
	return i, err
}
