// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_season.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieSeason = `-- name: CreateAnimeSerieSeason :one
INSERT INTO anime_serie_seasons (
    anime_id,
    season_number,
    portriat_poster,
    portriat_blur_hash,
    landscape_poster,
    landscape_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, anime_id, season_number, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type CreateAnimeSerieSeasonParams struct {
	AnimeID           int64
	SeasonNumber      int32
	PortriatPoster    string
	PortriatBlurHash  string
	LandscapePoster   string
	LandscapeBlurHash string
}

func (q *Queries) CreateAnimeSerieSeason(ctx context.Context, arg CreateAnimeSerieSeasonParams) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieSeason,
		arg.AnimeID,
		arg.SeasonNumber,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
	)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.SeasonNumber,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieSeason = `-- name: DeleteAnimeSerieSeason :exec
DELETE FROM anime_serie_seasons
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieSeason(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieSeason, id)
	return err
}

const getAnimeSerieSeason = `-- name: GetAnimeSerieSeason :one
SELECT id, anime_id, season_number, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_serie_seasons
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieSeason(ctx context.Context, id int64) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieSeason, id)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.SeasonNumber,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieSeasonsByAnimeID = `-- name: ListAnimeSerieSeasonsByAnimeID :many
SELECT id, anime_id, season_number, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at FROM anime_serie_seasons
WHERE anime_id = $1
ORDER BY season_number
LIMIT $2
OFFSET $3
`

type ListAnimeSerieSeasonsByAnimeIDParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeSerieSeasonsByAnimeID(ctx context.Context, arg ListAnimeSerieSeasonsByAnimeIDParams) ([]AnimeSerieSeason, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieSeasonsByAnimeID, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieSeason{}
	for rows.Next() {
		var i AnimeSerieSeason
		if err := rows.Scan(
			&i.ID,
			&i.AnimeID,
			&i.SeasonNumber,
			&i.PortriatPoster,
			&i.PortriatBlurHash,
			&i.LandscapePoster,
			&i.LandscapeBlurHash,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieSeason = `-- name: UpdateAnimeSerieSeason :one
UPDATE anime_serie_seasons
SET
  season_number = COALESCE($1, season_number),
  portriat_poster = COALESCE($2, portriat_poster),
  portriat_blur_hash = COALESCE($3, portriat_blur_hash),
  landscape_poster = COALESCE($4, landscape_poster),
  landscape_blur_hash = COALESCE($5, landscape_blur_hash)
WHERE
  id = $6
RETURNING id, anime_id, season_number, portriat_poster, portriat_blur_hash, landscape_poster, landscape_blur_hash, created_at
`

type UpdateAnimeSerieSeasonParams struct {
	SeasonNumber      pgtype.Int4
	PortriatPoster    pgtype.Text
	PortriatBlurHash  pgtype.Text
	LandscapePoster   pgtype.Text
	LandscapeBlurHash pgtype.Text
	ID                int64
}

func (q *Queries) UpdateAnimeSerieSeason(ctx context.Context, arg UpdateAnimeSerieSeasonParams) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieSeason,
		arg.SeasonNumber,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
		arg.LandscapePoster,
		arg.LandscapeBlurHash,
		arg.ID,
	)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.SeasonNumber,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.LandscapePoster,
		&i.LandscapeBlurHash,
		&i.CreatedAt,
	)
	return i, err
}
