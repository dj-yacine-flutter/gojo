// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_season.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSeason = `-- name: CreateAnimeSeason :one
INSERT INTO anime_serie_seasons (
    anime_id,
    aired,
    release_year,
    rating,
    portriat_poster,
    portriat_blur_hash
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, anime_id, aired, release_year, portriat_poster, portriat_blur_hash, rating, created_at
`

type CreateAnimeSeasonParams struct {
	AnimeID          int64
	Aired            time.Time
	ReleaseYear      int32
	Rating           string
	PortriatPoster   string
	PortriatBlurHash string
}

func (q *Queries) CreateAnimeSeason(ctx context.Context, arg CreateAnimeSeasonParams) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, createAnimeSeason,
		arg.AnimeID,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
	)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Aired,
		&i.ReleaseYear,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeason = `-- name: DeleteAnimeSeason :exec
DELETE FROM anime_serie_seasons
WHERE id = $1
`

func (q *Queries) DeleteAnimeSeason(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeason, id)
	return err
}

const getAnimeSeason = `-- name: GetAnimeSeason :one
SELECT id, anime_id, aired, release_year, portriat_poster, portriat_blur_hash, rating, created_at FROM anime_serie_seasons
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSeason(ctx context.Context, id int64) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, getAnimeSeason, id)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Aired,
		&i.ReleaseYear,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSeasonsByAnimeID = `-- name: ListAnimeSeasonsByAnimeID :many
SELECT id, anime_id, aired, release_year, portriat_poster, portriat_blur_hash, rating, created_at FROM anime_serie_seasons
WHERE anime_id = $1
ORDER BY release_year
LIMIT $2
OFFSET $3
`

type ListAnimeSeasonsByAnimeIDParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeSeasonsByAnimeID(ctx context.Context, arg ListAnimeSeasonsByAnimeIDParams) ([]AnimeSerieSeason, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonsByAnimeID, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieSeason{}
	for rows.Next() {
		var i AnimeSerieSeason
		if err := rows.Scan(
			&i.ID,
			&i.AnimeID,
			&i.Aired,
			&i.ReleaseYear,
			&i.PortriatPoster,
			&i.PortriatBlurHash,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSeason = `-- name: UpdateAnimeSeason :one
UPDATE anime_serie_seasons
SET
  aired = COALESCE($1, aired),
  release_year = COALESCE($2, release_year),
  rating = COALESCE($3, rating),
  portriat_poster = COALESCE($4, portriat_poster),
  portriat_blur_hash = COALESCE($5, portriat_blur_hash)
WHERE
  id = $6
RETURNING id, anime_id, aired, release_year, portriat_poster, portriat_blur_hash, rating, created_at
`

type UpdateAnimeSeasonParams struct {
	Aired            pgtype.Timestamptz
	ReleaseYear      pgtype.Int4
	Rating           pgtype.Text
	PortriatPoster   pgtype.Text
	PortriatBlurHash pgtype.Text
	ID               int64
}

func (q *Queries) UpdateAnimeSeason(ctx context.Context, arg UpdateAnimeSeasonParams) (AnimeSerieSeason, error) {
	row := q.db.QueryRow(ctx, updateAnimeSeason,
		arg.Aired,
		arg.ReleaseYear,
		arg.Rating,
		arg.PortriatPoster,
		arg.PortriatBlurHash,
		arg.ID,
	)
	var i AnimeSerieSeason
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.Aired,
		&i.ReleaseYear,
		&i.PortriatPoster,
		&i.PortriatBlurHash,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
