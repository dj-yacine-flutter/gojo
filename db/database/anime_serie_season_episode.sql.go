// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_season_episode.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieSeasonEpisode = `-- name: CreateAnimeSerieSeasonEpisode :one
INSERT INTO anime_serie_season_episodes (season_id, episode_id)
VALUES ($1, $2)
RETURNING id, season_id, episode_id, created_at
`

type CreateAnimeSerieSeasonEpisodeParams struct {
	SeasonID  int64
	EpisodeID int64
}

func (q *Queries) CreateAnimeSerieSeasonEpisode(ctx context.Context, arg CreateAnimeSerieSeasonEpisodeParams) (AnimeSerieSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieSeasonEpisode, arg.SeasonID, arg.EpisodeID)
	var i AnimeSerieSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieSeasonEpisode = `-- name: DeleteAnimeSerieSeasonEpisode :exec
DELETE FROM anime_serie_season_episodes
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieSeasonEpisode(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieSeasonEpisode, id)
	return err
}

const getAnimeSerieSeasonEpisode = `-- name: GetAnimeSerieSeasonEpisode :one
SELECT id, season_id, episode_id, created_at FROM anime_serie_season_episodes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieSeasonEpisode(ctx context.Context, id int64) (AnimeSerieSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieSeasonEpisode, id)
	var i AnimeSerieSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieSeasonEpisodesBySeason = `-- name: ListAnimeSerieSeasonEpisodesBySeason :many
SELECT id, season_id, episode_id, created_at FROM anime_serie_season_episodes
WHERE season_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeSerieSeasonEpisodesBySeasonParams struct {
	SeasonID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAnimeSerieSeasonEpisodesBySeason(ctx context.Context, arg ListAnimeSerieSeasonEpisodesBySeasonParams) ([]AnimeSerieSeasonEpisode, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieSeasonEpisodesBySeason, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieSeasonEpisode{}
	for rows.Next() {
		var i AnimeSerieSeasonEpisode
		if err := rows.Scan(
			&i.ID,
			&i.SeasonID,
			&i.EpisodeID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieSeasonEpisode = `-- name: UpdateAnimeSerieSeasonEpisode :one
UPDATE anime_serie_season_episodes
SET
  episode_id = COALESCE($1, episode_id),
  season_id = COALESCE($2, season_id)
WHERE
  id = $3
RETURNING id, season_id, episode_id, created_at
`

type UpdateAnimeSerieSeasonEpisodeParams struct {
	EpisodeID pgtype.Int8
	SeasonID  pgtype.Int8
	ID        int64
}

func (q *Queries) UpdateAnimeSerieSeasonEpisode(ctx context.Context, arg UpdateAnimeSerieSeasonEpisodeParams) (AnimeSerieSeasonEpisode, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieSeasonEpisode, arg.EpisodeID, arg.SeasonID, arg.ID)
	var i AnimeSerieSeasonEpisode
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.EpisodeID,
		&i.CreatedAt,
	)
	return i, err
}
