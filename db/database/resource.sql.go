// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: resource.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeResource = `-- name: CreateAnimeResource :one
INSERT INTO anime_resources (tmdb_id, imdb_id, official_website, wikipedia_url, crunchyroll_url, social_media)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING  id, tmdb_id, imdb_id, official_website, wikipedia_url, crunchyroll_url, social_media, created_at
`

type CreateAnimeResourceParams struct {
	TmdbID          int32    `json:"tmdb_id"`
	ImdbID          string   `json:"imdb_id"`
	OfficialWebsite string   `json:"official_website"`
	WikipediaUrl    string   `json:"wikipedia_url"`
	CrunchyrollUrl  string   `json:"crunchyroll_url"`
	SocialMedia     []string `json:"social_media"`
}

func (q *Queries) CreateAnimeResource(ctx context.Context, arg CreateAnimeResourceParams) (AnimeResource, error) {
	row := q.db.QueryRow(ctx, createAnimeResource,
		arg.TmdbID,
		arg.ImdbID,
		arg.OfficialWebsite,
		arg.WikipediaUrl,
		arg.CrunchyrollUrl,
		arg.SocialMedia,
	)
	var i AnimeResource
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.ImdbID,
		&i.OfficialWebsite,
		&i.WikipediaUrl,
		&i.CrunchyrollUrl,
		&i.SocialMedia,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeResource = `-- name: DeleteAnimeResource :exec
DELETE FROM anime_resources
WHERE id = $1
`

func (q *Queries) DeleteAnimeResource(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeResource, id)
	return err
}

const getAnimeResource = `-- name: GetAnimeResource :one
SELECT id, tmdb_id, imdb_id, official_website, wikipedia_url, crunchyroll_url, social_media, created_at FROM anime_resources
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeResource(ctx context.Context, id int64) (AnimeResource, error) {
	row := q.db.QueryRow(ctx, getAnimeResource, id)
	var i AnimeResource
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.ImdbID,
		&i.OfficialWebsite,
		&i.WikipediaUrl,
		&i.CrunchyrollUrl,
		&i.SocialMedia,
		&i.CreatedAt,
	)
	return i, err
}

const updateAnimeResource = `-- name: UpdateAnimeResource :one
UPDATE anime_resources
SET
  tmdb_id = COALESCE($1, tmdb_id),
  imdb_id = COALESCE($2, imdb_id),
  official_website = COALESCE($3, official_website),
  wikipedia_url = COALESCE($4, wikipedia_url),
  crunchyroll_url = COALESCE($5, crunchyroll_url),
  social_media = COALESCE($6, social_media)
WHERE
  id = $7
RETURNING id, tmdb_id, imdb_id, official_website, wikipedia_url, crunchyroll_url, social_media, created_at
`

type UpdateAnimeResourceParams struct {
	TmdbID          pgtype.Int4 `json:"tmdb_id"`
	ImdbID          pgtype.Text `json:"imdb_id"`
	OfficialWebsite pgtype.Text `json:"official_website"`
	WikipediaUrl    pgtype.Text `json:"wikipedia_url"`
	CrunchyrollUrl  pgtype.Text `json:"crunchyroll_url"`
	SocialMedia     []string    `json:"social_media"`
	ID              int64       `json:"id"`
}

func (q *Queries) UpdateAnimeResource(ctx context.Context, arg UpdateAnimeResourceParams) (AnimeResource, error) {
	row := q.db.QueryRow(ctx, updateAnimeResource,
		arg.TmdbID,
		arg.ImdbID,
		arg.OfficialWebsite,
		arg.WikipediaUrl,
		arg.CrunchyrollUrl,
		arg.SocialMedia,
		arg.ID,
	)
	var i AnimeResource
	err := row.Scan(
		&i.ID,
		&i.TmdbID,
		&i.ImdbID,
		&i.OfficialWebsite,
		&i.WikipediaUrl,
		&i.CrunchyrollUrl,
		&i.SocialMedia,
		&i.CreatedAt,
	)
	return i, err
}
