// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_server_torrent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieServerTorrent = `-- name: CreateAnimeSerieServerTorrent :one
INSERT INTO anime_serie_server_torrents (server_id, torrent_id)
VALUES ($1, $2)
RETURNING id, server_id, torrent_id, created_at
`

type CreateAnimeSerieServerTorrentParams struct {
	ServerID  int64
	TorrentID int64
}

func (q *Queries) CreateAnimeSerieServerTorrent(ctx context.Context, arg CreateAnimeSerieServerTorrentParams) (AnimeSerieServerTorrent, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieServerTorrent, arg.ServerID, arg.TorrentID)
	var i AnimeSerieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieServerTorrent = `-- name: DeleteAnimeSerieServerTorrent :exec
DELETE FROM anime_serie_server_torrents
WHERE id = $1
`

func (q *Queries) DeleteAnimeSerieServerTorrent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieServerTorrent, id)
	return err
}

const getAnimeSerieServerTorrent = `-- name: GetAnimeSerieServerTorrent :one
SELECT id, server_id, torrent_id, created_at FROM anime_serie_server_torrents
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieServerTorrent(ctx context.Context, id int64) (AnimeSerieServerTorrent, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieServerTorrent, id)
	var i AnimeSerieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieServerTorrents = `-- name: ListAnimeSerieServerTorrents :many
SELECT id, server_id, torrent_id, created_at FROM anime_serie_server_torrents
WHERE server_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeSerieServerTorrents(ctx context.Context, serverID int64) ([]AnimeSerieServerTorrent, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieServerTorrents, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieServerTorrent{}
	for rows.Next() {
		var i AnimeSerieServerTorrent
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.TorrentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieServerTorrent = `-- name: UpdateAnimeSerieServerTorrent :one
UPDATE anime_serie_server_torrents
SET 
  server_id = COALESCE($1, server_id),
  torrent_id = COALESCE($2, torrent_id)
WHERE
  id = $3
RETURNING id, server_id, torrent_id, created_at
`

type UpdateAnimeSerieServerTorrentParams struct {
	ServerID  pgtype.Int8
	TorrentID pgtype.Int8
	ID        int64
}

func (q *Queries) UpdateAnimeSerieServerTorrent(ctx context.Context, arg UpdateAnimeSerieServerTorrentParams) (AnimeSerieServerTorrent, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieServerTorrent, arg.ServerID, arg.TorrentID, arg.ID)
	var i AnimeSerieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}
