// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_link.sql

package db

import (
	"context"
)

const createAnimeSerieLink = `-- name: CreateAnimeSerieLink :one
INSERT INTO anime_serie_links (anime_id, link_id)
VALUES ($1, $2)
RETURNING id, anime_id, link_id
`

type CreateAnimeSerieLinkParams struct {
	AnimeID int64
	LinkID  int64
}

func (q *Queries) CreateAnimeSerieLink(ctx context.Context, arg CreateAnimeSerieLinkParams) (AnimeSerieLink, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieLink, arg.AnimeID, arg.LinkID)
	var i AnimeSerieLink
	err := row.Scan(&i.ID, &i.AnimeID, &i.LinkID)
	return i, err
}

const deleteAnimeSerieLink = `-- name: DeleteAnimeSerieLink :exec
DELETE FROM anime_serie_links
WHERE anime_id = $1 AND link_id = $2
`

type DeleteAnimeSerieLinkParams struct {
	AnimeID int64
	LinkID  int64
}

func (q *Queries) DeleteAnimeSerieLink(ctx context.Context, arg DeleteAnimeSerieLinkParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieLink, arg.AnimeID, arg.LinkID)
	return err
}

const getAnimeSerieLink = `-- name: GetAnimeSerieLink :one
SELECT id, anime_id, link_id FROM anime_serie_links
WHERE anime_id = $1
LIMIT 1
`

func (q *Queries) GetAnimeSerieLink(ctx context.Context, animeID int64) (AnimeSerieLink, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieLink, animeID)
	var i AnimeSerieLink
	err := row.Scan(&i.ID, &i.AnimeID, &i.LinkID)
	return i, err
}
