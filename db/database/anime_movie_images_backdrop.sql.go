// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_images_backdrop.sql

package db

import (
	"context"
)

const createAnimeMovieBackdropImage = `-- name: CreateAnimeMovieBackdropImage :one
INSERT INTO anime_movie_backdrop_images (anime_id, image_id)
VALUES ($1, $2)
RETURNING id, anime_id, image_id, created_at
`

type CreateAnimeMovieBackdropImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) CreateAnimeMovieBackdropImage(ctx context.Context, arg CreateAnimeMovieBackdropImageParams) (AnimeMovieBackdropImage, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieBackdropImage, arg.AnimeID, arg.ImageID)
	var i AnimeMovieBackdropImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieBackdropImage = `-- name: DeleteAnimeMovieBackdropImage :exec
DELETE FROM anime_movie_backdrop_images
WHERE anime_id = $1 AND image_id = $2
`

type DeleteAnimeMovieBackdropImageParams struct {
	AnimeID int64
	ImageID int64
}

func (q *Queries) DeleteAnimeMovieBackdropImage(ctx context.Context, arg DeleteAnimeMovieBackdropImageParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieBackdropImage, arg.AnimeID, arg.ImageID)
	return err
}

const getAnimeMovieBackdropImage = `-- name: GetAnimeMovieBackdropImage :one
SELECT id, anime_id, image_id, created_at FROM anime_movie_backdrop_images
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovieBackdropImage(ctx context.Context, id int64) (AnimeMovieBackdropImage, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieBackdropImage, id)
	var i AnimeMovieBackdropImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const getAnimeMovieBackdropImageByAnimeID = `-- name: GetAnimeMovieBackdropImageByAnimeID :one
SELECT id, anime_id, image_id, created_at FROM anime_movie_backdrop_images
WHERE anime_id = $1 LIMIT 1
`

func (q *Queries) GetAnimeMovieBackdropImageByAnimeID(ctx context.Context, animeID int64) (AnimeMovieBackdropImage, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieBackdropImageByAnimeID, animeID)
	var i AnimeMovieBackdropImage
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.ImageID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieBackdropImages = `-- name: ListAnimeMovieBackdropImages :many
SELECT image_id
FROM anime_movie_backdrop_images
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeMovieBackdropImagesParams struct {
	AnimeID int64
	Limit   int32
	Offset  int32
}

func (q *Queries) ListAnimeMovieBackdropImages(ctx context.Context, arg ListAnimeMovieBackdropImagesParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieBackdropImages, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var image_id int64
		if err := rows.Scan(&image_id); err != nil {
			return nil, err
		}
		items = append(items, image_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
