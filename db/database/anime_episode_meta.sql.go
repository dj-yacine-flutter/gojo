// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_episode_meta.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeEpisodeMeta = `-- name: CreateAnimeEpisodeMeta :one
INSERT INTO anime_episode_metas (episode_id, language_id, meta_id)
VALUES ($1, $2, $3)
RETURNING id, episode_id, language_id, meta_id, created_at
`

type CreateAnimeEpisodeMetaParams struct {
	EpisodeID  int64
	LanguageID int32
	MetaID     int64
}

func (q *Queries) CreateAnimeEpisodeMeta(ctx context.Context, arg CreateAnimeEpisodeMetaParams) (AnimeEpisodeMeta, error) {
	row := q.db.QueryRow(ctx, createAnimeEpisodeMeta, arg.EpisodeID, arg.LanguageID, arg.MetaID)
	var i AnimeEpisodeMeta
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeEpisodeMeta = `-- name: DeleteAnimeEpisodeMeta :exec
DELETE FROM anime_episode_metas
WHERE episode_id = $1 AND language_id = $2
`

type DeleteAnimeEpisodeMetaParams struct {
	EpisodeID  int64
	LanguageID int32
}

func (q *Queries) DeleteAnimeEpisodeMeta(ctx context.Context, arg DeleteAnimeEpisodeMetaParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeEpisodeMeta, arg.EpisodeID, arg.LanguageID)
	return err
}

const getAnimeEpisodeMeta = `-- name: GetAnimeEpisodeMeta :one
SELECT meta_id FROM anime_episode_metas
WHERE episode_id = $1 AND language_id = $2
`

type GetAnimeEpisodeMetaParams struct {
	EpisodeID  int64
	LanguageID int32
}

func (q *Queries) GetAnimeEpisodeMeta(ctx context.Context, arg GetAnimeEpisodeMetaParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAnimeEpisodeMeta, arg.EpisodeID, arg.LanguageID)
	var meta_id int64
	err := row.Scan(&meta_id)
	return meta_id, err
}

const listAnimeEpisodeMetasByEpisode = `-- name: ListAnimeEpisodeMetasByEpisode :many
SELECT id, episode_id, language_id, meta_id, created_at FROM anime_episode_metas
WHERE episode_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeEpisodeMetasByEpisodeParams struct {
	EpisodeID int64
	Limit     int32
	Offset    int32
}

func (q *Queries) ListAnimeEpisodeMetasByEpisode(ctx context.Context, arg ListAnimeEpisodeMetasByEpisodeParams) ([]AnimeEpisodeMeta, error) {
	rows, err := q.db.Query(ctx, listAnimeEpisodeMetasByEpisode, arg.EpisodeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeEpisodeMeta{}
	for rows.Next() {
		var i AnimeEpisodeMeta
		if err := rows.Scan(
			&i.ID,
			&i.EpisodeID,
			&i.LanguageID,
			&i.MetaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeEpisodeMeta = `-- name: UpdateAnimeEpisodeMeta :one
UPDATE anime_episode_metas
SET
  meta_id = COALESCE($1, meta_id),
  episode_id = COALESCE($2, episode_id),
  language_id = COALESCE($3, language_id)
WHERE
  id = $4
RETURNING id, episode_id, language_id, meta_id, created_at
`

type UpdateAnimeEpisodeMetaParams struct {
	MetaID     pgtype.Int8
	EpisodeID  pgtype.Int8
	LanguageID pgtype.Int4
	ID         int64
}

func (q *Queries) UpdateAnimeEpisodeMeta(ctx context.Context, arg UpdateAnimeEpisodeMetaParams) (AnimeEpisodeMeta, error) {
	row := q.db.QueryRow(ctx, updateAnimeEpisodeMeta,
		arg.MetaID,
		arg.EpisodeID,
		arg.LanguageID,
		arg.ID,
	)
	var i AnimeEpisodeMeta
	err := row.Scan(
		&i.ID,
		&i.EpisodeID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}
