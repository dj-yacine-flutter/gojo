// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: anime_tag.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeTag = `-- name: CreateAnimeTag :one
INSERT INTO anime_tags (tag) VALUES ($1)
ON CONFLICT (tag) DO UPDATE SET tag = $1
RETURNING id, tag, created_at
`

func (q *Queries) CreateAnimeTag(ctx context.Context, tag string) (AnimeTag, error) {
	row := q.db.QueryRow(ctx, createAnimeTag, tag)
	var i AnimeTag
	err := row.Scan(&i.ID, &i.Tag, &i.CreatedAt)
	return i, err
}

const deleteAnimeTag = `-- name: DeleteAnimeTag :exec
DELETE FROM anime_tags
WHERE id = $1
`

func (q *Queries) DeleteAnimeTag(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeTag, id)
	return err
}

const getAnimeTag = `-- name: GetAnimeTag :one
SELECT id, tag, created_at FROM anime_tags
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeTag(ctx context.Context, id int64) (AnimeTag, error) {
	row := q.db.QueryRow(ctx, getAnimeTag, id)
	var i AnimeTag
	err := row.Scan(&i.ID, &i.Tag, &i.CreatedAt)
	return i, err
}

const getAnimeTagByTag = `-- name: GetAnimeTagByTag :one
SELECT id, tag, created_at FROM anime_tags
WHERE tag = $1 LIMIT 1
`

func (q *Queries) GetAnimeTagByTag(ctx context.Context, tag string) (AnimeTag, error) {
	row := q.db.QueryRow(ctx, getAnimeTagByTag, tag)
	var i AnimeTag
	err := row.Scan(&i.ID, &i.Tag, &i.CreatedAt)
	return i, err
}

const updateAnimeTag = `-- name: UpdateAnimeTag :one
UPDATE anime_tags
SET
  tag = COALESCE($1, tag)
WHERE
  id = $2
RETURNING id, tag, created_at
`

type UpdateAnimeTagParams struct {
	Tag pgtype.Text
	ID  int64
}

func (q *Queries) UpdateAnimeTag(ctx context.Context, arg UpdateAnimeTagParams) (AnimeTag, error) {
	row := q.db.QueryRow(ctx, updateAnimeTag, arg.Tag, arg.ID)
	var i AnimeTag
	err := row.Scan(&i.ID, &i.Tag, &i.CreatedAt)
	return i, err
}
