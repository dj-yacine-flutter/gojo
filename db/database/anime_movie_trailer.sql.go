// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_trailer.sql

package db

import (
	"context"
)

const createAnimeMovieTrailer = `-- name: CreateAnimeMovieTrailer :one
INSERT INTO anime_movie_trailers (anime_id, trailer_id)
VALUES ($1, $2)
RETURNING id, anime_id, trailer_id, created_at
`

type CreateAnimeMovieTrailerParams struct {
	AnimeID   int64
	TrailerID int64
}

func (q *Queries) CreateAnimeMovieTrailer(ctx context.Context, arg CreateAnimeMovieTrailerParams) (AnimeMovieTrailer, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieTrailer, arg.AnimeID, arg.TrailerID)
	var i AnimeMovieTrailer
	err := row.Scan(
		&i.ID,
		&i.AnimeID,
		&i.TrailerID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieTrailer = `-- name: DeleteAnimeMovieTrailer :exec
DELETE FROM anime_movie_trailers
WHERE anime_id = $1 AND trailer_id = $2
`

type DeleteAnimeMovieTrailerParams struct {
	AnimeID   int64
	TrailerID int64
}

func (q *Queries) DeleteAnimeMovieTrailer(ctx context.Context, arg DeleteAnimeMovieTrailerParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieTrailer, arg.AnimeID, arg.TrailerID)
	return err
}

const listAnimeMovieTrailers = `-- name: ListAnimeMovieTrailers :many
SELECT trailer_id FROM anime_movie_trailers
WHERE anime_id = $1
`

func (q *Queries) ListAnimeMovieTrailers(ctx context.Context, animeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieTrailers, animeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var trailer_id int64
		if err := rows.Scan(&trailer_id); err != nil {
			return nil, err
		}
		items = append(items, trailer_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
