// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: anime_studio.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeStudio = `-- name: CreateAnimeStudio :exec
INSERT INTO anime_studio (anime_id, studio_id)
VALUES ($1, $2)
`

type CreateAnimeStudioParams struct {
	AnimeID  int64       `json:"anime_id"`
	StudioID pgtype.Int4 `json:"studio_id"`
}

func (q *Queries) CreateAnimeStudio(ctx context.Context, arg CreateAnimeStudioParams) error {
	_, err := q.db.Exec(ctx, createAnimeStudio, arg.AnimeID, arg.StudioID)
	return err
}

const deleteAnimeStudio = `-- name: DeleteAnimeStudio :exec
DELETE FROM anime_studio
WHERE anime_id = $1 AND studio_id = $2
`

type DeleteAnimeStudioParams struct {
	AnimeID  int64       `json:"anime_id"`
	StudioID pgtype.Int4 `json:"studio_id"`
}

func (q *Queries) DeleteAnimeStudio(ctx context.Context, arg DeleteAnimeStudioParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeStudio, arg.AnimeID, arg.StudioID)
	return err
}

const getAnimeStudio = `-- name: GetAnimeStudio :one
SELECT id, anime_id, studio_id FROM anime_studio
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAnimeStudio(ctx context.Context, id int64) (AnimeStudio, error) {
	row := q.db.QueryRow(ctx, getAnimeStudio, id)
	var i AnimeStudio
	err := row.Scan(&i.ID, &i.AnimeID, &i.StudioID)
	return i, err
}

const listAnimeStudios = `-- name: ListAnimeStudios :many
SELECT studio_id
FROM anime_studio
WHERE anime_id = $1
LIMIT $2
OFFSET $3
`

type ListAnimeStudiosParams struct {
	AnimeID int64 `json:"anime_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListAnimeStudios(ctx context.Context, arg ListAnimeStudiosParams) ([]pgtype.Int4, error) {
	rows, err := q.db.Query(ctx, listAnimeStudios, arg.AnimeID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []pgtype.Int4{}
	for rows.Next() {
		var studio_id pgtype.Int4
		if err := rows.Scan(&studio_id); err != nil {
			return nil, err
		}
		items = append(items, studio_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeStudio = `-- name: UpdateAnimeStudio :one
UPDATE anime_studio
SET studio_id = $2
WHERE anime_id = $1
RETURNING id, anime_id, studio_id
`

type UpdateAnimeStudioParams struct {
	AnimeID  int64       `json:"anime_id"`
	StudioID pgtype.Int4 `json:"studio_id"`
}

func (q *Queries) UpdateAnimeStudio(ctx context.Context, arg UpdateAnimeStudioParams) (AnimeStudio, error) {
	row := q.db.QueryRow(ctx, updateAnimeStudio, arg.AnimeID, arg.StudioID)
	var i AnimeStudio
	err := row.Scan(&i.ID, &i.AnimeID, &i.StudioID)
	return i, err
}
