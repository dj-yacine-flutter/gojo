// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_server_dub_torrent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovieServerDubTorrent = `-- name: CreateAnimeMovieServerDubTorrent :one
INSERT INTO anime_movie_server_dub_torrents (server_id, torrent_id)
VALUES ($1, $2)
RETURNING id, server_id, torrent_id, created_at
`

type CreateAnimeMovieServerDubTorrentParams struct {
	ServerID  int64
	TorrentID int64
}

func (q *Queries) CreateAnimeMovieServerDubTorrent(ctx context.Context, arg CreateAnimeMovieServerDubTorrentParams) (AnimeMovieServerDubTorrent, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieServerDubTorrent, arg.ServerID, arg.TorrentID)
	var i AnimeMovieServerDubTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieServerDubTorrent = `-- name: DeleteAnimeMovieServerDubTorrent :exec
DELETE FROM anime_movie_server_dub_torrents
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovieServerDubTorrent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieServerDubTorrent, id)
	return err
}

const getAnimeMovieServerDubTorrent = `-- name: GetAnimeMovieServerDubTorrent :one
SELECT id, server_id, torrent_id, created_at FROM anime_movie_server_dub_torrents
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieServerDubTorrent(ctx context.Context, id int64) (AnimeMovieServerDubTorrent, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieServerDubTorrent, id)
	var i AnimeMovieServerDubTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieServerDubTorrents = `-- name: ListAnimeMovieServerDubTorrents :many
SELECT id, server_id, torrent_id, created_at FROM anime_movie_server_dub_torrents
WHERE server_id = $1
ORDER BY id
`

func (q *Queries) ListAnimeMovieServerDubTorrents(ctx context.Context, serverID int64) ([]AnimeMovieServerDubTorrent, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieServerDubTorrents, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovieServerDubTorrent{}
	for rows.Next() {
		var i AnimeMovieServerDubTorrent
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.TorrentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovieServerDubTorrent = `-- name: UpdateAnimeMovieServerDubTorrent :one
UPDATE anime_movie_server_dub_torrents
SET 
  server_id = COALESCE($1, server_id),
  torrent_id = COALESCE($2, torrent_id)
WHERE
  id = $3
RETURNING id, server_id, torrent_id, created_at
`

type UpdateAnimeMovieServerDubTorrentParams struct {
	ServerID  pgtype.Int8
	TorrentID pgtype.Int8
	ID        int64
}

func (q *Queries) UpdateAnimeMovieServerDubTorrent(ctx context.Context, arg UpdateAnimeMovieServerDubTorrentParams) (AnimeMovieServerDubTorrent, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovieServerDubTorrent, arg.ServerID, arg.TorrentID, arg.ID)
	var i AnimeMovieServerDubTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}
