// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_movie_server_torrent.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeMovieServerTorrent = `-- name: CreateAnimeMovieServerTorrent :one
INSERT INTO anime_movie_server_torrents (server_id, torrent_id)
VALUES ($1, $2)
RETURNING id, server_id, torrent_id, created_at
`

type CreateAnimeMovieServerTorrentParams struct {
	ServerID  int64 `json:"server_id"`
	TorrentID int64 `json:"torrent_id"`
}

func (q *Queries) CreateAnimeMovieServerTorrent(ctx context.Context, arg CreateAnimeMovieServerTorrentParams) (AnimeMovieServerTorrent, error) {
	row := q.db.QueryRow(ctx, createAnimeMovieServerTorrent, arg.ServerID, arg.TorrentID)
	var i AnimeMovieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeMovieServerTorrent = `-- name: DeleteAnimeMovieServerTorrent :exec
DELETE FROM anime_movie_server_torrents
WHERE id = $1
`

func (q *Queries) DeleteAnimeMovieServerTorrent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteAnimeMovieServerTorrent, id)
	return err
}

const getAnimeMovieServerTorrent = `-- name: GetAnimeMovieServerTorrent :one
SELECT id, server_id, torrent_id, created_at FROM anime_movie_server_torrents
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAnimeMovieServerTorrent(ctx context.Context, id int64) (AnimeMovieServerTorrent, error) {
	row := q.db.QueryRow(ctx, getAnimeMovieServerTorrent, id)
	var i AnimeMovieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeMovieServerTorrents = `-- name: ListAnimeMovieServerTorrents :many
SELECT id, server_id, torrent_id, created_at FROM anime_movie_server_torrents
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAnimeMovieServerTorrentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAnimeMovieServerTorrents(ctx context.Context, arg ListAnimeMovieServerTorrentsParams) ([]AnimeMovieServerTorrent, error) {
	rows, err := q.db.Query(ctx, listAnimeMovieServerTorrents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeMovieServerTorrent{}
	for rows.Next() {
		var i AnimeMovieServerTorrent
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.TorrentID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeMovieServerTorrent = `-- name: UpdateAnimeMovieServerTorrent :one
UPDATE anime_movie_server_torrents
SET 
  server_id = COALESCE($1, server_id),
  torrent_id = COALESCE($2, torrent_id)
WHERE
  id = $3
RETURNING id, server_id, torrent_id, created_at
`

type UpdateAnimeMovieServerTorrentParams struct {
	ServerID  pgtype.Int8 `json:"server_id"`
	TorrentID pgtype.Int8 `json:"torrent_id"`
	ID        int64       `json:"id"`
}

func (q *Queries) UpdateAnimeMovieServerTorrent(ctx context.Context, arg UpdateAnimeMovieServerTorrentParams) (AnimeMovieServerTorrent, error) {
	row := q.db.QueryRow(ctx, updateAnimeMovieServerTorrent, arg.ServerID, arg.TorrentID, arg.ID)
	var i AnimeMovieServerTorrent
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.TorrentID,
		&i.CreatedAt,
	)
	return i, err
}
