// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_serie_season_meta.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSerieSeasonMeta = `-- name: CreateAnimeSerieSeasonMeta :one
INSERT INTO anime_serie_season_metas (season_id, language_id, meta_id)
VALUES ($1, $2, $3)
RETURNING id, season_id, language_id, meta_id, created_at
`

type CreateAnimeSerieSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
	MetaID     int64
}

func (q *Queries) CreateAnimeSerieSeasonMeta(ctx context.Context, arg CreateAnimeSerieSeasonMetaParams) (AnimeSerieSeasonMeta, error) {
	row := q.db.QueryRow(ctx, createAnimeSerieSeasonMeta, arg.SeasonID, arg.LanguageID, arg.MetaID)
	var i AnimeSerieSeasonMeta
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSerieSeasonMeta = `-- name: DeleteAnimeSerieSeasonMeta :exec
DELETE FROM anime_serie_season_metas
WHERE season_id = $1 AND language_id = $2
`

type DeleteAnimeSerieSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
}

func (q *Queries) DeleteAnimeSerieSeasonMeta(ctx context.Context, arg DeleteAnimeSerieSeasonMetaParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSerieSeasonMeta, arg.SeasonID, arg.LanguageID)
	return err
}

const getAnimeSerieSeasonMeta = `-- name: GetAnimeSerieSeasonMeta :one
SELECT id, season_id, language_id, meta_id, created_at FROM anime_serie_season_metas
WHERE season_id = $1 AND language_id = $2
`

type GetAnimeSerieSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
}

func (q *Queries) GetAnimeSerieSeasonMeta(ctx context.Context, arg GetAnimeSerieSeasonMetaParams) (AnimeSerieSeasonMeta, error) {
	row := q.db.QueryRow(ctx, getAnimeSerieSeasonMeta, arg.SeasonID, arg.LanguageID)
	var i AnimeSerieSeasonMeta
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const listAnimeSerieSeasonMetasBySeason = `-- name: ListAnimeSerieSeasonMetasBySeason :many
SELECT id, season_id, language_id, meta_id, created_at FROM anime_serie_season_metas
WHERE season_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeSerieSeasonMetasBySeasonParams struct {
	SeasonID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAnimeSerieSeasonMetasBySeason(ctx context.Context, arg ListAnimeSerieSeasonMetasBySeasonParams) ([]AnimeSerieSeasonMeta, error) {
	rows, err := q.db.Query(ctx, listAnimeSerieSeasonMetasBySeason, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSerieSeasonMeta{}
	for rows.Next() {
		var i AnimeSerieSeasonMeta
		if err := rows.Scan(
			&i.ID,
			&i.SeasonID,
			&i.LanguageID,
			&i.MetaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSerieSeasonMeta = `-- name: UpdateAnimeSerieSeasonMeta :one
UPDATE anime_serie_season_metas
SET
  meta_id = COALESCE($1, meta_id),
  season_id = COALESCE($2, season_id),
  language_id = COALESCE($3, language_id)
WHERE
  id = $4
RETURNING id, season_id, language_id, meta_id, created_at
`

type UpdateAnimeSerieSeasonMetaParams struct {
	MetaID     pgtype.Int8
	SeasonID   pgtype.Int8
	LanguageID pgtype.Int4
	ID         int64
}

func (q *Queries) UpdateAnimeSerieSeasonMeta(ctx context.Context, arg UpdateAnimeSerieSeasonMetaParams) (AnimeSerieSeasonMeta, error) {
	row := q.db.QueryRow(ctx, updateAnimeSerieSeasonMeta,
		arg.MetaID,
		arg.SeasonID,
		arg.LanguageID,
		arg.ID,
	)
	var i AnimeSerieSeasonMeta
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}
