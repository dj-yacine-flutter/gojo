// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: anime_season_meta.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAnimeSeasonMeta = `-- name: CreateAnimeSeasonMeta :one
INSERT INTO anime_season_metas (season_id, language_id, meta_id)
VALUES ($1, $2, $3)
RETURNING id, season_id, language_id, meta_id, created_at
`

type CreateAnimeSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
	MetaID     int64
}

func (q *Queries) CreateAnimeSeasonMeta(ctx context.Context, arg CreateAnimeSeasonMetaParams) (AnimeSeasonMeta, error) {
	row := q.db.QueryRow(ctx, createAnimeSeasonMeta, arg.SeasonID, arg.LanguageID, arg.MetaID)
	var i AnimeSeasonMeta
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnimeSeasonMeta = `-- name: DeleteAnimeSeasonMeta :exec
DELETE FROM anime_season_metas
WHERE season_id = $1 AND language_id = $2
`

type DeleteAnimeSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
}

func (q *Queries) DeleteAnimeSeasonMeta(ctx context.Context, arg DeleteAnimeSeasonMetaParams) error {
	_, err := q.db.Exec(ctx, deleteAnimeSeasonMeta, arg.SeasonID, arg.LanguageID)
	return err
}

const getAnimeSeasonMeta = `-- name: GetAnimeSeasonMeta :one
SELECT meta_id FROM anime_season_metas
WHERE season_id = $1 AND language_id = $2
`

type GetAnimeSeasonMetaParams struct {
	SeasonID   int64
	LanguageID int32
}

func (q *Queries) GetAnimeSeasonMeta(ctx context.Context, arg GetAnimeSeasonMetaParams) (int64, error) {
	row := q.db.QueryRow(ctx, getAnimeSeasonMeta, arg.SeasonID, arg.LanguageID)
	var meta_id int64
	err := row.Scan(&meta_id)
	return meta_id, err
}

const listAnimeSeasonMetasBySeason = `-- name: ListAnimeSeasonMetasBySeason :many
SELECT id, season_id, language_id, meta_id, created_at FROM anime_season_metas
WHERE season_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListAnimeSeasonMetasBySeasonParams struct {
	SeasonID int64
	Limit    int32
	Offset   int32
}

func (q *Queries) ListAnimeSeasonMetasBySeason(ctx context.Context, arg ListAnimeSeasonMetasBySeasonParams) ([]AnimeSeasonMeta, error) {
	rows, err := q.db.Query(ctx, listAnimeSeasonMetasBySeason, arg.SeasonID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AnimeSeasonMeta{}
	for rows.Next() {
		var i AnimeSeasonMeta
		if err := rows.Scan(
			&i.ID,
			&i.SeasonID,
			&i.LanguageID,
			&i.MetaID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnimeSeasonMeta = `-- name: UpdateAnimeSeasonMeta :one
UPDATE anime_season_metas
SET
  meta_id = COALESCE($1, meta_id),
  season_id = COALESCE($2, season_id),
  language_id = COALESCE($3, language_id)
WHERE
  id = $4
RETURNING id, season_id, language_id, meta_id, created_at
`

type UpdateAnimeSeasonMetaParams struct {
	MetaID     pgtype.Int8
	SeasonID   pgtype.Int8
	LanguageID pgtype.Int4
	ID         int64
}

func (q *Queries) UpdateAnimeSeasonMeta(ctx context.Context, arg UpdateAnimeSeasonMetaParams) (AnimeSeasonMeta, error) {
	row := q.db.QueryRow(ctx, updateAnimeSeasonMeta,
		arg.MetaID,
		arg.SeasonID,
		arg.LanguageID,
		arg.ID,
	)
	var i AnimeSeasonMeta
	err := row.Scan(
		&i.ID,
		&i.SeasonID,
		&i.LanguageID,
		&i.MetaID,
		&i.CreatedAt,
	)
	return i, err
}
